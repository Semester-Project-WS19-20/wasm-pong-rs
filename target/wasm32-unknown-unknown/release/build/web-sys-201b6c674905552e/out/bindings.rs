#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `AudioBuffer` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer)\n\n*This API requires the following crate features to be activated: `AudioBuffer`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct AudioBuffer {
    obj: Object,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_AudioBuffer: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for AudioBuffer {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for AudioBuffer {
        type Target = Object;
        #[inline]
        fn deref(&self) -> &Object {
            &self.obj
        }
    }
    impl IntoWasmAbi for AudioBuffer {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for AudioBuffer {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a AudioBuffer {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for AudioBuffer {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            AudioBuffer {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for AudioBuffer {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a AudioBuffer {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for AudioBuffer {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<AudioBuffer>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(AudioBuffer {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for AudioBuffer {
        #[inline]
        fn from(obj: JsValue) -> AudioBuffer {
            AudioBuffer { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for AudioBuffer {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<AudioBuffer> for AudioBuffer {
        #[inline]
        fn as_ref(&self) -> &AudioBuffer {
            self
        }
    }
    impl From<AudioBuffer> for JsValue {
        #[inline]
        fn from(obj: AudioBuffer) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for AudioBuffer {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_AudioBuffer(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_AudioBuffer(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_AudioBuffer(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            AudioBuffer { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const AudioBuffer) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<AudioBuffer> for Object {
    #[inline]
    fn from(obj: AudioBuffer) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for AudioBuffer {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_copy_from_channel_AudioBuffer() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&AudioBuffer as WasmDescribe>::describe();
    <&mut [f32] as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioBuffer {
    #[allow(bad_style)]
    #[doc = "The `copyFromChannel()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyFromChannel)\n\n*This API requires the following crate features to be activated: `AudioBuffer`*"]
    #[allow(clippy::all)]
    pub fn copy_from_channel(
        &self,
        destination: &mut [f32],
        channel_number: i32,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_copy_from_channel_AudioBuffer(
                self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                destination: <&mut [f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                channel_number: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_copy_from_channel_AudioBuffer(
            self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            destination: <&mut [f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            channel_number: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(destination);
            drop(channel_number);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let destination =
                    <&mut [f32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(destination);
                let channel_number =
                    <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(channel_number);
                __widl_f_copy_from_channel_AudioBuffer(self_, destination, channel_number)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_copy_from_channel_with_start_in_channel_AudioBuffer()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&AudioBuffer as WasmDescribe>::describe();
    <&mut [f32] as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioBuffer {
    #[allow(bad_style)]
    #[doc = "The `copyFromChannel()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyFromChannel)\n\n*This API requires the following crate features to be activated: `AudioBuffer`*"]
    #[allow(clippy::all)]
    pub fn copy_from_channel_with_start_in_channel(
        &self,
        destination: &mut [f32],
        channel_number: i32,
        start_in_channel: u32,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_copy_from_channel_with_start_in_channel_AudioBuffer(
                self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                destination: <&mut [f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                channel_number: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                start_in_channel: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_copy_from_channel_with_start_in_channel_AudioBuffer(
            self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            destination: <&mut [f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            channel_number: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            start_in_channel: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(destination);
            drop(channel_number);
            drop(start_in_channel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let destination =
                    <&mut [f32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(destination);
                let channel_number =
                    <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(channel_number);
                let start_in_channel =
                    <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(start_in_channel);
                __widl_f_copy_from_channel_with_start_in_channel_AudioBuffer(
                    self_,
                    destination,
                    channel_number,
                    start_in_channel,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_copy_to_channel_AudioBuffer() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&AudioBuffer as WasmDescribe>::describe();
    <&mut [f32] as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioBuffer {
    #[allow(bad_style)]
    #[doc = "The `copyToChannel()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyToChannel)\n\n*This API requires the following crate features to be activated: `AudioBuffer`*"]
    #[allow(clippy::all)]
    pub fn copy_to_channel(
        &self,
        source: &mut [f32],
        channel_number: i32,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_copy_to_channel_AudioBuffer(
                self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                source: <&mut [f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                channel_number: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_copy_to_channel_AudioBuffer(
            self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            source: <&mut [f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            channel_number: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(source);
            drop(channel_number);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let source = <&mut [f32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(source);
                let channel_number =
                    <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(channel_number);
                __widl_f_copy_to_channel_AudioBuffer(self_, source, channel_number)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_copy_to_channel_with_start_in_channel_AudioBuffer() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&AudioBuffer as WasmDescribe>::describe();
    <&mut [f32] as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioBuffer {
    #[allow(bad_style)]
    #[doc = "The `copyToChannel()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyToChannel)\n\n*This API requires the following crate features to be activated: `AudioBuffer`*"]
    #[allow(clippy::all)]
    pub fn copy_to_channel_with_start_in_channel(
        &self,
        source: &mut [f32],
        channel_number: i32,
        start_in_channel: u32,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_copy_to_channel_with_start_in_channel_AudioBuffer(
                self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                source: <&mut [f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                channel_number: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                start_in_channel: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_copy_to_channel_with_start_in_channel_AudioBuffer(
            self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            source: <&mut [f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            channel_number: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            start_in_channel: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(source);
            drop(channel_number);
            drop(start_in_channel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let source = <&mut [f32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(source);
                let channel_number =
                    <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(channel_number);
                let start_in_channel =
                    <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(start_in_channel);
                __widl_f_copy_to_channel_with_start_in_channel_AudioBuffer(
                    self_,
                    source,
                    channel_number,
                    start_in_channel,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_channel_data_AudioBuffer() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&AudioBuffer as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <Vec<f32> as WasmDescribe>::describe();
}
impl AudioBuffer {
    #[allow(bad_style)]
    #[doc = "The `getChannelData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/getChannelData)\n\n*This API requires the following crate features to be activated: `AudioBuffer`*"]
    #[allow(clippy::all)]
    pub fn get_channel_data(&self, channel: u32) -> Result<Vec<f32>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_channel_data_AudioBuffer(
                self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                channel: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Vec<f32> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_channel_data_AudioBuffer(
            self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            channel: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Vec<f32> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(channel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let channel = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(channel);
                __widl_f_get_channel_data_AudioBuffer(self_, channel)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Vec<f32> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_sample_rate_AudioBuffer() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioBuffer as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
}
impl AudioBuffer {
    #[allow(bad_style)]
    #[doc = "The `sampleRate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/sampleRate)\n\n*This API requires the following crate features to be activated: `AudioBuffer`*"]
    #[allow(clippy::all)]
    pub fn sample_rate(&self) -> f32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_sample_rate_AudioBuffer(
                self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_sample_rate_AudioBuffer(
            self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_sample_rate_AudioBuffer(self_)
            };
            <f32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_length_AudioBuffer() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioBuffer as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl AudioBuffer {
    #[allow(bad_style)]
    #[doc = "The `length` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/length)\n\n*This API requires the following crate features to be activated: `AudioBuffer`*"]
    #[allow(clippy::all)]
    pub fn length(&self) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_length_AudioBuffer(
                self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_length_AudioBuffer(
            self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_length_AudioBuffer(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_duration_AudioBuffer() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioBuffer as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
}
impl AudioBuffer {
    #[allow(bad_style)]
    #[doc = "The `duration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/duration)\n\n*This API requires the following crate features to be activated: `AudioBuffer`*"]
    #[allow(clippy::all)]
    pub fn duration(&self) -> f64 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_duration_AudioBuffer(
                self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_duration_AudioBuffer(
            self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_duration_AudioBuffer(self_)
            };
            <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_number_of_channels_AudioBuffer() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioBuffer as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl AudioBuffer {
    #[allow(bad_style)]
    #[doc = "The `numberOfChannels` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/numberOfChannels)\n\n*This API requires the following crate features to be activated: `AudioBuffer`*"]
    #[allow(clippy::all)]
    pub fn number_of_channels(&self) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_number_of_channels_AudioBuffer(
                self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_number_of_channels_AudioBuffer(
            self_: <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioBuffer as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_number_of_channels_AudioBuffer(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `AudioBufferSourceNode` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct AudioBufferSourceNode {
    obj: AudioNode,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_AudioBufferSourceNode: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for AudioBufferSourceNode {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for AudioBufferSourceNode {
        type Target = AudioNode;
        #[inline]
        fn deref(&self) -> &AudioNode {
            &self.obj
        }
    }
    impl IntoWasmAbi for AudioBufferSourceNode {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for AudioBufferSourceNode {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a AudioBufferSourceNode {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for AudioBufferSourceNode {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            AudioBufferSourceNode {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for AudioBufferSourceNode {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a AudioBufferSourceNode {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for AudioBufferSourceNode {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<AudioBufferSourceNode>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(AudioBufferSourceNode {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for AudioBufferSourceNode {
        #[inline]
        fn from(obj: JsValue) -> AudioBufferSourceNode {
            AudioBufferSourceNode { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for AudioBufferSourceNode {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<AudioBufferSourceNode> for AudioBufferSourceNode {
        #[inline]
        fn as_ref(&self) -> &AudioBufferSourceNode {
            self
        }
    }
    impl From<AudioBufferSourceNode> for JsValue {
        #[inline]
        fn from(obj: AudioBufferSourceNode) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for AudioBufferSourceNode {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_AudioBufferSourceNode(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_AudioBufferSourceNode(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_AudioBufferSourceNode(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            AudioBufferSourceNode { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const AudioBufferSourceNode) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<AudioBufferSourceNode> for AudioNode {
    #[inline]
    fn from(obj: AudioBufferSourceNode) -> AudioNode {
        use wasm_bindgen::JsCast;
        AudioNode::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<AudioNode> for AudioBufferSourceNode {
    #[inline]
    fn as_ref(&self) -> &AudioNode {
        use wasm_bindgen::JsCast;
        AudioNode::unchecked_from_js_ref(self.as_ref())
    }
}
#[allow(clippy::all)]
impl From<AudioBufferSourceNode> for Object {
    #[inline]
    fn from(obj: AudioBufferSourceNode) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for AudioBufferSourceNode {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_start_AudioBufferSourceNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `start()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn start(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_start_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_start_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_start_AudioBufferSourceNode(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_start_with_when_AudioBufferSourceNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `start()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn start_with_when(&self, when: f64) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_start_with_when_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                when: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_start_with_when_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            when: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(when);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let when = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(when);
                __widl_f_start_with_when_AudioBufferSourceNode(self_, when)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_start_with_when_and_grain_offset_AudioBufferSourceNode(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `start()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn start_with_when_and_grain_offset(
        &self,
        when: f64,
        grain_offset: f64,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_start_with_when_and_grain_offset_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                when: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                grain_offset: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_start_with_when_and_grain_offset_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            when: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            grain_offset: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(when);
            drop(grain_offset);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let when = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(when);
                let grain_offset =
                    <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(grain_offset);
                __widl_f_start_with_when_and_grain_offset_AudioBufferSourceNode(
                    self_,
                    when,
                    grain_offset,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_start_with_when_and_grain_offset_and_grain_duration_AudioBufferSourceNode(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `start()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn start_with_when_and_grain_offset_and_grain_duration(
        &self,
        when: f64,
        grain_offset: f64,
        grain_duration: f64,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_start_with_when_and_grain_offset_and_grain_duration_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                when: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                grain_offset: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                grain_duration: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_start_with_when_and_grain_offset_and_grain_duration_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            when: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            grain_offset: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            grain_duration: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(when);
            drop(grain_offset);
            drop(grain_duration);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let when = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(when);
                let grain_offset =
                    <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(grain_offset);
                let grain_duration =
                    <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(grain_duration);
                __widl_f_start_with_when_and_grain_offset_and_grain_duration_AudioBufferSourceNode(
                    self_,
                    when,
                    grain_offset,
                    grain_duration,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_stop_AudioBufferSourceNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `stop()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/stop)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn stop(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_stop_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_stop_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_stop_AudioBufferSourceNode(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_stop_with_when_AudioBufferSourceNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `stop()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/stop)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn stop_with_when(&self, when: f64) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_stop_with_when_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                when: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_stop_with_when_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            when: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(when);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let when = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(when);
                __widl_f_stop_with_when_AudioBufferSourceNode(self_, when)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_buffer_AudioBufferSourceNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <Option<AudioBuffer> as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `buffer` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/buffer)\n\n*This API requires the following crate features to be activated: `AudioBuffer`, `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn buffer(&self) -> Option<AudioBuffer> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_buffer_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<AudioBuffer> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_buffer_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<AudioBuffer> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_buffer_AudioBufferSourceNode(self_)
            };
            <Option<AudioBuffer> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_buffer_AudioBufferSourceNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <Option<&AudioBuffer> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `buffer` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/buffer)\n\n*This API requires the following crate features to be activated: `AudioBuffer`, `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn set_buffer(&self, buffer: Option<&AudioBuffer>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_buffer_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                buffer: <Option<&AudioBuffer> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_buffer_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            buffer: <Option<&AudioBuffer> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(buffer);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let buffer =
                    <Option<&AudioBuffer> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(buffer);
                __widl_f_set_buffer_AudioBufferSourceNode(self_, buffer)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_loop_AudioBufferSourceNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `loop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn loop_(&self) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_loop_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_loop_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_loop_AudioBufferSourceNode(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_loop_AudioBufferSourceNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `loop` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn set_loop(&self, loop_: bool) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_loop_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                loop_: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_loop_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            loop_: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(loop_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let loop_ = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(loop_);
                __widl_f_set_loop_AudioBufferSourceNode(self_, loop_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_loop_start_AudioBufferSourceNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `loopStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopStart)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn loop_start(&self) -> f64 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_loop_start_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_loop_start_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_loop_start_AudioBufferSourceNode(self_)
            };
            <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_loop_start_AudioBufferSourceNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `loopStart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopStart)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn set_loop_start(&self, loop_start: f64) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_loop_start_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                loop_start: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_loop_start_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            loop_start: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(loop_start);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let loop_start = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(loop_start);
                __widl_f_set_loop_start_AudioBufferSourceNode(self_, loop_start)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_loop_end_AudioBufferSourceNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `loopEnd` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn loop_end(&self) -> f64 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_loop_end_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_loop_end_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_loop_end_AudioBufferSourceNode(self_)
            };
            <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_loop_end_AudioBufferSourceNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `loopEnd` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn set_loop_end(&self, loop_end: f64) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_loop_end_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                loop_end: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_loop_end_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            loop_end: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(loop_end);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let loop_end = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(loop_end);
                __widl_f_set_loop_end_AudioBufferSourceNode(self_, loop_end)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onended_AudioBufferSourceNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `onended` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/onended)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn onended(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onended_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onended_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onended_AudioBufferSourceNode(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onended_AudioBufferSourceNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&AudioBufferSourceNode as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioBufferSourceNode {
    #[allow(bad_style)]
    #[doc = "The `onended` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/onended)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`*"]
    #[allow(clippy::all)]
    pub fn set_onended(&self, onended: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onended_AudioBufferSourceNode(
                self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onended: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onended_AudioBufferSourceNode(
            self_: <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onended: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onended);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioBufferSourceNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onended =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onended,
                    );
                __widl_f_set_onended_AudioBufferSourceNode(self_, onended)
            };
            ()
        }
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `AudioContext` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext)\n\n*This API requires the following crate features to be activated: `AudioContext`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct AudioContext {
    obj: Object,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_AudioContext: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for AudioContext {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for AudioContext {
        type Target = Object;
        #[inline]
        fn deref(&self) -> &Object {
            &self.obj
        }
    }
    impl IntoWasmAbi for AudioContext {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for AudioContext {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a AudioContext {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for AudioContext {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            AudioContext {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for AudioContext {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a AudioContext {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for AudioContext {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<AudioContext>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(AudioContext {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for AudioContext {
        #[inline]
        fn from(obj: JsValue) -> AudioContext {
            AudioContext { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for AudioContext {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<AudioContext> for AudioContext {
        #[inline]
        fn as_ref(&self) -> &AudioContext {
            self
        }
    }
    impl From<AudioContext> for JsValue {
        #[inline]
        fn from(obj: AudioContext) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for AudioContext {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_AudioContext(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_AudioContext(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_AudioContext(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            AudioContext { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const AudioContext) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<AudioContext> for Object {
    #[inline]
    fn from(obj: AudioContext) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for AudioContext {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_new_AudioContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(0u32);
    <AudioContext as WasmDescribe>::describe();
}
impl AudioContext {
    #[allow(bad_style)]
    #[doc = "The `new AudioContext(..)` constructor, creating a new instance of `AudioContext`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/AudioContext)\n\n*This API requires the following crate features to be activated: `AudioContext`*"]
    #[allow(clippy::all)]
    pub fn new() -> Result<AudioContext, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_new_AudioContext(
            ) -> <AudioContext as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_new_AudioContext(
        ) -> <AudioContext as wasm_bindgen::convert::FromWasmAbi>::Abi {
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = { __widl_f_new_AudioContext() };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<AudioContext as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_close_AudioContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioContext as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl AudioContext {
    #[allow(bad_style)]
    #[doc = "The `close()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/close)\n\n*This API requires the following crate features to be activated: `AudioContext`*"]
    #[allow(clippy::all)]
    pub fn close(&self) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_close_AudioContext(
                self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_close_AudioContext(
            self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_close_AudioContext(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_suspend_AudioContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioContext as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl AudioContext {
    #[allow(bad_style)]
    #[doc = "The `suspend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/suspend)\n\n*This API requires the following crate features to be activated: `AudioContext`*"]
    #[allow(clippy::all)]
    pub fn suspend(&self) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_suspend_AudioContext(
                self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_suspend_AudioContext(
            self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_suspend_AudioContext(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_buffer_AudioContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&AudioContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <AudioBuffer as WasmDescribe>::describe();
}
impl AudioContext {
    #[allow(bad_style)]
    #[doc = "The `createBuffer()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBuffer)\n\n*This API requires the following crate features to be activated: `AudioBuffer`, `AudioContext`*"]
    #[allow(clippy::all)]
    pub fn create_buffer(
        &self,
        number_of_channels: u32,
        length: u32,
        sample_rate: f32,
    ) -> Result<AudioBuffer, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_buffer_AudioContext(
                self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                number_of_channels: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                length: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                sample_rate: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <AudioBuffer as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_buffer_AudioContext(
            self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            number_of_channels: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            length: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            sample_rate: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <AudioBuffer as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(number_of_channels);
            drop(length);
            drop(sample_rate);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let number_of_channels =
                    <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(number_of_channels);
                let length = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(length);
                let sample_rate =
                    <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(sample_rate);
                __widl_f_create_buffer_AudioContext(self_, number_of_channels, length, sample_rate)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<AudioBuffer as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_buffer_source_AudioContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioContext as WasmDescribe>::describe();
    <AudioBufferSourceNode as WasmDescribe>::describe();
}
impl AudioContext {
    #[allow(bad_style)]
    #[doc = "The `createBufferSource()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBufferSource)\n\n*This API requires the following crate features to be activated: `AudioBufferSourceNode`, `AudioContext`*"]
    #[allow(clippy::all)]
    pub fn create_buffer_source(&self) -> Result<AudioBufferSourceNode, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_buffer_source_AudioContext(
                self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <AudioBufferSourceNode as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_buffer_source_AudioContext(
            self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <AudioBufferSourceNode as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_create_buffer_source_AudioContext(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<AudioBufferSourceNode as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_decode_audio_data_AudioContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&AudioContext as WasmDescribe>::describe();
    <&::js_sys::ArrayBuffer as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl AudioContext {
    #[allow(bad_style)]
    #[doc = "The `decodeAudioData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData)\n\n*This API requires the following crate features to be activated: `AudioContext`*"]
    #[allow(clippy::all)]
    pub fn decode_audio_data(
        &self,
        audio_data: &::js_sys::ArrayBuffer,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_decode_audio_data_AudioContext(
                self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                audio_data: <&::js_sys::ArrayBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_decode_audio_data_AudioContext(
            self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            audio_data: <&::js_sys::ArrayBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(audio_data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let audio_data =
                    <&::js_sys::ArrayBuffer as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        audio_data,
                    );
                __widl_f_decode_audio_data_AudioContext(self_, audio_data)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_decode_audio_data_with_success_callback_AudioContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&AudioContext as WasmDescribe>::describe();
    <&::js_sys::ArrayBuffer as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl AudioContext {
    #[allow(bad_style)]
    #[doc = "The `decodeAudioData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData)\n\n*This API requires the following crate features to be activated: `AudioContext`*"]
    #[allow(clippy::all)]
    pub fn decode_audio_data_with_success_callback(
        &self,
        audio_data: &::js_sys::ArrayBuffer,
        success_callback: &::js_sys::Function,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_decode_audio_data_with_success_callback_AudioContext(
                self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                audio_data: <&::js_sys::ArrayBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                success_callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_decode_audio_data_with_success_callback_AudioContext(
            self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            audio_data: <&::js_sys::ArrayBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            success_callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(audio_data);
            drop(success_callback);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let audio_data =
                    <&::js_sys::ArrayBuffer as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        audio_data,
                    );
                let success_callback =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        success_callback,
                    );
                __widl_f_decode_audio_data_with_success_callback_AudioContext(
                    self_,
                    audio_data,
                    success_callback,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_decode_audio_data_with_success_callback_and_error_callback_AudioContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&AudioContext as WasmDescribe>::describe();
    <&::js_sys::ArrayBuffer as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl AudioContext {
    #[allow(bad_style)]
    #[doc = "The `decodeAudioData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData)\n\n*This API requires the following crate features to be activated: `AudioContext`*"]
    #[allow(clippy::all)]
    pub fn decode_audio_data_with_success_callback_and_error_callback(
        &self,
        audio_data: &::js_sys::ArrayBuffer,
        success_callback: &::js_sys::Function,
        error_callback: &::js_sys::Function,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_decode_audio_data_with_success_callback_and_error_callback_AudioContext(
                self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                audio_data: <&::js_sys::ArrayBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                success_callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                error_callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_decode_audio_data_with_success_callback_and_error_callback_AudioContext(
            self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            audio_data: <&::js_sys::ArrayBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            success_callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            error_callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(audio_data);
            drop(success_callback);
            drop(error_callback);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let audio_data =
                    <&::js_sys::ArrayBuffer as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        audio_data,
                    );
                let success_callback =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        success_callback,
                    );
                let error_callback =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        error_callback,
                    );
                __widl_f_decode_audio_data_with_success_callback_and_error_callback_AudioContext(
                    self_,
                    audio_data,
                    success_callback,
                    error_callback,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_resume_AudioContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioContext as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl AudioContext {
    #[allow(bad_style)]
    #[doc = "The `resume()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/resume)\n\n*This API requires the following crate features to be activated: `AudioContext`*"]
    #[allow(clippy::all)]
    pub fn resume(&self) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_resume_AudioContext(
                self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_resume_AudioContext(
            self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_resume_AudioContext(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_destination_AudioContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioContext as WasmDescribe>::describe();
    <AudioDestinationNode as WasmDescribe>::describe();
}
impl AudioContext {
    #[allow(bad_style)]
    #[doc = "The `destination` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/destination)\n\n*This API requires the following crate features to be activated: `AudioContext`, `AudioDestinationNode`*"]
    #[allow(clippy::all)]
    pub fn destination(&self) -> AudioDestinationNode {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_destination_AudioContext(
                self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <AudioDestinationNode as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_destination_AudioContext(
            self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <AudioDestinationNode as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_destination_AudioContext(self_)
            };
            <AudioDestinationNode as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_sample_rate_AudioContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioContext as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
}
impl AudioContext {
    #[allow(bad_style)]
    #[doc = "The `sampleRate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/sampleRate)\n\n*This API requires the following crate features to be activated: `AudioContext`*"]
    #[allow(clippy::all)]
    pub fn sample_rate(&self) -> f32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_sample_rate_AudioContext(
                self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_sample_rate_AudioContext(
            self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_sample_rate_AudioContext(self_)
            };
            <f32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_current_time_AudioContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioContext as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
}
impl AudioContext {
    #[allow(bad_style)]
    #[doc = "The `currentTime` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/currentTime)\n\n*This API requires the following crate features to be activated: `AudioContext`*"]
    #[allow(clippy::all)]
    pub fn current_time(&self) -> f64 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_current_time_AudioContext(
                self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_current_time_AudioContext(
            self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_current_time_AudioContext(self_)
            };
            <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onstatechange_AudioContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioContext as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl AudioContext {
    #[allow(bad_style)]
    #[doc = "The `onstatechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/onstatechange)\n\n*This API requires the following crate features to be activated: `AudioContext`*"]
    #[allow(clippy::all)]
    pub fn onstatechange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onstatechange_AudioContext(
                self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onstatechange_AudioContext(
            self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onstatechange_AudioContext(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onstatechange_AudioContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&AudioContext as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioContext {
    #[allow(bad_style)]
    #[doc = "The `onstatechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/onstatechange)\n\n*This API requires the following crate features to be activated: `AudioContext`*"]
    #[allow(clippy::all)]
    pub fn set_onstatechange(&self, onstatechange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onstatechange_AudioContext(
                self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onstatechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onstatechange_AudioContext(
            self_: <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onstatechange: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onstatechange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onstatechange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onstatechange,
                    );
                __widl_f_set_onstatechange_AudioContext(self_, onstatechange)
            };
            ()
        }
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `AudioDestinationNode` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode)\n\n*This API requires the following crate features to be activated: `AudioDestinationNode`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct AudioDestinationNode {
    obj: AudioNode,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_AudioDestinationNode: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for AudioDestinationNode {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for AudioDestinationNode {
        type Target = AudioNode;
        #[inline]
        fn deref(&self) -> &AudioNode {
            &self.obj
        }
    }
    impl IntoWasmAbi for AudioDestinationNode {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for AudioDestinationNode {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a AudioDestinationNode {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for AudioDestinationNode {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            AudioDestinationNode {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for AudioDestinationNode {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a AudioDestinationNode {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for AudioDestinationNode {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<AudioDestinationNode>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(AudioDestinationNode {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for AudioDestinationNode {
        #[inline]
        fn from(obj: JsValue) -> AudioDestinationNode {
            AudioDestinationNode { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for AudioDestinationNode {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<AudioDestinationNode> for AudioDestinationNode {
        #[inline]
        fn as_ref(&self) -> &AudioDestinationNode {
            self
        }
    }
    impl From<AudioDestinationNode> for JsValue {
        #[inline]
        fn from(obj: AudioDestinationNode) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for AudioDestinationNode {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_AudioDestinationNode(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_AudioDestinationNode(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_AudioDestinationNode(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            AudioDestinationNode { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const AudioDestinationNode) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<AudioDestinationNode> for AudioNode {
    #[inline]
    fn from(obj: AudioDestinationNode) -> AudioNode {
        use wasm_bindgen::JsCast;
        AudioNode::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<AudioNode> for AudioDestinationNode {
    #[inline]
    fn as_ref(&self) -> &AudioNode {
        use wasm_bindgen::JsCast;
        AudioNode::unchecked_from_js_ref(self.as_ref())
    }
}
#[allow(clippy::all)]
impl From<AudioDestinationNode> for Object {
    #[inline]
    fn from(obj: AudioDestinationNode) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for AudioDestinationNode {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_max_channel_count_AudioDestinationNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioDestinationNode as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl AudioDestinationNode {
    #[allow(bad_style)]
    #[doc = "The `maxChannelCount` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode/maxChannelCount)\n\n*This API requires the following crate features to be activated: `AudioDestinationNode`*"]
    #[allow(clippy::all)]
    pub fn max_channel_count(&self) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_max_channel_count_AudioDestinationNode(
                self_: <&AudioDestinationNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_max_channel_count_AudioDestinationNode(
            self_: <&AudioDestinationNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&AudioDestinationNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_max_channel_count_AudioDestinationNode(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `AudioNode` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode)\n\n*This API requires the following crate features to be activated: `AudioNode`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct AudioNode {
    obj: Object,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_AudioNode: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for AudioNode {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for AudioNode {
        type Target = Object;
        #[inline]
        fn deref(&self) -> &Object {
            &self.obj
        }
    }
    impl IntoWasmAbi for AudioNode {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for AudioNode {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a AudioNode {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for AudioNode {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            AudioNode {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for AudioNode {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a AudioNode {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for AudioNode {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<AudioNode>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(AudioNode {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for AudioNode {
        #[inline]
        fn from(obj: JsValue) -> AudioNode {
            AudioNode { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for AudioNode {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<AudioNode> for AudioNode {
        #[inline]
        fn as_ref(&self) -> &AudioNode {
            self
        }
    }
    impl From<AudioNode> for JsValue {
        #[inline]
        fn from(obj: AudioNode) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for AudioNode {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_AudioNode(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_AudioNode(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_AudioNode(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            AudioNode { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const AudioNode) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<AudioNode> for Object {
    #[inline]
    fn from(obj: AudioNode) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for AudioNode {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_connect_with_audio_node_AudioNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&AudioNode as WasmDescribe>::describe();
    <&AudioNode as WasmDescribe>::describe();
    <AudioNode as WasmDescribe>::describe();
}
impl AudioNode {
    #[allow(bad_style)]
    #[doc = "The `connect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect)\n\n*This API requires the following crate features to be activated: `AudioNode`*"]
    #[allow(clippy::all)]
    pub fn connect_with_audio_node(
        &self,
        destination: &AudioNode,
    ) -> Result<AudioNode, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_connect_with_audio_node_AudioNode(
                self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                destination: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <AudioNode as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_connect_with_audio_node_AudioNode(
            self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            destination: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <AudioNode as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(destination);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let destination =
                    <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(destination);
                __widl_f_connect_with_audio_node_AudioNode(self_, destination)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<AudioNode as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_connect_with_audio_node_and_output_AudioNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&AudioNode as WasmDescribe>::describe();
    <&AudioNode as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <AudioNode as WasmDescribe>::describe();
}
impl AudioNode {
    #[allow(bad_style)]
    #[doc = "The `connect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect)\n\n*This API requires the following crate features to be activated: `AudioNode`*"]
    #[allow(clippy::all)]
    pub fn connect_with_audio_node_and_output(
        &self,
        destination: &AudioNode,
        output: u32,
    ) -> Result<AudioNode, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_connect_with_audio_node_and_output_AudioNode(
                self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                destination: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                output: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <AudioNode as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_connect_with_audio_node_and_output_AudioNode(
            self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            destination: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            output: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <AudioNode as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(destination);
            drop(output);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let destination =
                    <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(destination);
                let output = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(output);
                __widl_f_connect_with_audio_node_and_output_AudioNode(self_, destination, output)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<AudioNode as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_connect_with_audio_node_and_output_and_input_AudioNode(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&AudioNode as WasmDescribe>::describe();
    <&AudioNode as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <AudioNode as WasmDescribe>::describe();
}
impl AudioNode {
    #[allow(bad_style)]
    #[doc = "The `connect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect)\n\n*This API requires the following crate features to be activated: `AudioNode`*"]
    #[allow(clippy::all)]
    pub fn connect_with_audio_node_and_output_and_input(
        &self,
        destination: &AudioNode,
        output: u32,
        input: u32,
    ) -> Result<AudioNode, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_connect_with_audio_node_and_output_and_input_AudioNode(
                self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                destination: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                output: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                input: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <AudioNode as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_connect_with_audio_node_and_output_and_input_AudioNode(
            self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            destination: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            output: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            input: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <AudioNode as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(destination);
            drop(output);
            drop(input);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let destination =
                    <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(destination);
                let output = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(output);
                let input = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(input);
                __widl_f_connect_with_audio_node_and_output_and_input_AudioNode(
                    self_,
                    destination,
                    output,
                    input,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<AudioNode as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_disconnect_AudioNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioNode as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioNode {
    #[allow(bad_style)]
    #[doc = "The `disconnect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect)\n\n*This API requires the following crate features to be activated: `AudioNode`*"]
    #[allow(clippy::all)]
    pub fn disconnect(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_disconnect_AudioNode(
                self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_disconnect_AudioNode(
            self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_disconnect_AudioNode(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_disconnect_with_output_AudioNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&AudioNode as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioNode {
    #[allow(bad_style)]
    #[doc = "The `disconnect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect)\n\n*This API requires the following crate features to be activated: `AudioNode`*"]
    #[allow(clippy::all)]
    pub fn disconnect_with_output(&self, output: u32) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_disconnect_with_output_AudioNode(
                self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                output: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_disconnect_with_output_AudioNode(
            self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            output: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(output);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let output = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(output);
                __widl_f_disconnect_with_output_AudioNode(self_, output)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_disconnect_with_audio_node_AudioNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&AudioNode as WasmDescribe>::describe();
    <&AudioNode as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioNode {
    #[allow(bad_style)]
    #[doc = "The `disconnect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect)\n\n*This API requires the following crate features to be activated: `AudioNode`*"]
    #[allow(clippy::all)]
    pub fn disconnect_with_audio_node(
        &self,
        destination: &AudioNode,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_disconnect_with_audio_node_AudioNode(
                self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                destination: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_disconnect_with_audio_node_AudioNode(
            self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            destination: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(destination);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let destination =
                    <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(destination);
                __widl_f_disconnect_with_audio_node_AudioNode(self_, destination)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_disconnect_with_audio_node_and_output_AudioNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&AudioNode as WasmDescribe>::describe();
    <&AudioNode as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioNode {
    #[allow(bad_style)]
    #[doc = "The `disconnect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect)\n\n*This API requires the following crate features to be activated: `AudioNode`*"]
    #[allow(clippy::all)]
    pub fn disconnect_with_audio_node_and_output(
        &self,
        destination: &AudioNode,
        output: u32,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_disconnect_with_audio_node_and_output_AudioNode(
                self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                destination: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                output: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_disconnect_with_audio_node_and_output_AudioNode(
            self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            destination: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            output: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(destination);
            drop(output);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let destination =
                    <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(destination);
                let output = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(output);
                __widl_f_disconnect_with_audio_node_and_output_AudioNode(self_, destination, output)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_disconnect_with_audio_node_and_output_and_input_AudioNode(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&AudioNode as WasmDescribe>::describe();
    <&AudioNode as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioNode {
    #[allow(bad_style)]
    #[doc = "The `disconnect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect)\n\n*This API requires the following crate features to be activated: `AudioNode`*"]
    #[allow(clippy::all)]
    pub fn disconnect_with_audio_node_and_output_and_input(
        &self,
        destination: &AudioNode,
        output: u32,
        input: u32,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_disconnect_with_audio_node_and_output_and_input_AudioNode(
                self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                destination: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                output: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                input: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_disconnect_with_audio_node_and_output_and_input_AudioNode(
            self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            destination: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            output: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            input: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(destination);
            drop(output);
            drop(input);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let destination =
                    <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(destination);
                let output = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(output);
                let input = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(input);
                __widl_f_disconnect_with_audio_node_and_output_and_input_AudioNode(
                    self_,
                    destination,
                    output,
                    input,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_number_of_inputs_AudioNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioNode as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl AudioNode {
    #[allow(bad_style)]
    #[doc = "The `numberOfInputs` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfInputs)\n\n*This API requires the following crate features to be activated: `AudioNode`*"]
    #[allow(clippy::all)]
    pub fn number_of_inputs(&self) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_number_of_inputs_AudioNode(
                self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_number_of_inputs_AudioNode(
            self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_number_of_inputs_AudioNode(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_number_of_outputs_AudioNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioNode as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl AudioNode {
    #[allow(bad_style)]
    #[doc = "The `numberOfOutputs` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfOutputs)\n\n*This API requires the following crate features to be activated: `AudioNode`*"]
    #[allow(clippy::all)]
    pub fn number_of_outputs(&self) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_number_of_outputs_AudioNode(
                self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_number_of_outputs_AudioNode(
            self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_number_of_outputs_AudioNode(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_channel_count_AudioNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&AudioNode as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl AudioNode {
    #[allow(bad_style)]
    #[doc = "The `channelCount` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCount)\n\n*This API requires the following crate features to be activated: `AudioNode`*"]
    #[allow(clippy::all)]
    pub fn channel_count(&self) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_channel_count_AudioNode(
                self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_channel_count_AudioNode(
            self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_channel_count_AudioNode(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_channel_count_AudioNode() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&AudioNode as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl AudioNode {
    #[allow(bad_style)]
    #[doc = "The `channelCount` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCount)\n\n*This API requires the following crate features to be activated: `AudioNode`*"]
    #[allow(clippy::all)]
    pub fn set_channel_count(&self, channel_count: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_channel_count_AudioNode(
                self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                channel_count: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_channel_count_AudioNode(
            self_: <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            channel_count: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(channel_count);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&AudioNode as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let channel_count =
                    <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(channel_count);
                __widl_f_set_channel_count_AudioNode(self_, channel_count)
            };
            ()
        }
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `Document` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document)\n\n*This API requires the following crate features to be activated: `Document`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct Document {
    obj: Node,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_Document: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for Document {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for Document {
        type Target = Node;
        #[inline]
        fn deref(&self) -> &Node {
            &self.obj
        }
    }
    impl IntoWasmAbi for Document {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for Document {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a Document {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for Document {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            Document {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for Document {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a Document {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for Document {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<Document>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(Document {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for Document {
        #[inline]
        fn from(obj: JsValue) -> Document {
            Document { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for Document {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<Document> for Document {
        #[inline]
        fn as_ref(&self) -> &Document {
            self
        }
    }
    impl From<Document> for JsValue {
        #[inline]
        fn from(obj: Document) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for Document {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_Document(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_Document(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_Document(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            Document { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const Document) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<Document> for Node {
    #[inline]
    fn from(obj: Document) -> Node {
        use wasm_bindgen::JsCast;
        Node::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Node> for Document {
    #[inline]
    fn as_ref(&self) -> &Node {
        use wasm_bindgen::JsCast;
        Node::unchecked_from_js_ref(self.as_ref())
    }
}
#[allow(clippy::all)]
impl From<Document> for Object {
    #[inline]
    fn from(obj: Document) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for Document {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_new_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(0u32);
    <Document as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `new Document(..)` constructor, creating a new instance of `Document`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/Document)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn new() -> Result<Document, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_new_Document() -> <Document as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_new_Document() -> <Document as wasm_bindgen::convert::FromWasmAbi>::Abi {
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = { __widl_f_new_Document() };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Document as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_adopt_node_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <Node as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `adoptNode()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptNode)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn adopt_node(&self, node: &Node) -> Result<Node, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_adopt_node_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_adopt_node_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(node);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let node = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                __widl_f_adopt_node_Document(self_, node)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_element_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Element as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `createElement()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*"]
    #[allow(clippy::all)]
    pub fn create_element(&self, local_name: &str) -> Result<Element, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_element_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                local_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Element as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_element_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            local_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Element as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(local_name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let local_name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(local_name);
                __widl_f_create_element_Document(self_, local_name)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Element as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_element_with_str_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Element as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `createElement()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*"]
    #[allow(clippy::all)]
    pub fn create_element_with_str(
        &self,
        local_name: &str,
        options: &str,
    ) -> Result<Element, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_element_with_str_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                local_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                options: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Element as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_element_with_str_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            local_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            options: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Element as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(local_name);
            drop(options);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let local_name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(local_name);
                let options = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(options);
                __widl_f_create_element_with_str_Document(self_, local_name, options)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Element as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_element_ns_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Document as WasmDescribe>::describe();
    <Option<&str> as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Element as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `createElementNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*"]
    #[allow(clippy::all)]
    pub fn create_element_ns(
        &self,
        namespace: Option<&str>,
        qualified_name: &str,
    ) -> Result<Element, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_element_ns_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                qualified_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Element as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_element_ns_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            qualified_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Element as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(namespace);
            drop(qualified_name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let namespace =
                    <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(namespace);
                let qualified_name =
                    <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(qualified_name);
                __widl_f_create_element_ns_Document(self_, namespace, qualified_name)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Element as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_element_ns_with_str_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Document as WasmDescribe>::describe();
    <Option<&str> as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Element as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `createElementNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*"]
    #[allow(clippy::all)]
    pub fn create_element_ns_with_str(
        &self,
        namespace: Option<&str>,
        qualified_name: &str,
        options: &str,
    ) -> Result<Element, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_element_ns_with_str_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                qualified_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                options: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Element as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_element_ns_with_str_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            qualified_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            options: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Element as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(namespace);
            drop(qualified_name);
            drop(options);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let namespace =
                    <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(namespace);
                let qualified_name =
                    <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(qualified_name);
                let options = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(options);
                __widl_f_create_element_ns_with_str_Document(
                    self_,
                    namespace,
                    qualified_name,
                    options,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Element as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_enable_style_sheets_for_set_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&str> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `enableStyleSheetsForSet()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/enableStyleSheetsForSet)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn enable_style_sheets_for_set(&self, name: Option<&str>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_enable_style_sheets_for_set_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_enable_style_sheets_for_set_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let name = <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                __widl_f_enable_style_sheets_for_set_Document(self_, name)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_exit_fullscreen_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `exitFullscreen()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn exit_fullscreen(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_exit_fullscreen_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_exit_fullscreen_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_exit_fullscreen_Document(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_exit_pointer_lock_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `exitPointerLock()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/exitPointerLock)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn exit_pointer_lock(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_exit_pointer_lock_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_exit_pointer_lock_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_exit_pointer_lock_Document(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_animations_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <::js_sys::Array as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `getAnimations()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getAnimations)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn get_animations(&self) -> ::js_sys::Array {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_animations_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_animations_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_get_animations_Document(self_)
            };
            <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_element_by_id_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `getElementById()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*"]
    #[allow(clippy::all)]
    pub fn get_element_by_id(&self, element_id: &str) -> Option<Element> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_element_by_id_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                element_id: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_element_by_id_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            element_id: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(element_id);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let element_id = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(element_id);
                __widl_f_get_element_by_id_Document(self_, element_id)
            };
            <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_has_focus_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `hasFocus()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/hasFocus)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn has_focus(&self) -> Result<bool, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_has_focus_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_has_focus_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_has_focus_Document(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_import_node_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <Node as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `importNode()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn import_node(&self, node: &Node) -> Result<Node, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_import_node_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_import_node_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(node);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let node = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                __widl_f_import_node_Document(self_, node)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_import_node_with_deep_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <Node as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `importNode()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn import_node_with_deep(
        &self,
        node: &Node,
        deep: bool,
    ) -> Result<Node, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_import_node_with_deep_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                deep: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_import_node_with_deep_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            deep: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(node);
            drop(deep);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let node = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                let deep = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(deep);
                __widl_f_import_node_with_deep_Document(self_, node, deep)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_query_selector_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `querySelector()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*"]
    #[allow(clippy::all)]
    pub fn query_selector(
        &self,
        selectors: &str,
    ) -> Result<Option<Element>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_query_selector_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                selectors: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_query_selector_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            selectors: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(selectors);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let selectors = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(selectors);
                __widl_f_query_selector_Document(self_, selectors)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_release_capture_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `releaseCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/releaseCapture)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn release_capture(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_release_capture_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_release_capture_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_release_capture_Document(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_url_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `URL` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/URL)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn url(&self) -> Result<String, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_url_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_url_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_url_Document(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_document_uri_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `documentURI` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURI)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn document_uri(&self) -> Result<String, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_document_uri_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_document_uri_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_document_uri_Document(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_compat_mode_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `compatMode` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn compat_mode(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_compat_mode_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_compat_mode_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_compat_mode_Document(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_character_set_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `characterSet` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn character_set(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_character_set_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_character_set_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_character_set_Document(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_charset_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `charset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/charset)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn charset(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_charset_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_charset_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_charset_Document(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_input_encoding_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `inputEncoding` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/inputEncoding)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn input_encoding(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_input_encoding_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_input_encoding_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_input_encoding_Document(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_content_type_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `contentType` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/contentType)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn content_type(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_content_type_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_content_type_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_content_type_Document(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_document_element_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `documentElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*"]
    #[allow(clippy::all)]
    pub fn document_element(&self) -> Option<Element> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_document_element_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_document_element_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_document_element_Document(self_)
            };
            <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_referrer_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `referrer` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn referrer(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_referrer_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_referrer_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_referrer_Document(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_last_modified_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `lastModified` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastModified)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn last_modified(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_last_modified_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_last_modified_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_last_modified_Document(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ready_state_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `readyState` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ready_state(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ready_state_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ready_state_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ready_state_Document(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_title_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `title` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/title)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn title(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_title_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_title_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_title_Document(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_title_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `title` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/title)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_title(&self, title: &str) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_title_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                title: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_title_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            title: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(title);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let title = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(title);
                __widl_f_set_title_Document(self_, title)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_dir_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `dir` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/dir)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn dir(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_dir_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_dir_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_dir_Document(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_dir_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `dir` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/dir)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_dir(&self, dir: &str) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_dir_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                dir: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_dir_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            dir: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(dir);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let dir = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(dir);
                __widl_f_set_dir_Document(self_, dir)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_default_view_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<Window> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `defaultView` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView)\n\n*This API requires the following crate features to be activated: `Document`, `Window`*"]
    #[allow(clippy::all)]
    pub fn default_view(&self) -> Option<Window> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_default_view_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_default_view_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_default_view_Document(self_)
            };
            <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onreadystatechange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onreadystatechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreadystatechange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onreadystatechange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onreadystatechange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onreadystatechange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onreadystatechange_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onreadystatechange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onreadystatechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreadystatechange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onreadystatechange(&self, onreadystatechange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onreadystatechange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onreadystatechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onreadystatechange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onreadystatechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onreadystatechange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onreadystatechange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onreadystatechange,
                    );
                __widl_f_set_onreadystatechange_Document(self_, onreadystatechange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onbeforescriptexecute_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onbeforescriptexecute` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onbeforescriptexecute(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onbeforescriptexecute_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onbeforescriptexecute_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onbeforescriptexecute_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onbeforescriptexecute_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onbeforescriptexecute` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onbeforescriptexecute(&self, onbeforescriptexecute: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onbeforescriptexecute_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onbeforescriptexecute : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onbeforescriptexecute_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onbeforescriptexecute : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onbeforescriptexecute);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onbeforescriptexecute =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onbeforescriptexecute,
                    );
                __widl_f_set_onbeforescriptexecute_Document(self_, onbeforescriptexecute)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onafterscriptexecute_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onafterscriptexecute` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onafterscriptexecute(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onafterscriptexecute_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onafterscriptexecute_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onafterscriptexecute_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onafterscriptexecute_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onafterscriptexecute` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onafterscriptexecute(&self, onafterscriptexecute: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onafterscriptexecute_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onafterscriptexecute : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onafterscriptexecute_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onafterscriptexecute : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onafterscriptexecute);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onafterscriptexecute =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onafterscriptexecute,
                    );
                __widl_f_set_onafterscriptexecute_Document(self_, onafterscriptexecute)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onselectionchange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onselectionchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectionchange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onselectionchange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onselectionchange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onselectionchange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onselectionchange_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onselectionchange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onselectionchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectionchange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onselectionchange(&self, onselectionchange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onselectionchange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onselectionchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onselectionchange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onselectionchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onselectionchange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onselectionchange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onselectionchange,
                    );
                __widl_f_set_onselectionchange_Document(self_, onselectionchange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_current_script_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `currentScript` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*"]
    #[allow(clippy::all)]
    pub fn current_script(&self) -> Option<Element> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_current_script_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_current_script_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_current_script_Document(self_)
            };
            <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_fullscreen_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `fullscreen` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreen)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn fullscreen(&self) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_fullscreen_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_fullscreen_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_fullscreen_Document(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_fullscreen_enabled_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `fullscreenEnabled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenEnabled)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn fullscreen_enabled(&self) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_fullscreen_enabled_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_fullscreen_enabled_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_fullscreen_enabled_Document(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onfullscreenchange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onfullscreenchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onfullscreenchange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onfullscreenchange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onfullscreenchange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onfullscreenchange_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onfullscreenchange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onfullscreenchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onfullscreenchange(&self, onfullscreenchange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onfullscreenchange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onfullscreenchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onfullscreenchange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onfullscreenchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onfullscreenchange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onfullscreenchange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onfullscreenchange,
                    );
                __widl_f_set_onfullscreenchange_Document(self_, onfullscreenchange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onfullscreenerror_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onfullscreenerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onfullscreenerror(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onfullscreenerror_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onfullscreenerror_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onfullscreenerror_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onfullscreenerror_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onfullscreenerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onfullscreenerror(&self, onfullscreenerror: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onfullscreenerror_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onfullscreenerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onfullscreenerror_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onfullscreenerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onfullscreenerror);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onfullscreenerror =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onfullscreenerror,
                    );
                __widl_f_set_onfullscreenerror_Document(self_, onfullscreenerror)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerlockchange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerlockchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockchange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onpointerlockchange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerlockchange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerlockchange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerlockchange_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerlockchange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerlockchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockchange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerlockchange(&self, onpointerlockchange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerlockchange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerlockchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerlockchange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerlockchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onpointerlockchange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerlockchange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerlockchange,
                    );
                __widl_f_set_onpointerlockchange_Document(self_, onpointerlockchange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerlockerror_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerlockerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockerror)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onpointerlockerror(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerlockerror_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerlockerror_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerlockerror_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerlockerror_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerlockerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockerror)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerlockerror(&self, onpointerlockerror: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerlockerror_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerlockerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerlockerror_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerlockerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onpointerlockerror);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerlockerror =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerlockerror,
                    );
                __widl_f_set_onpointerlockerror_Document(self_, onpointerlockerror)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_hidden_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `hidden` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/hidden)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn hidden(&self) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_hidden_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_hidden_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_hidden_Document(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onvisibilitychange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onvisibilitychange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvisibilitychange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onvisibilitychange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onvisibilitychange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onvisibilitychange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onvisibilitychange_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onvisibilitychange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onvisibilitychange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvisibilitychange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onvisibilitychange(&self, onvisibilitychange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onvisibilitychange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onvisibilitychange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onvisibilitychange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onvisibilitychange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onvisibilitychange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onvisibilitychange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onvisibilitychange,
                    );
                __widl_f_set_onvisibilitychange_Document(self_, onvisibilitychange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_selected_style_sheet_set_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `selectedStyleSheetSet` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn selected_style_sheet_set(&self) -> Option<String> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_selected_style_sheet_set_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_selected_style_sheet_set_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_selected_style_sheet_set_Document(self_)
            };
            <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_selected_style_sheet_set_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&str> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `selectedStyleSheetSet` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_selected_style_sheet_set(&self, selected_style_sheet_set: Option<&str>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_selected_style_sheet_set_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                selected_style_sheet_set: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_selected_style_sheet_set_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            selected_style_sheet_set: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(selected_style_sheet_set);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let selected_style_sheet_set =
                    <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        selected_style_sheet_set,
                    );
                __widl_f_set_selected_style_sheet_set_Document(self_, selected_style_sheet_set)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_last_style_sheet_set_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `lastStyleSheetSet` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastStyleSheetSet)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn last_style_sheet_set(&self) -> Option<String> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_last_style_sheet_set_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_last_style_sheet_set_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_last_style_sheet_set_Document(self_)
            };
            <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_preferred_style_sheet_set_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `preferredStyleSheetSet` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/preferredStyleSheetSet)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn preferred_style_sheet_set(&self) -> Option<String> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_preferred_style_sheet_set_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_preferred_style_sheet_set_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_preferred_style_sheet_set_Document(self_)
            };
            <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scrolling_element_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `scrollingElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollingElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*"]
    #[allow(clippy::all)]
    pub fn scrolling_element(&self) -> Option<Element> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scrolling_element_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scrolling_element_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scrolling_element_Document(self_)
            };
            <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oncopy_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `oncopy` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncopy)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn oncopy(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oncopy_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oncopy_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oncopy_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oncopy_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `oncopy` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncopy)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_oncopy(&self, oncopy: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oncopy_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oncopy: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oncopy_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oncopy: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(oncopy);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oncopy =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oncopy,
                    );
                __widl_f_set_oncopy_Document(self_, oncopy)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oncut_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `oncut` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncut)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn oncut(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oncut_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oncut_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oncut_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oncut_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `oncut` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncut)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_oncut(&self, oncut: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oncut_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oncut: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oncut_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oncut: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(oncut);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oncut =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oncut,
                    );
                __widl_f_set_oncut_Document(self_, oncut)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpaste_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpaste` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpaste)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onpaste(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpaste_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpaste_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpaste_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpaste_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpaste` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpaste)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onpaste(&self, onpaste: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpaste_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpaste: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpaste_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpaste: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpaste);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpaste =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpaste,
                    );
                __widl_f_set_onpaste_Document(self_, onpaste)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_element_from_point_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Document as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `elementFromPoint()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*"]
    #[allow(clippy::all)]
    pub fn element_from_point(&self, x: f32, y: f32) -> Option<Element> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_element_from_point_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_element_from_point_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_element_from_point_Document(self_, x, y)
            };
            <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_elements_from_point_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Document as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <::js_sys::Array as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `elementsFromPoint()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn elements_from_point(&self, x: f32, y: f32) -> ::js_sys::Array {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_elements_from_point_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_elements_from_point_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_elements_from_point_Document(self_, x, y)
            };
            <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_active_element_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `activeElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*"]
    #[allow(clippy::all)]
    pub fn active_element(&self) -> Option<Element> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_active_element_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_active_element_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_active_element_Document(self_)
            };
            <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_pointer_lock_element_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `pointerLockElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerLockElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*"]
    #[allow(clippy::all)]
    pub fn pointer_lock_element(&self) -> Option<Element> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_pointer_lock_element_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_pointer_lock_element_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_pointer_lock_element_Document(self_)
            };
            <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_fullscreen_element_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `fullscreenElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*"]
    #[allow(clippy::all)]
    pub fn fullscreen_element(&self) -> Option<Element> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_fullscreen_element_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_fullscreen_element_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_fullscreen_element_Document(self_)
            };
            <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_box_quads_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <::js_sys::Array as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `getBoxQuads()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getBoxQuads)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn get_box_quads(&self) -> Result<::js_sys::Array, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_box_quads_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_box_quads_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_get_box_quads_Document(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onabort_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onabort` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onabort)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onabort(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onabort_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onabort_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onabort_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onabort_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onabort` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onabort)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onabort(&self, onabort: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onabort_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onabort: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onabort_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onabort: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onabort);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onabort =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onabort,
                    );
                __widl_f_set_onabort_Document(self_, onabort)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onblur_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onblur` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onblur)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onblur(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onblur_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onblur_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onblur_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onblur_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onblur` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onblur)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onblur(&self, onblur: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onblur_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onblur: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onblur_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onblur: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onblur);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onblur =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onblur,
                    );
                __widl_f_set_onblur_Document(self_, onblur)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onfocus_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onfocus` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfocus)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onfocus(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onfocus_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onfocus_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onfocus_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onfocus_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onfocus` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfocus)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onfocus(&self, onfocus: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onfocus_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onfocus: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onfocus_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onfocus: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onfocus);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onfocus =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onfocus,
                    );
                __widl_f_set_onfocus_Document(self_, onfocus)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onauxclick_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onauxclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onauxclick)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onauxclick(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onauxclick_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onauxclick_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onauxclick_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onauxclick_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onauxclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onauxclick)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onauxclick(&self, onauxclick: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onauxclick_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onauxclick : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onauxclick_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onauxclick: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onauxclick);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onauxclick =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onauxclick,
                    );
                __widl_f_set_onauxclick_Document(self_, onauxclick)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oncanplay_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `oncanplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplay)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn oncanplay(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oncanplay_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oncanplay_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oncanplay_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oncanplay_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `oncanplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplay)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_oncanplay(&self, oncanplay: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oncanplay_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oncanplay: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oncanplay_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oncanplay: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(oncanplay);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oncanplay =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oncanplay,
                    );
                __widl_f_set_oncanplay_Document(self_, oncanplay)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oncanplaythrough_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `oncanplaythrough` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn oncanplaythrough(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oncanplaythrough_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oncanplaythrough_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oncanplaythrough_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oncanplaythrough_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `oncanplaythrough` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_oncanplaythrough(&self, oncanplaythrough: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oncanplaythrough_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oncanplaythrough : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oncanplaythrough_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oncanplaythrough : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(oncanplaythrough);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oncanplaythrough =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oncanplaythrough,
                    );
                __widl_f_set_oncanplaythrough_Document(self_, oncanplaythrough)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onchange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onchange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onchange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onchange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onchange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onchange_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onchange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onchange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onchange(&self, onchange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onchange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onchange: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onchange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onchange: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onchange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onchange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onchange,
                    );
                __widl_f_set_onchange_Document(self_, onchange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onclick_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclick)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onclick(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onclick_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onclick_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onclick_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onclick_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclick)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onclick(&self, onclick: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onclick_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onclick: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onclick_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onclick: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onclick);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onclick =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onclick,
                    );
                __widl_f_set_onclick_Document(self_, onclick)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onclose_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onclose` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclose)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onclose(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onclose_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onclose_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onclose_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onclose_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onclose` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclose)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onclose(&self, onclose: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onclose_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onclose: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onclose_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onclose: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onclose);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onclose =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onclose,
                    );
                __widl_f_set_onclose_Document(self_, onclose)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oncontextmenu_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `oncontextmenu` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn oncontextmenu(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oncontextmenu_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oncontextmenu_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oncontextmenu_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oncontextmenu_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `oncontextmenu` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_oncontextmenu(&self, oncontextmenu: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oncontextmenu_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oncontextmenu : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oncontextmenu_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oncontextmenu: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(oncontextmenu);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oncontextmenu =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oncontextmenu,
                    );
                __widl_f_set_oncontextmenu_Document(self_, oncontextmenu)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondblclick_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondblclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondblclick)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ondblclick(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondblclick_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondblclick_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondblclick_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondblclick_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondblclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondblclick)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ondblclick(&self, ondblclick: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondblclick_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondblclick : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondblclick_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondblclick: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondblclick);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondblclick =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondblclick,
                    );
                __widl_f_set_ondblclick_Document(self_, ondblclick)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondrag_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondrag` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrag)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ondrag(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondrag_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondrag_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondrag_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondrag_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondrag` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrag)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ondrag(&self, ondrag: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondrag_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondrag: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondrag_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondrag: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondrag);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondrag =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondrag,
                    );
                __widl_f_set_ondrag_Document(self_, ondrag)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondragend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ondragend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragend_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondragend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ondragend(&self, ondragend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragend,
                    );
                __widl_f_set_ondragend_Document(self_, ondragend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragenter_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondragenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragenter)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ondragenter(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragenter_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragenter_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragenter_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragenter_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondragenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragenter)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ondragenter(&self, ondragenter: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragenter_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragenter_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragenter: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragenter);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragenter =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragenter,
                    );
                __widl_f_set_ondragenter_Document(self_, ondragenter)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragexit_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondragexit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragexit)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ondragexit(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragexit_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragexit_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragexit_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragexit_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondragexit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragexit)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ondragexit(&self, ondragexit: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragexit_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragexit : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragexit_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragexit: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragexit);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragexit =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragexit,
                    );
                __widl_f_set_ondragexit_Document(self_, ondragexit)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragleave_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondragleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragleave)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ondragleave(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragleave_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragleave_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragleave_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragleave_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondragleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragleave)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ondragleave(&self, ondragleave: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragleave_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragleave_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragleave: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragleave);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragleave =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragleave,
                    );
                __widl_f_set_ondragleave_Document(self_, ondragleave)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragover_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondragover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragover)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ondragover(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragover_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragover_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragover_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragover_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondragover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragover)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ondragover(&self, ondragover: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragover_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragover : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragover_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragover: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragover);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragover =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragover,
                    );
                __widl_f_set_ondragover_Document(self_, ondragover)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragstart_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondragstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragstart)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ondragstart(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragstart_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragstart_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragstart_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragstart_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondragstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragstart)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ondragstart(&self, ondragstart: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragstart_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragstart_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragstart: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragstart,
                    );
                __widl_f_set_ondragstart_Document(self_, ondragstart)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondrop_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondrop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrop)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ondrop(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondrop_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondrop_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondrop_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondrop_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondrop` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrop)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ondrop(&self, ondrop: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondrop_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondrop: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondrop_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondrop: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondrop);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondrop =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondrop,
                    );
                __widl_f_set_ondrop_Document(self_, ondrop)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondurationchange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondurationchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondurationchange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ondurationchange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondurationchange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondurationchange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondurationchange_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondurationchange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ondurationchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondurationchange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ondurationchange(&self, ondurationchange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondurationchange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondurationchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondurationchange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondurationchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ondurationchange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondurationchange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondurationchange,
                    );
                __widl_f_set_ondurationchange_Document(self_, ondurationchange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onemptied_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onemptied` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onemptied)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onemptied(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onemptied_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onemptied_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onemptied_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onemptied_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onemptied` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onemptied)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onemptied(&self, onemptied: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onemptied_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onemptied: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onemptied_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onemptied: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onemptied);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onemptied =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onemptied,
                    );
                __widl_f_set_onemptied_Document(self_, onemptied)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onended_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onended` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onended)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onended(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onended_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onended_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onended_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onended_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onended` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onended)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onended(&self, onended: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onended_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onended: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onended_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onended: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onended);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onended =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onended,
                    );
                __widl_f_set_onended_Document(self_, onended)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oninput_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `oninput` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninput)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn oninput(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oninput_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oninput_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oninput_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oninput_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `oninput` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninput)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_oninput(&self, oninput: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oninput_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oninput: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oninput_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oninput: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(oninput);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oninput =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oninput,
                    );
                __widl_f_set_oninput_Document(self_, oninput)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oninvalid_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `oninvalid` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninvalid)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn oninvalid(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oninvalid_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oninvalid_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oninvalid_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oninvalid_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `oninvalid` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninvalid)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_oninvalid(&self, oninvalid: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oninvalid_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oninvalid: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oninvalid_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oninvalid: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(oninvalid);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oninvalid =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oninvalid,
                    );
                __widl_f_set_oninvalid_Document(self_, oninvalid)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onkeydown_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onkeydown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeydown)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onkeydown(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onkeydown_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onkeydown_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onkeydown_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onkeydown_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onkeydown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeydown)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onkeydown(&self, onkeydown: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onkeydown_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onkeydown: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onkeydown_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onkeydown: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onkeydown);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onkeydown =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onkeydown,
                    );
                __widl_f_set_onkeydown_Document(self_, onkeydown)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onkeypress_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onkeypress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeypress)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onkeypress(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onkeypress_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onkeypress_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onkeypress_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onkeypress_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onkeypress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeypress)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onkeypress(&self, onkeypress: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onkeypress_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onkeypress : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onkeypress_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onkeypress: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onkeypress);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onkeypress =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onkeypress,
                    );
                __widl_f_set_onkeypress_Document(self_, onkeypress)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onkeyup_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onkeyup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeyup)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onkeyup(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onkeyup_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onkeyup_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onkeyup_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onkeyup_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onkeyup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeyup)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onkeyup(&self, onkeyup: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onkeyup_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onkeyup: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onkeyup_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onkeyup: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onkeyup);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onkeyup =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onkeyup,
                    );
                __widl_f_set_onkeyup_Document(self_, onkeyup)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onload_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onload)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onload(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onload_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onload_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onload_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onload_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onload)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onload(&self, onload: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onload_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onload: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onload_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onload: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onload);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onload =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onload,
                    );
                __widl_f_set_onload_Document(self_, onload)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onloadeddata_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onloadeddata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadeddata)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onloadeddata(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onloadeddata_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onloadeddata_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onloadeddata_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onloadeddata_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onloadeddata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadeddata)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onloadeddata(&self, onloadeddata: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onloadeddata_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onloadeddata : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onloadeddata_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onloadeddata: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onloadeddata);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onloadeddata =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onloadeddata,
                    );
                __widl_f_set_onloadeddata_Document(self_, onloadeddata)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onloadedmetadata_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onloadedmetadata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onloadedmetadata(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onloadedmetadata_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onloadedmetadata_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onloadedmetadata_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onloadedmetadata_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onloadedmetadata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onloadedmetadata(&self, onloadedmetadata: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onloadedmetadata_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onloadedmetadata : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onloadedmetadata_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onloadedmetadata : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onloadedmetadata);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onloadedmetadata =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onloadedmetadata,
                    );
                __widl_f_set_onloadedmetadata_Document(self_, onloadedmetadata)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onloadend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onloadend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onloadend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onloadend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onloadend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onloadend_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onloadend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onloadend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onloadend(&self, onloadend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onloadend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onloadend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onloadend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onloadend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onloadend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onloadend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onloadend,
                    );
                __widl_f_set_onloadend_Document(self_, onloadend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onloadstart_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onloadstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadstart)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onloadstart(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onloadstart_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onloadstart_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onloadstart_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onloadstart_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onloadstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadstart)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onloadstart(&self, onloadstart: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onloadstart_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onloadstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onloadstart_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onloadstart: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onloadstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onloadstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onloadstart,
                    );
                __widl_f_set_onloadstart_Document(self_, onloadstart)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmousedown_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onmousedown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousedown)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onmousedown(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmousedown_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmousedown_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmousedown_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmousedown_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onmousedown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousedown)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onmousedown(&self, onmousedown: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmousedown_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmousedown : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmousedown_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmousedown: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmousedown);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmousedown =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmousedown,
                    );
                __widl_f_set_onmousedown_Document(self_, onmousedown)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmouseenter_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onmouseenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseenter)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onmouseenter(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmouseenter_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmouseenter_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmouseenter_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseenter_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onmouseenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseenter)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onmouseenter(&self, onmouseenter: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmouseenter_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmouseenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmouseenter_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmouseenter: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmouseenter);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmouseenter =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmouseenter,
                    );
                __widl_f_set_onmouseenter_Document(self_, onmouseenter)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmouseleave_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onmouseleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseleave)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onmouseleave(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmouseleave_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmouseleave_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmouseleave_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseleave_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onmouseleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseleave)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onmouseleave(&self, onmouseleave: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmouseleave_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmouseleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmouseleave_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmouseleave: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmouseleave);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmouseleave =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmouseleave,
                    );
                __widl_f_set_onmouseleave_Document(self_, onmouseleave)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmousemove_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onmousemove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousemove)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onmousemove(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmousemove_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmousemove_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmousemove_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmousemove_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onmousemove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousemove)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onmousemove(&self, onmousemove: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmousemove_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmousemove : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmousemove_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmousemove: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmousemove);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmousemove =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmousemove,
                    );
                __widl_f_set_onmousemove_Document(self_, onmousemove)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmouseout_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onmouseout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseout)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onmouseout(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmouseout_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmouseout_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmouseout_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseout_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onmouseout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseout)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onmouseout(&self, onmouseout: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmouseout_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmouseout : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmouseout_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmouseout: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmouseout);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmouseout =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmouseout,
                    );
                __widl_f_set_onmouseout_Document(self_, onmouseout)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmouseover_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onmouseover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseover)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onmouseover(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmouseover_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmouseover_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmouseover_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseover_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onmouseover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseover)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onmouseover(&self, onmouseover: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmouseover_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmouseover : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmouseover_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmouseover: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmouseover);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmouseover =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmouseover,
                    );
                __widl_f_set_onmouseover_Document(self_, onmouseover)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmouseup_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onmouseup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseup)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onmouseup(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmouseup_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmouseup_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmouseup_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseup_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onmouseup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseup)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onmouseup(&self, onmouseup: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmouseup_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmouseup: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmouseup_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmouseup: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmouseup);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmouseup =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmouseup,
                    );
                __widl_f_set_onmouseup_Document(self_, onmouseup)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwheel_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onwheel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwheel)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onwheel(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwheel_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwheel_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwheel_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwheel_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onwheel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwheel)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onwheel(&self, onwheel: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwheel_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwheel: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwheel_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwheel: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onwheel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwheel =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwheel,
                    );
                __widl_f_set_onwheel_Document(self_, onwheel)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpause_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpause` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpause)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onpause(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpause_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpause_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpause_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpause_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpause` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpause)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onpause(&self, onpause: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpause_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpause: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpause_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpause: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpause);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpause =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpause,
                    );
                __widl_f_set_onpause_Document(self_, onpause)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onplay_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplay)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onplay(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onplay_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onplay_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onplay_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onplay_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplay)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onplay(&self, onplay: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onplay_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onplay: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onplay_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onplay: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onplay);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onplay =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onplay,
                    );
                __widl_f_set_onplay_Document(self_, onplay)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onplaying_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onplaying` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplaying)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onplaying(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onplaying_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onplaying_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onplaying_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onplaying_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onplaying` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplaying)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onplaying(&self, onplaying: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onplaying_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onplaying: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onplaying_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onplaying: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onplaying);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onplaying =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onplaying,
                    );
                __widl_f_set_onplaying_Document(self_, onplaying)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onprogress_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onprogress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onprogress)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onprogress(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onprogress_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onprogress_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onprogress_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onprogress_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onprogress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onprogress)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onprogress(&self, onprogress: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onprogress_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onprogress : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onprogress_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onprogress: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onprogress);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onprogress =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onprogress,
                    );
                __widl_f_set_onprogress_Document(self_, onprogress)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onratechange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onratechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onratechange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onratechange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onratechange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onratechange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onratechange_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onratechange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onratechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onratechange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onratechange(&self, onratechange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onratechange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onratechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onratechange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onratechange: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onratechange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onratechange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onratechange,
                    );
                __widl_f_set_onratechange_Document(self_, onratechange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onreset_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onreset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreset)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onreset(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onreset_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onreset_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onreset_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onreset_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onreset` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreset)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onreset(&self, onreset: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onreset_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onreset: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onreset_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onreset: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onreset);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onreset =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onreset,
                    );
                __widl_f_set_onreset_Document(self_, onreset)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onresize_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onresize` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onresize)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onresize(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onresize_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onresize_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onresize_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onresize_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onresize` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onresize)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onresize(&self, onresize: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onresize_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onresize: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onresize_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onresize: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onresize);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onresize =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onresize,
                    );
                __widl_f_set_onresize_Document(self_, onresize)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onscroll_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onscroll` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onscroll)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onscroll(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onscroll_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onscroll_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onscroll_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onscroll_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onscroll` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onscroll)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onscroll(&self, onscroll: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onscroll_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onscroll: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onscroll_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onscroll: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onscroll);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onscroll =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onscroll,
                    );
                __widl_f_set_onscroll_Document(self_, onscroll)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onseeked_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onseeked` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeked)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onseeked(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onseeked_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onseeked_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onseeked_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onseeked_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onseeked` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeked)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onseeked(&self, onseeked: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onseeked_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onseeked: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onseeked_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onseeked: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onseeked);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onseeked =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onseeked,
                    );
                __widl_f_set_onseeked_Document(self_, onseeked)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onseeking_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onseeking` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeking)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onseeking(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onseeking_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onseeking_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onseeking_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onseeking_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onseeking` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeking)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onseeking(&self, onseeking: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onseeking_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onseeking: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onseeking_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onseeking: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onseeking);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onseeking =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onseeking,
                    );
                __widl_f_set_onseeking_Document(self_, onseeking)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onselect_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onselect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselect)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onselect(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onselect_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onselect_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onselect_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onselect_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onselect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselect)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onselect(&self, onselect: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onselect_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onselect: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onselect_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onselect: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onselect);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onselect =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onselect,
                    );
                __widl_f_set_onselect_Document(self_, onselect)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onshow_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onshow` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onshow)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onshow(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onshow_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onshow_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onshow_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onshow_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onshow` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onshow)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onshow(&self, onshow: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onshow_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onshow: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onshow_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onshow: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onshow);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onshow =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onshow,
                    );
                __widl_f_set_onshow_Document(self_, onshow)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onstalled_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onstalled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onstalled)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onstalled(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onstalled_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onstalled_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onstalled_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onstalled_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onstalled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onstalled)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onstalled(&self, onstalled: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onstalled_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onstalled: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onstalled_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onstalled: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onstalled);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onstalled =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onstalled,
                    );
                __widl_f_set_onstalled_Document(self_, onstalled)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onsubmit_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onsubmit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsubmit)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onsubmit(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onsubmit_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onsubmit_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onsubmit_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onsubmit_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onsubmit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsubmit)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onsubmit(&self, onsubmit: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onsubmit_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onsubmit: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onsubmit_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onsubmit: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onsubmit);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onsubmit =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onsubmit,
                    );
                __widl_f_set_onsubmit_Document(self_, onsubmit)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onsuspend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onsuspend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsuspend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onsuspend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onsuspend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onsuspend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onsuspend_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onsuspend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onsuspend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsuspend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onsuspend(&self, onsuspend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onsuspend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onsuspend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onsuspend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onsuspend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onsuspend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onsuspend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onsuspend,
                    );
                __widl_f_set_onsuspend_Document(self_, onsuspend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontimeupdate_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontimeupdate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ontimeupdate(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontimeupdate_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontimeupdate_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontimeupdate_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontimeupdate_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontimeupdate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ontimeupdate(&self, ontimeupdate: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontimeupdate_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontimeupdate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontimeupdate_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontimeupdate: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontimeupdate);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontimeupdate =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontimeupdate,
                    );
                __widl_f_set_ontimeupdate_Document(self_, ontimeupdate)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onvolumechange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onvolumechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvolumechange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onvolumechange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onvolumechange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onvolumechange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onvolumechange_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onvolumechange_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onvolumechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvolumechange)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onvolumechange(&self, onvolumechange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onvolumechange_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onvolumechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onvolumechange_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onvolumechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onvolumechange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onvolumechange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onvolumechange,
                    );
                __widl_f_set_onvolumechange_Document(self_, onvolumechange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwaiting_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onwaiting` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwaiting)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onwaiting(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwaiting_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwaiting_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwaiting_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwaiting_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onwaiting` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwaiting)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onwaiting(&self, onwaiting: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwaiting_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwaiting: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwaiting_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwaiting: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onwaiting);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwaiting =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwaiting,
                    );
                __widl_f_set_onwaiting_Document(self_, onwaiting)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onselectstart_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onselectstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectstart)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onselectstart(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onselectstart_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onselectstart_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onselectstart_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onselectstart_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onselectstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectstart)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onselectstart(&self, onselectstart: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onselectstart_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onselectstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onselectstart_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onselectstart: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onselectstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onselectstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onselectstart,
                    );
                __widl_f_set_onselectstart_Document(self_, onselectstart)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontoggle_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontoggle` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontoggle)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ontoggle(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontoggle_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontoggle_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontoggle_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontoggle_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontoggle` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontoggle)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ontoggle(&self, ontoggle: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontoggle_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontoggle: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontoggle_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontoggle: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontoggle);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontoggle =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontoggle,
                    );
                __widl_f_set_ontoggle_Document(self_, ontoggle)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointercancel_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointercancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointercancel)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onpointercancel(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointercancel_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointercancel_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointercancel_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointercancel_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointercancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointercancel)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onpointercancel(&self, onpointercancel: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointercancel_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointercancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointercancel_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointercancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onpointercancel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointercancel =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointercancel,
                    );
                __widl_f_set_onpointercancel_Document(self_, onpointercancel)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerdown_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerdown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerdown)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onpointerdown(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerdown_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerdown_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerdown_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerdown_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerdown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerdown)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerdown(&self, onpointerdown: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerdown_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerdown : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerdown_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerdown: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpointerdown);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerdown =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerdown,
                    );
                __widl_f_set_onpointerdown_Document(self_, onpointerdown)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerup_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerup)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onpointerup(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerup_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerup_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerup_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerup_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerup)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerup(&self, onpointerup: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerup_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerup : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerup_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerup: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpointerup);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerup =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerup,
                    );
                __widl_f_set_onpointerup_Document(self_, onpointerup)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointermove_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointermove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointermove)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onpointermove(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointermove_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointermove_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointermove_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointermove_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointermove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointermove)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onpointermove(&self, onpointermove: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointermove_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointermove : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointermove_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointermove: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpointermove);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointermove =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointermove,
                    );
                __widl_f_set_onpointermove_Document(self_, onpointermove)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerout_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerout)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onpointerout(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerout_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerout_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerout_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerout_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerout)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerout(&self, onpointerout: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerout_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerout : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerout_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerout: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpointerout);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerout =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerout,
                    );
                __widl_f_set_onpointerout_Document(self_, onpointerout)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerover_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerover)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onpointerover(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerover_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerover_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerover_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerover_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerover)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerover(&self, onpointerover: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerover_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerover : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerover_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerover: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpointerover);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerover =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerover,
                    );
                __widl_f_set_onpointerover_Document(self_, onpointerover)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerenter_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerenter)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onpointerenter(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerenter_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerenter_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerenter_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerenter_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerenter)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerenter(&self, onpointerenter: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerenter_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerenter_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onpointerenter);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerenter =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerenter,
                    );
                __widl_f_set_onpointerenter_Document(self_, onpointerenter)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerleave_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerleave)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onpointerleave(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerleave_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerleave_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerleave_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerleave_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onpointerleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerleave)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerleave(&self, onpointerleave: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerleave_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerleave_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onpointerleave);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerleave =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerleave,
                    );
                __widl_f_set_onpointerleave_Document(self_, onpointerleave)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ongotpointercapture_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ongotpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ongotpointercapture(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ongotpointercapture_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ongotpointercapture_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ongotpointercapture_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ongotpointercapture_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ongotpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ongotpointercapture(&self, ongotpointercapture: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ongotpointercapture_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ongotpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ongotpointercapture_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ongotpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ongotpointercapture);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ongotpointercapture =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ongotpointercapture,
                    );
                __widl_f_set_ongotpointercapture_Document(self_, ongotpointercapture)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onlostpointercapture_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onlostpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onlostpointercapture(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onlostpointercapture_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onlostpointercapture_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onlostpointercapture_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onlostpointercapture_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onlostpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onlostpointercapture(&self, onlostpointercapture: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onlostpointercapture_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onlostpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onlostpointercapture_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onlostpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onlostpointercapture);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onlostpointercapture =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onlostpointercapture,
                    );
                __widl_f_set_onlostpointercapture_Document(self_, onlostpointercapture)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onanimationcancel_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onanimationcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onanimationcancel(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onanimationcancel_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onanimationcancel_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onanimationcancel_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationcancel_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onanimationcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onanimationcancel(&self, onanimationcancel: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onanimationcancel_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onanimationcancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onanimationcancel_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onanimationcancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onanimationcancel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onanimationcancel =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onanimationcancel,
                    );
                __widl_f_set_onanimationcancel_Document(self_, onanimationcancel)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onanimationend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onanimationend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onanimationend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onanimationend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onanimationend_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onanimationend(&self, onanimationend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onanimationend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onanimationend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onanimationend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onanimationend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onanimationend,
                    );
                __widl_f_set_onanimationend_Document(self_, onanimationend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onanimationiteration_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onanimationiteration(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onanimationiteration_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onanimationiteration_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onanimationiteration_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationiteration_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onanimationiteration(&self, onanimationiteration: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onanimationiteration_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onanimationiteration_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onanimationiteration);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onanimationiteration =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onanimationiteration,
                    );
                __widl_f_set_onanimationiteration_Document(self_, onanimationiteration)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onanimationstart_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationstart)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onanimationstart(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onanimationstart_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onanimationstart_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onanimationstart_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationstart_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationstart)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onanimationstart(&self, onanimationstart: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onanimationstart_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onanimationstart_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onanimationstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onanimationstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onanimationstart,
                    );
                __widl_f_set_onanimationstart_Document(self_, onanimationstart)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontransitioncancel_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontransitioncancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ontransitioncancel(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontransitioncancel_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontransitioncancel_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontransitioncancel_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitioncancel_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontransitioncancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ontransitioncancel(&self, ontransitioncancel: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontransitioncancel_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontransitioncancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontransitioncancel_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontransitioncancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ontransitioncancel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontransitioncancel =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontransitioncancel,
                    );
                __widl_f_set_ontransitioncancel_Document(self_, ontransitioncancel)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontransitionend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ontransitionend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontransitionend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontransitionend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontransitionend_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ontransitionend(&self, ontransitionend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontransitionend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontransitionend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ontransitionend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontransitionend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontransitionend,
                    );
                __widl_f_set_ontransitionend_Document(self_, ontransitionend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontransitionrun_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontransitionrun` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ontransitionrun(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontransitionrun_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontransitionrun_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontransitionrun_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionrun_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontransitionrun` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ontransitionrun(&self, ontransitionrun: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontransitionrun_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontransitionrun : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontransitionrun_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontransitionrun : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ontransitionrun);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontransitionrun =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontransitionrun,
                    );
                __widl_f_set_ontransitionrun_Document(self_, ontransitionrun)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontransitionstart_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontransitionstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ontransitionstart(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontransitionstart_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontransitionstart_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontransitionstart_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionstart_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontransitionstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ontransitionstart(&self, ontransitionstart: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontransitionstart_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontransitionstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontransitionstart_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontransitionstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ontransitionstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontransitionstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontransitionstart,
                    );
                __widl_f_set_ontransitionstart_Document(self_, ontransitionstart)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onwebkitanimationend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwebkitanimationend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwebkitanimationend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwebkitanimationend_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onwebkitanimationend(&self, onwebkitanimationend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwebkitanimationend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwebkitanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwebkitanimationend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwebkitanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onwebkitanimationend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwebkitanimationend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwebkitanimationend,
                    );
                __widl_f_set_onwebkitanimationend_Document(self_, onwebkitanimationend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationiteration_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onwebkitanimationiteration(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwebkitanimationiteration_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwebkitanimationiteration_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwebkitanimationiteration_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationiteration_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onwebkitanimationiteration(
        &self,
        onwebkitanimationiteration: Option<&::js_sys::Function>,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwebkitanimationiteration_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwebkitanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwebkitanimationiteration_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwebkitanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onwebkitanimationiteration);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwebkitanimationiteration =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwebkitanimationiteration,
                    );
                __widl_f_set_onwebkitanimationiteration_Document(self_, onwebkitanimationiteration)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationstart_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onwebkitanimationstart(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwebkitanimationstart_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwebkitanimationstart_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwebkitanimationstart_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationstart_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onwebkitanimationstart(&self, onwebkitanimationstart: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwebkitanimationstart_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwebkitanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwebkitanimationstart_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwebkitanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onwebkitanimationstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwebkitanimationstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwebkitanimationstart,
                    );
                __widl_f_set_onwebkitanimationstart_Document(self_, onwebkitanimationstart)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwebkittransitionend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onwebkittransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onwebkittransitionend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwebkittransitionend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwebkittransitionend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwebkittransitionend_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkittransitionend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onwebkittransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onwebkittransitionend(&self, onwebkittransitionend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwebkittransitionend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwebkittransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwebkittransitionend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwebkittransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onwebkittransitionend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwebkittransitionend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwebkittransitionend,
                    );
                __widl_f_set_onwebkittransitionend_Document(self_, onwebkittransitionend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onerror_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onerror)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn onerror(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onerror_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onerror_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onerror_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onerror_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `onerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onerror)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_onerror(&self, onerror: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onerror_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onerror: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onerror_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onerror: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onerror);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onerror =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onerror,
                    );
                __widl_f_set_onerror_Document(self_, onerror)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn append_with_node(&self, nodes: &::js_sys::Array) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes);
                __widl_f_append_with_node_Document(self_, nodes)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_0_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_0(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_0_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_0_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_append_with_node_0_Document(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_1_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_1(&self, nodes_1: &Node) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_1_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_1_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                __widl_f_append_with_node_1_Document(self_, nodes_1)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_2_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_2(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_2_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_2_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                __widl_f_append_with_node_2_Document(self_, nodes_1, nodes_2)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_3_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_3(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_3_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_3_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                __widl_f_append_with_node_3_Document(self_, nodes_1, nodes_2, nodes_3)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_4_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_4(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_4_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_4_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                __widl_f_append_with_node_4_Document(self_, nodes_1, nodes_2, nodes_3, nodes_4)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_5_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_5(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_5_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_5_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                __widl_f_append_with_node_5_Document(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_6_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_6(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
        nodes_6: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_6_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_6_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                __widl_f_append_with_node_6_Document(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_7_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_7(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
        nodes_6: &Node,
        nodes_7: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_7_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_7_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            drop(nodes_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                let nodes_7 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                __widl_f_append_with_node_7_Document(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn append_with_str(&self, nodes: &::js_sys::Array) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes);
                __widl_f_append_with_str_Document(self_, nodes)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_0_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_0(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_0_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_0_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_append_with_str_0_Document(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_1_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_1(&self, nodes_1: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_1_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_1_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                __widl_f_append_with_str_1_Document(self_, nodes_1)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_2_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_2(
        &self,
        nodes_1: &str,
        nodes_2: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_2_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_2_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                __widl_f_append_with_str_2_Document(self_, nodes_1, nodes_2)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_3_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_3(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_3_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_3_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                __widl_f_append_with_str_3_Document(self_, nodes_1, nodes_2, nodes_3)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_4_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_4(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_4_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_4_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                __widl_f_append_with_str_4_Document(self_, nodes_1, nodes_2, nodes_3, nodes_4)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_5_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_5(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_5_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_5_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                __widl_f_append_with_str_5_Document(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_6_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_6(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
        nodes_6: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_6_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_6_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                __widl_f_append_with_str_6_Document(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_7_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_7(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
        nodes_6: &str,
        nodes_7: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_7_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_7_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            drop(nodes_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                let nodes_7 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                __widl_f_append_with_str_7_Document(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node(
        &self,
        nodes: &::js_sys::Array,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes);
                __widl_f_prepend_with_node_Document(self_, nodes)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_0_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_0(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_0_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_0_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_prepend_with_node_0_Document(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_1_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_1(&self, nodes_1: &Node) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_1_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_1_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                __widl_f_prepend_with_node_1_Document(self_, nodes_1)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_2_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_2(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_2_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_2_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                __widl_f_prepend_with_node_2_Document(self_, nodes_1, nodes_2)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_3_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_3(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_3_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_3_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                __widl_f_prepend_with_node_3_Document(self_, nodes_1, nodes_2, nodes_3)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_4_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_4(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_4_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_4_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                __widl_f_prepend_with_node_4_Document(self_, nodes_1, nodes_2, nodes_3, nodes_4)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_5_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_5(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_5_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_5_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                __widl_f_prepend_with_node_5_Document(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_6_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_6(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
        nodes_6: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_6_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_6_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                __widl_f_prepend_with_node_6_Document(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_7_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_7(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
        nodes_6: &Node,
        nodes_7: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_7_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_7_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            drop(nodes_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                let nodes_7 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                __widl_f_prepend_with_node_7_Document(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str(&self, nodes: &::js_sys::Array) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes);
                __widl_f_prepend_with_str_Document(self_, nodes)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_0_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_0(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_0_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_0_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_prepend_with_str_0_Document(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_1_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_1(&self, nodes_1: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_1_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_1_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                __widl_f_prepend_with_str_1_Document(self_, nodes_1)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_2_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_2(
        &self,
        nodes_1: &str,
        nodes_2: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_2_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_2_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                __widl_f_prepend_with_str_2_Document(self_, nodes_1, nodes_2)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_3_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_3(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_3_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_3_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                __widl_f_prepend_with_str_3_Document(self_, nodes_1, nodes_2, nodes_3)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_4_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_4(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_4_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_4_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                __widl_f_prepend_with_str_4_Document(self_, nodes_1, nodes_2, nodes_3, nodes_4)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_5_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_5(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_5_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_5_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                __widl_f_prepend_with_str_5_Document(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_6_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_6(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
        nodes_6: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_6_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_6_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                __widl_f_prepend_with_str_6_Document(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_7_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Document as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_7(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
        nodes_6: &str,
        nodes_7: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_7_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_7_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            drop(nodes_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                let nodes_7 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                __widl_f_prepend_with_str_7_Document(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_first_element_child_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `firstElementChild` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/firstElementChild)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*"]
    #[allow(clippy::all)]
    pub fn first_element_child(&self) -> Option<Element> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_first_element_child_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_first_element_child_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_first_element_child_Document(self_)
            };
            <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_last_element_child_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `lastElementChild` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastElementChild)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*"]
    #[allow(clippy::all)]
    pub fn last_element_child(&self) -> Option<Element> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_last_element_child_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_last_element_child_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_last_element_child_Document(self_)
            };
            <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_child_element_count_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `childElementCount` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/childElementCount)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn child_element_count(&self) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_child_element_count_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_child_element_count_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_child_element_count_Document(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontouchstart_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontouchstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchstart)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ontouchstart(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontouchstart_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontouchstart_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontouchstart_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchstart_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontouchstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchstart)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ontouchstart(&self, ontouchstart: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontouchstart_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontouchstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontouchstart_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontouchstart: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontouchstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontouchstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontouchstart,
                    );
                __widl_f_set_ontouchstart_Document(self_, ontouchstart)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontouchend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontouchend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ontouchend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontouchend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontouchend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontouchend_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchend_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontouchend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchend)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ontouchend(&self, ontouchend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontouchend_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontouchend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontouchend_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontouchend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontouchend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontouchend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontouchend,
                    );
                __widl_f_set_ontouchend_Document(self_, ontouchend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontouchmove_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontouchmove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchmove)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ontouchmove(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontouchmove_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontouchmove_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontouchmove_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchmove_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontouchmove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchmove)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ontouchmove(&self, ontouchmove: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontouchmove_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontouchmove : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontouchmove_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontouchmove: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontouchmove);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontouchmove =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontouchmove,
                    );
                __widl_f_set_ontouchmove_Document(self_, ontouchmove)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontouchcancel_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Document as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontouchcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn ontouchcancel(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontouchcancel_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontouchcancel_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontouchcancel_Document(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchcancel_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `ontouchcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Document`*"]
    #[allow(clippy::all)]
    pub fn set_ontouchcancel(&self, ontouchcancel: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontouchcancel_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontouchcancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontouchcancel_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontouchcancel: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontouchcancel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontouchcancel =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontouchcancel,
                    );
                __widl_f_set_ontouchcancel_Document(self_, ontouchcancel)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_ns_resolver_Document() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Document as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <Node as WasmDescribe>::describe();
}
impl Document {
    #[allow(bad_style)]
    #[doc = "The `createNSResolver()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createNSResolver)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn create_ns_resolver(&self, node_resolver: &Node) -> Node {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_ns_resolver_Document(
                self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                node_resolver: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_ns_resolver_Document(
            self_: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            node_resolver: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(node_resolver);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let node_resolver =
                    <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node_resolver);
                __widl_f_create_ns_resolver_Document(self_, node_resolver)
            };
            <Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `Element` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element)\n\n*This API requires the following crate features to be activated: `Element`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct Element {
    obj: Node,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_Element: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for Element {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for Element {
        type Target = Node;
        #[inline]
        fn deref(&self) -> &Node {
            &self.obj
        }
    }
    impl IntoWasmAbi for Element {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for Element {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a Element {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for Element {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            Element {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for Element {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a Element {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for Element {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<Element>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(Element {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for Element {
        #[inline]
        fn from(obj: JsValue) -> Element {
            Element { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for Element {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<Element> for Element {
        #[inline]
        fn as_ref(&self) -> &Element {
            self
        }
    }
    impl From<Element> for JsValue {
        #[inline]
        fn from(obj: Element) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for Element {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_Element(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_Element(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_Element(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            Element { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const Element) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<Element> for Node {
    #[inline]
    fn from(obj: Element) -> Node {
        use wasm_bindgen::JsCast;
        Node::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Node> for Element {
    #[inline]
    fn as_ref(&self) -> &Node {
        use wasm_bindgen::JsCast;
        Node::unchecked_from_js_ref(self.as_ref())
    }
}
#[allow(clippy::all)]
impl From<Element> for Object {
    #[inline]
    fn from(obj: Element) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for Element {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_closest_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `closest()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn closest(&self, selector: &str) -> Result<Option<Element>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_closest_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                selector: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_closest_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            selector: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(selector);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let selector = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(selector);
                __widl_f_closest_Element(self_, selector)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_attribute_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `getAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn get_attribute(&self, name: &str) -> Option<String> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_attribute_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_attribute_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                __widl_f_get_attribute_Element(self_, name)
            };
            <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_attribute_ns_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <Option<&str> as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `getAttributeNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn get_attribute_ns(&self, namespace: Option<&str>, local_name: &str) -> Option<String> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_attribute_ns_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                local_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_attribute_ns_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            local_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(namespace);
            drop(local_name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let namespace =
                    <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(namespace);
                let local_name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(local_name);
                __widl_f_get_attribute_ns_Element(self_, namespace, local_name)
            };
            <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_attribute_names_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <::js_sys::Array as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `getAttributeNames()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn get_attribute_names(&self) -> ::js_sys::Array {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_attribute_names_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_attribute_names_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_get_attribute_names_Element(self_)
            };
            <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_has_attribute_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `hasAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn has_attribute(&self, name: &str) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_has_attribute_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_has_attribute_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                __widl_f_has_attribute_Element(self_, name)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_has_attribute_ns_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <Option<&str> as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `hasAttributeNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn has_attribute_ns(&self, namespace: Option<&str>, local_name: &str) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_has_attribute_ns_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                local_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_has_attribute_ns_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            local_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(namespace);
            drop(local_name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let namespace =
                    <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(namespace);
                let local_name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(local_name);
                __widl_f_has_attribute_ns_Element(self_, namespace, local_name)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_has_attributes_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `hasAttributes()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn has_attributes(&self) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_has_attributes_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_has_attributes_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_has_attributes_Element(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_has_pointer_capture_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `hasPointerCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasPointerCapture)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn has_pointer_capture(&self, pointer_id: i32) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_has_pointer_capture_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pointer_id: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_has_pointer_capture_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pointer_id: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(pointer_id);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let pointer_id = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pointer_id);
                __widl_f_has_pointer_capture_Element(self_, pointer_id)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_insert_adjacent_element_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&Element as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `insertAdjacentElement()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn insert_adjacent_element(
        &self,
        where_: &str,
        element: &Element,
    ) -> Result<Option<Element>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_insert_adjacent_element_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                where_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                element: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_insert_adjacent_element_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            where_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            element: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(where_);
            drop(element);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let where_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(where_);
                let element = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(element);
                __widl_f_insert_adjacent_element_Element(self_, where_, element)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_insert_adjacent_html_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `insertAdjacentHTML()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn insert_adjacent_html(
        &self,
        position: &str,
        text: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_insert_adjacent_html_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                position: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                text: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_insert_adjacent_html_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            position: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            text: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(position);
            drop(text);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let position = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(position);
                let text = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(text);
                __widl_f_insert_adjacent_html_Element(self_, position, text)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_insert_adjacent_text_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `insertAdjacentText()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn insert_adjacent_text(
        &self,
        where_: &str,
        data: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_insert_adjacent_text_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                where_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_insert_adjacent_text_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            where_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(where_);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let where_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(where_);
                let data = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_insert_adjacent_text_Element(self_, where_, data)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_matches_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `matches()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn matches(&self, selector: &str) -> Result<bool, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_matches_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                selector: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_matches_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            selector: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(selector);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let selector = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(selector);
                __widl_f_matches_Element(self_, selector)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_query_selector_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `querySelector()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn query_selector(
        &self,
        selectors: &str,
    ) -> Result<Option<Element>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_query_selector_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                selectors: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_query_selector_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            selectors: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(selectors);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let selectors = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(selectors);
                __widl_f_query_selector_Element(self_, selectors)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_release_capture_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `releaseCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/releaseCapture)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn release_capture(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_release_capture_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_release_capture_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_release_capture_Element(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_release_pointer_capture_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `releasePointerCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/releasePointerCapture)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn release_pointer_capture(&self, pointer_id: i32) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_release_pointer_capture_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pointer_id: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_release_pointer_capture_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pointer_id: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(pointer_id);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let pointer_id = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pointer_id);
                __widl_f_release_pointer_capture_Element(self_, pointer_id)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_remove_attribute_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `removeAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn remove_attribute(&self, name: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_remove_attribute_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_remove_attribute_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                __widl_f_remove_attribute_Element(self_, name)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_remove_attribute_ns_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <Option<&str> as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `removeAttributeNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn remove_attribute_ns(
        &self,
        namespace: Option<&str>,
        local_name: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_remove_attribute_ns_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                local_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_remove_attribute_ns_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            local_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(namespace);
            drop(local_name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let namespace =
                    <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(namespace);
                let local_name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(local_name);
                __widl_f_remove_attribute_ns_Element(self_, namespace, local_name)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_request_fullscreen_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `requestFullscreen()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn request_fullscreen(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_request_fullscreen_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_request_fullscreen_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_request_fullscreen_Element(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_request_pointer_lock_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `requestPointerLock()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestPointerLock)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn request_pointer_lock(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_request_pointer_lock_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_request_pointer_lock_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_request_pointer_lock_Element(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_with_x_and_y_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn scroll_with_x_and_y(&self, x: f64, y: f64) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_with_x_and_y_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_with_x_and_y_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_scroll_with_x_and_y_Element(self_, x, y)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn scroll(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_Element(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_by_with_x_and_y_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn scroll_by_with_x_and_y(&self, x: f64, y: f64) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_by_with_x_and_y_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_by_with_x_and_y_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_scroll_by_with_x_and_y_Element(self_, x, y)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_by_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn scroll_by(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_by_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_by_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_by_Element(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_into_view_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `scrollIntoView()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn scroll_into_view(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_into_view_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_into_view_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_into_view_Element(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_into_view_with_bool_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `scrollIntoView()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn scroll_into_view_with_bool(&self, arg: bool) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_into_view_with_bool_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_into_view_with_bool_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(arg);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let arg = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(arg);
                __widl_f_scroll_into_view_with_bool_Element(self_, arg)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_to_with_x_and_y_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn scroll_to_with_x_and_y(&self, x: f64, y: f64) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_to_with_x_and_y_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_to_with_x_and_y_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_scroll_to_with_x_and_y_Element(self_, x, y)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_to_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn scroll_to(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_to_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_to_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_to_Element(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_attribute_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `setAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn set_attribute(&self, name: &str, value: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_attribute_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_attribute_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(name);
            drop(value);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                __widl_f_set_attribute_Element(self_, name, value)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_attribute_ns_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Element as WasmDescribe>::describe();
    <Option<&str> as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `setAttributeNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn set_attribute_ns(
        &self,
        namespace: Option<&str>,
        name: &str,
        value: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_attribute_ns_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_attribute_ns_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(namespace);
            drop(name);
            drop(value);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let namespace =
                    <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(namespace);
                let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                __widl_f_set_attribute_ns_Element(self_, namespace, name, value)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_capture_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `setCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn set_capture(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_capture_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_capture_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_set_capture_Element(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_capture_with_retarget_to_element_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `setCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn set_capture_with_retarget_to_element(&self, retarget_to_element: bool) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_capture_with_retarget_to_element_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                retarget_to_element: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_capture_with_retarget_to_element_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            retarget_to_element: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(retarget_to_element);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let retarget_to_element =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(retarget_to_element);
                __widl_f_set_capture_with_retarget_to_element_Element(self_, retarget_to_element)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_pointer_capture_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `setPointerCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn set_pointer_capture(&self, pointer_id: i32) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_pointer_capture_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pointer_id: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_pointer_capture_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pointer_id: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(pointer_id);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let pointer_id = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pointer_id);
                __widl_f_set_pointer_capture_Element(self_, pointer_id)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_toggle_attribute_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `toggleAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn toggle_attribute(&self, name: &str) -> Result<bool, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_toggle_attribute_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_toggle_attribute_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                __widl_f_toggle_attribute_Element(self_, name)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_toggle_attribute_with_force_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `toggleAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn toggle_attribute_with_force(
        &self,
        name: &str,
        force: bool,
    ) -> Result<bool, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_toggle_attribute_with_force_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                force: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_toggle_attribute_with_force_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            force: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(name);
            drop(force);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                let force = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(force);
                __widl_f_toggle_attribute_with_force_Element(self_, name, force)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_webkit_matches_selector_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `webkitMatchesSelector()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/webkitMatchesSelector)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn webkit_matches_selector(&self, selector: &str) -> Result<bool, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_webkit_matches_selector_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                selector: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_webkit_matches_selector_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            selector: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(selector);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let selector = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(selector);
                __widl_f_webkit_matches_selector_Element(self_, selector)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_namespace_uri_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `namespaceURI` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn namespace_uri(&self) -> Option<String> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_namespace_uri_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_namespace_uri_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_namespace_uri_Element(self_)
            };
            <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prefix_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prefix` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn prefix(&self) -> Option<String> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prefix_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prefix_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_prefix_Element(self_)
            };
            <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_local_name_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `localName` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/localName)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn local_name(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_local_name_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_local_name_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_local_name_Element(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_tag_name_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `tagName` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn tag_name(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_tag_name_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_tag_name_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_tag_name_Element(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_id_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `id` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/id)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn id(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_id_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_id_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_id_Element(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_id_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `id` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/id)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn set_id(&self, id: &str) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_id_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                id: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_id_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            id: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(id);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let id = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(id);
                __widl_f_set_id_Element(self_, id)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_class_name_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `className` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn class_name(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_class_name_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_class_name_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_class_name_Element(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_class_name_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `className` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn set_class_name(&self, class_name: &str) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_class_name_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                class_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_class_name_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            class_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(class_name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let class_name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(class_name);
                __widl_f_set_class_name_Element(self_, class_name)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_top_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `scrollTop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn scroll_top(&self) -> i32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_top_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_top_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_top_Element(self_)
            };
            <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_scroll_top_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `scrollTop` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn set_scroll_top(&self, scroll_top: i32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_scroll_top_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                scroll_top: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_scroll_top_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            scroll_top: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(scroll_top);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let scroll_top = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(scroll_top);
                __widl_f_set_scroll_top_Element(self_, scroll_top)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_left_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `scrollLeft` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn scroll_left(&self) -> i32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_left_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_left_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_left_Element(self_)
            };
            <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_scroll_left_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `scrollLeft` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn set_scroll_left(&self, scroll_left: i32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_scroll_left_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                scroll_left: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_scroll_left_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            scroll_left: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(scroll_left);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let scroll_left =
                    <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(scroll_left);
                __widl_f_set_scroll_left_Element(self_, scroll_left)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_width_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `scrollWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn scroll_width(&self) -> i32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_width_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_width_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_width_Element(self_)
            };
            <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_height_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `scrollHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn scroll_height(&self) -> i32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_height_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_height_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_height_Element(self_)
            };
            <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_client_top_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `clientTop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn client_top(&self) -> i32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_client_top_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_client_top_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_client_top_Element(self_)
            };
            <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_client_left_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `clientLeft` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn client_left(&self) -> i32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_client_left_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_client_left_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_client_left_Element(self_)
            };
            <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_client_width_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `clientWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn client_width(&self) -> i32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_client_width_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_client_width_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_client_width_Element(self_)
            };
            <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_client_height_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `clientHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn client_height(&self) -> i32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_client_height_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_client_height_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_client_height_Element(self_)
            };
            <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_inner_html_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `innerHTML` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn inner_html(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_inner_html_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_inner_html_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_inner_html_Element(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_inner_html_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `innerHTML` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn set_inner_html(&self, inner_html: &str) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_inner_html_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                inner_html: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_inner_html_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            inner_html: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(inner_html);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let inner_html = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(inner_html);
                __widl_f_set_inner_html_Element(self_, inner_html)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_outer_html_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `outerHTML` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn outer_html(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_outer_html_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_outer_html_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_outer_html_Element(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_outer_html_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `outerHTML` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn set_outer_html(&self, outer_html: &str) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_outer_html_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                outer_html: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_outer_html_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            outer_html: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(outer_html);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let outer_html = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(outer_html);
                __widl_f_set_outer_html_Element(self_, outer_html)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_slot_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `slot` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/slot)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn slot(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_slot_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_slot_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_slot_Element(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_slot_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `slot` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/slot)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn set_slot(&self, slot: &str) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_slot_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                slot: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_slot_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            slot: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(slot);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let slot = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(slot);
                __widl_f_set_slot_Element(self_, slot)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_node_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn after_with_node(&self, nodes: &::js_sys::Array) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_node_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_node_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes);
                __widl_f_after_with_node_Element(self_, nodes)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_node_0_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn after_with_node_0(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_node_0_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_node_0_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_after_with_node_0_Element(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_node_1_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn after_with_node_1(&self, nodes_1: &Node) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_node_1_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_node_1_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                __widl_f_after_with_node_1_Element(self_, nodes_1)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_node_2_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn after_with_node_2(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_node_2_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_node_2_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                __widl_f_after_with_node_2_Element(self_, nodes_1, nodes_2)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_node_3_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn after_with_node_3(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_node_3_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_node_3_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                __widl_f_after_with_node_3_Element(self_, nodes_1, nodes_2, nodes_3)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_node_4_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn after_with_node_4(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_node_4_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_node_4_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                __widl_f_after_with_node_4_Element(self_, nodes_1, nodes_2, nodes_3, nodes_4)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_node_5_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn after_with_node_5(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_node_5_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_node_5_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                __widl_f_after_with_node_5_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_node_6_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn after_with_node_6(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
        nodes_6: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_node_6_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_node_6_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                __widl_f_after_with_node_6_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_node_7_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn after_with_node_7(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
        nodes_6: &Node,
        nodes_7: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_node_7_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_node_7_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            drop(nodes_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                let nodes_7 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                __widl_f_after_with_node_7_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn after_with_str(&self, nodes: &::js_sys::Array) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_str_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_str_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes);
                __widl_f_after_with_str_Element(self_, nodes)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_0_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn after_with_str_0(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_str_0_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_str_0_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_after_with_str_0_Element(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_1_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn after_with_str_1(&self, nodes_1: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_str_1_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_str_1_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                __widl_f_after_with_str_1_Element(self_, nodes_1)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_2_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn after_with_str_2(
        &self,
        nodes_1: &str,
        nodes_2: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_str_2_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_str_2_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                __widl_f_after_with_str_2_Element(self_, nodes_1, nodes_2)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_3_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn after_with_str_3(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_str_3_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_str_3_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                __widl_f_after_with_str_3_Element(self_, nodes_1, nodes_2, nodes_3)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_4_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn after_with_str_4(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_str_4_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_str_4_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                __widl_f_after_with_str_4_Element(self_, nodes_1, nodes_2, nodes_3, nodes_4)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_5_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn after_with_str_5(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_str_5_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_str_5_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                __widl_f_after_with_str_5_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_6_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn after_with_str_6(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
        nodes_6: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_str_6_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_str_6_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                __widl_f_after_with_str_6_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_7_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn after_with_str_7(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
        nodes_6: &str,
        nodes_7: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_after_with_str_7_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_after_with_str_7_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            drop(nodes_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                let nodes_7 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                __widl_f_after_with_str_7_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_node_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn before_with_node(&self, nodes: &::js_sys::Array) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_node_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_node_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes);
                __widl_f_before_with_node_Element(self_, nodes)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_node_0_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn before_with_node_0(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_node_0_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_node_0_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_before_with_node_0_Element(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_node_1_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn before_with_node_1(&self, nodes_1: &Node) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_node_1_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_node_1_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                __widl_f_before_with_node_1_Element(self_, nodes_1)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_node_2_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn before_with_node_2(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_node_2_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_node_2_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                __widl_f_before_with_node_2_Element(self_, nodes_1, nodes_2)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_node_3_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn before_with_node_3(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_node_3_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_node_3_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                __widl_f_before_with_node_3_Element(self_, nodes_1, nodes_2, nodes_3)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_node_4_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn before_with_node_4(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_node_4_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_node_4_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                __widl_f_before_with_node_4_Element(self_, nodes_1, nodes_2, nodes_3, nodes_4)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_node_5_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn before_with_node_5(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_node_5_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_node_5_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                __widl_f_before_with_node_5_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_node_6_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn before_with_node_6(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
        nodes_6: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_node_6_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_node_6_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                __widl_f_before_with_node_6_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_node_7_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn before_with_node_7(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
        nodes_6: &Node,
        nodes_7: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_node_7_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_node_7_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            drop(nodes_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                let nodes_7 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                __widl_f_before_with_node_7_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn before_with_str(&self, nodes: &::js_sys::Array) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_str_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_str_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes);
                __widl_f_before_with_str_Element(self_, nodes)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_0_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn before_with_str_0(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_str_0_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_str_0_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_before_with_str_0_Element(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_1_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn before_with_str_1(&self, nodes_1: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_str_1_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_str_1_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                __widl_f_before_with_str_1_Element(self_, nodes_1)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_2_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn before_with_str_2(
        &self,
        nodes_1: &str,
        nodes_2: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_str_2_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_str_2_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                __widl_f_before_with_str_2_Element(self_, nodes_1, nodes_2)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_3_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn before_with_str_3(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_str_3_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_str_3_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                __widl_f_before_with_str_3_Element(self_, nodes_1, nodes_2, nodes_3)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_4_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn before_with_str_4(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_str_4_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_str_4_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                __widl_f_before_with_str_4_Element(self_, nodes_1, nodes_2, nodes_3, nodes_4)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_5_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn before_with_str_5(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_str_5_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_str_5_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                __widl_f_before_with_str_5_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_6_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn before_with_str_6(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
        nodes_6: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_str_6_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_str_6_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                __widl_f_before_with_str_6_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_7_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn before_with_str_7(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
        nodes_6: &str,
        nodes_7: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_before_with_str_7_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_before_with_str_7_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            drop(nodes_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                let nodes_7 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                __widl_f_before_with_str_7_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_remove_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `remove()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn remove(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_remove_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_remove_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_remove_Element(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_node_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_node(
        &self,
        nodes: &::js_sys::Array,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_node_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_node_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes);
                __widl_f_replace_with_with_node_Element(self_, nodes)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_node_0_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_node_0(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_node_0_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_node_0_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_replace_with_with_node_0_Element(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_node_1_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_node_1(&self, nodes_1: &Node) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_node_1_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_node_1_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                __widl_f_replace_with_with_node_1_Element(self_, nodes_1)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_node_2_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_node_2(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_node_2_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_node_2_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                __widl_f_replace_with_with_node_2_Element(self_, nodes_1, nodes_2)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_node_3_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_node_3(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_node_3_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_node_3_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                __widl_f_replace_with_with_node_3_Element(self_, nodes_1, nodes_2, nodes_3)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_node_4_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_node_4(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_node_4_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_node_4_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                __widl_f_replace_with_with_node_4_Element(self_, nodes_1, nodes_2, nodes_3, nodes_4)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_node_5_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_node_5(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_node_5_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_node_5_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                __widl_f_replace_with_with_node_5_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_node_6_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_node_6(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
        nodes_6: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_node_6_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_node_6_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                __widl_f_replace_with_with_node_6_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_node_7_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_node_7(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
        nodes_6: &Node,
        nodes_7: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_node_7_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_node_7_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            drop(nodes_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                let nodes_7 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                __widl_f_replace_with_with_node_7_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_str(
        &self,
        nodes: &::js_sys::Array,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_str_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_str_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes);
                __widl_f_replace_with_with_str_Element(self_, nodes)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_0_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_str_0(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_str_0_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_str_0_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_replace_with_with_str_0_Element(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_1_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_str_1(&self, nodes_1: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_str_1_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_str_1_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                __widl_f_replace_with_with_str_1_Element(self_, nodes_1)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_2_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_str_2(
        &self,
        nodes_1: &str,
        nodes_2: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_str_2_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_str_2_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                __widl_f_replace_with_with_str_2_Element(self_, nodes_1, nodes_2)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_3_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_str_3(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_str_3_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_str_3_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                __widl_f_replace_with_with_str_3_Element(self_, nodes_1, nodes_2, nodes_3)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_4_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_str_4(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_str_4_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_str_4_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                __widl_f_replace_with_with_str_4_Element(self_, nodes_1, nodes_2, nodes_3, nodes_4)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_5_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_str_5(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_str_5_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_str_5_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                __widl_f_replace_with_with_str_5_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_6_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_str_6(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
        nodes_6: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_str_6_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_str_6_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                __widl_f_replace_with_with_str_6_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_7_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn replace_with_with_str_7(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
        nodes_6: &str,
        nodes_7: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_with_with_str_7_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_with_with_str_7_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            drop(nodes_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                let nodes_7 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                __widl_f_replace_with_with_str_7_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_box_quads_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <::js_sys::Array as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `getBoxQuads()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoxQuads)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn get_box_quads(&self) -> Result<::js_sys::Array, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_box_quads_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_box_quads_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_get_box_quads_Element(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_previous_element_sibling_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `previousElementSibling` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/previousElementSibling)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn previous_element_sibling(&self) -> Option<Element> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_previous_element_sibling_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_previous_element_sibling_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_previous_element_sibling_Element(self_)
            };
            <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_next_element_sibling_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `nextElementSibling` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/nextElementSibling)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn next_element_sibling(&self) -> Option<Element> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_next_element_sibling_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_next_element_sibling_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_next_element_sibling_Element(self_)
            };
            <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn append_with_node(&self, nodes: &::js_sys::Array) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes);
                __widl_f_append_with_node_Element(self_, nodes)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_0_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_0(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_0_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_0_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_append_with_node_0_Element(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_1_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_1(&self, nodes_1: &Node) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_1_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_1_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                __widl_f_append_with_node_1_Element(self_, nodes_1)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_2_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_2(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_2_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_2_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                __widl_f_append_with_node_2_Element(self_, nodes_1, nodes_2)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_3_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_3(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_3_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_3_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                __widl_f_append_with_node_3_Element(self_, nodes_1, nodes_2, nodes_3)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_4_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_4(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_4_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_4_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                __widl_f_append_with_node_4_Element(self_, nodes_1, nodes_2, nodes_3, nodes_4)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_5_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_5(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_5_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_5_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                __widl_f_append_with_node_5_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_6_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_6(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
        nodes_6: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_6_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_6_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                __widl_f_append_with_node_6_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_7_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn append_with_node_7(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
        nodes_6: &Node,
        nodes_7: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_node_7_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_node_7_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            drop(nodes_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                let nodes_7 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                __widl_f_append_with_node_7_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn append_with_str(&self, nodes: &::js_sys::Array) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes);
                __widl_f_append_with_str_Element(self_, nodes)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_0_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_0(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_0_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_0_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_append_with_str_0_Element(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_1_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_1(&self, nodes_1: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_1_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_1_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                __widl_f_append_with_str_1_Element(self_, nodes_1)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_2_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_2(
        &self,
        nodes_1: &str,
        nodes_2: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_2_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_2_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                __widl_f_append_with_str_2_Element(self_, nodes_1, nodes_2)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_3_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_3(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_3_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_3_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                __widl_f_append_with_str_3_Element(self_, nodes_1, nodes_2, nodes_3)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_4_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_4(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_4_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_4_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                __widl_f_append_with_str_4_Element(self_, nodes_1, nodes_2, nodes_3, nodes_4)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_5_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_5(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_5_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_5_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                __widl_f_append_with_str_5_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_6_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_6(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
        nodes_6: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_6_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_6_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                __widl_f_append_with_str_6_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_7_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn append_with_str_7(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
        nodes_6: &str,
        nodes_7: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_with_str_7_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_with_str_7_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            drop(nodes_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                let nodes_7 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                __widl_f_append_with_str_7_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node(
        &self,
        nodes: &::js_sys::Array,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes);
                __widl_f_prepend_with_node_Element(self_, nodes)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_0_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_0(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_0_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_0_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_prepend_with_node_0_Element(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_1_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_1(&self, nodes_1: &Node) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_1_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_1_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                __widl_f_prepend_with_node_1_Element(self_, nodes_1)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_2_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_2(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_2_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_2_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                __widl_f_prepend_with_node_2_Element(self_, nodes_1, nodes_2)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_3_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_3(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_3_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_3_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                __widl_f_prepend_with_node_3_Element(self_, nodes_1, nodes_2, nodes_3)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_4_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_4(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_4_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_4_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                __widl_f_prepend_with_node_4_Element(self_, nodes_1, nodes_2, nodes_3, nodes_4)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_5_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_5(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_5_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_5_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                __widl_f_prepend_with_node_5_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_6_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_6(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
        nodes_6: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_6_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_6_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                __widl_f_prepend_with_node_6_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_7_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Element as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_node_7(
        &self,
        nodes_1: &Node,
        nodes_2: &Node,
        nodes_3: &Node,
        nodes_4: &Node,
        nodes_5: &Node,
        nodes_6: &Node,
        nodes_7: &Node,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_node_7_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_node_7_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            drop(nodes_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                let nodes_7 = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                __widl_f_prepend_with_node_7_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str(&self, nodes: &::js_sys::Array) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes);
                __widl_f_prepend_with_str_Element(self_, nodes)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_0_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_0(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_0_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_0_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_prepend_with_str_0_Element(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_1_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_1(&self, nodes_1: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_1_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_1_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                __widl_f_prepend_with_str_1_Element(self_, nodes_1)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_2_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_2(
        &self,
        nodes_1: &str,
        nodes_2: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_2_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_2_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                __widl_f_prepend_with_str_2_Element(self_, nodes_1, nodes_2)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_3_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_3(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_3_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_3_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                __widl_f_prepend_with_str_3_Element(self_, nodes_1, nodes_2, nodes_3)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_4_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_4(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_4_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_4_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                __widl_f_prepend_with_str_4_Element(self_, nodes_1, nodes_2, nodes_3, nodes_4)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_5_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_5(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_5_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_5_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                __widl_f_prepend_with_str_5_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_6_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_6(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
        nodes_6: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_6_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_6_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                __widl_f_prepend_with_str_6_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_7_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn prepend_with_str_7(
        &self,
        nodes_1: &str,
        nodes_2: &str,
        nodes_3: &str,
        nodes_4: &str,
        nodes_5: &str,
        nodes_6: &str,
        nodes_7: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prepend_with_str_7_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prepend_with_str_7_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(nodes_1);
            drop(nodes_2);
            drop(nodes_3);
            drop(nodes_4);
            drop(nodes_5);
            drop(nodes_6);
            drop(nodes_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let nodes_1 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                let nodes_2 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                let nodes_3 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                let nodes_4 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                let nodes_5 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                let nodes_6 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                let nodes_7 = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                __widl_f_prepend_with_str_7_Element(
                    self_, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_first_element_child_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `firstElementChild` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/firstElementChild)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn first_element_child(&self) -> Option<Element> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_first_element_child_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_first_element_child_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_first_element_child_Element(self_)
            };
            <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_last_element_child_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `lastElementChild` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/lastElementChild)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn last_element_child(&self) -> Option<Element> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_last_element_child_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_last_element_child_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_last_element_child_Element(self_)
            };
            <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_child_element_count_Element() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Element as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl Element {
    #[allow(bad_style)]
    #[doc = "The `childElementCount` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/childElementCount)\n\n*This API requires the following crate features to be activated: `Element`*"]
    #[allow(clippy::all)]
    pub fn child_element_count(&self) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_child_element_count_Element(
                self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_child_element_count_Element(
            self_: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_child_element_count_Element(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `HTMLCanvasElement` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct HtmlCanvasElement {
    obj: Element,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_HtmlCanvasElement: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for HtmlCanvasElement {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for HtmlCanvasElement {
        type Target = Element;
        #[inline]
        fn deref(&self) -> &Element {
            &self.obj
        }
    }
    impl IntoWasmAbi for HtmlCanvasElement {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for HtmlCanvasElement {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a HtmlCanvasElement {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for HtmlCanvasElement {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            HtmlCanvasElement {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for HtmlCanvasElement {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a HtmlCanvasElement {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for HtmlCanvasElement {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<HtmlCanvasElement>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(HtmlCanvasElement {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for HtmlCanvasElement {
        #[inline]
        fn from(obj: JsValue) -> HtmlCanvasElement {
            HtmlCanvasElement { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for HtmlCanvasElement {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<HtmlCanvasElement> for HtmlCanvasElement {
        #[inline]
        fn as_ref(&self) -> &HtmlCanvasElement {
            self
        }
    }
    impl From<HtmlCanvasElement> for JsValue {
        #[inline]
        fn from(obj: HtmlCanvasElement) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for HtmlCanvasElement {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_HTMLCanvasElement(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_HTMLCanvasElement(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_HTMLCanvasElement(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            HtmlCanvasElement { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const HtmlCanvasElement) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<HtmlCanvasElement> for Element {
    #[inline]
    fn from(obj: HtmlCanvasElement) -> Element {
        use wasm_bindgen::JsCast;
        Element::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Element> for HtmlCanvasElement {
    #[inline]
    fn as_ref(&self) -> &Element {
        use wasm_bindgen::JsCast;
        Element::unchecked_from_js_ref(self.as_ref())
    }
}
#[allow(clippy::all)]
impl From<HtmlCanvasElement> for Node {
    #[inline]
    fn from(obj: HtmlCanvasElement) -> Node {
        use wasm_bindgen::JsCast;
        Node::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Node> for HtmlCanvasElement {
    #[inline]
    fn as_ref(&self) -> &Node {
        use wasm_bindgen::JsCast;
        Node::unchecked_from_js_ref(self.as_ref())
    }
}
#[allow(clippy::all)]
impl From<HtmlCanvasElement> for Object {
    #[inline]
    fn from(obj: HtmlCanvasElement) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for HtmlCanvasElement {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_context_HTMLCanvasElement() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<::js_sys::Object> as WasmDescribe>::describe();
}
impl HtmlCanvasElement {
    #[allow(bad_style)]
    #[doc = "The `getContext()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*"]
    #[allow(clippy::all)]
    pub fn get_context(
        &self,
        context_id: &str,
    ) -> Result<Option<::js_sys::Object>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_context_HTMLCanvasElement(
                self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                context_id: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_context_HTMLCanvasElement(
            self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            context_id: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(context_id);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let context_id = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(context_id);
                __widl_f_get_context_HTMLCanvasElement(self_, context_id)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_context_with_context_options_HTMLCanvasElement()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <Option<::js_sys::Object> as WasmDescribe>::describe();
}
impl HtmlCanvasElement {
    #[allow(bad_style)]
    #[doc = "The `getContext()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*"]
    #[allow(clippy::all)]
    pub fn get_context_with_context_options(
        &self,
        context_id: &str,
        context_options: &::wasm_bindgen::JsValue,
    ) -> Result<Option<::js_sys::Object>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_context_with_context_options_HTMLCanvasElement(
                self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                context_id: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                context_options : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_context_with_context_options_HTMLCanvasElement(
            self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            context_id: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            context_options: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(context_id);
            drop(context_options);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let context_id = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(context_id);
                let context_options =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        context_options,
                    );
                __widl_f_get_context_with_context_options_HTMLCanvasElement(
                    self_,
                    context_id,
                    context_options,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_to_blob_HTMLCanvasElement() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl HtmlCanvasElement {
    #[allow(bad_style)]
    #[doc = "The `toBlob()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*"]
    #[allow(clippy::all)]
    pub fn to_blob(&self, callback: &::js_sys::Function) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_to_blob_HTMLCanvasElement(
                self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_to_blob_HTMLCanvasElement(
            self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(callback);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let callback =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(callback);
                __widl_f_to_blob_HTMLCanvasElement(self_, callback)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_to_blob_with_type_HTMLCanvasElement() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl HtmlCanvasElement {
    #[allow(bad_style)]
    #[doc = "The `toBlob()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*"]
    #[allow(clippy::all)]
    pub fn to_blob_with_type(
        &self,
        callback: &::js_sys::Function,
        type_: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_to_blob_with_type_HTMLCanvasElement(
                self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_to_blob_with_type_HTMLCanvasElement(
            self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(callback);
            drop(type_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let callback =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(callback);
                let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                __widl_f_to_blob_with_type_HTMLCanvasElement(self_, callback, type_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_to_blob_with_type_and_encoder_options_HTMLCanvasElement(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl HtmlCanvasElement {
    #[allow(bad_style)]
    #[doc = "The `toBlob()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*"]
    #[allow(clippy::all)]
    pub fn to_blob_with_type_and_encoder_options(
        &self,
        callback: &::js_sys::Function,
        type_: &str,
        encoder_options: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_to_blob_with_type_and_encoder_options_HTMLCanvasElement(
                self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                encoder_options : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_to_blob_with_type_and_encoder_options_HTMLCanvasElement(
            self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            encoder_options: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(callback);
            drop(type_);
            drop(encoder_options);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let callback =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(callback);
                let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                let encoder_options =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        encoder_options,
                    );
                __widl_f_to_blob_with_type_and_encoder_options_HTMLCanvasElement(
                    self_,
                    callback,
                    type_,
                    encoder_options,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_to_data_url_HTMLCanvasElement() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl HtmlCanvasElement {
    #[allow(bad_style)]
    #[doc = "The `toDataURL()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*"]
    #[allow(clippy::all)]
    pub fn to_data_url(&self) -> Result<String, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_to_data_url_HTMLCanvasElement(
                self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_to_data_url_HTMLCanvasElement(
            self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_to_data_url_HTMLCanvasElement(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_to_data_url_with_type_HTMLCanvasElement() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl HtmlCanvasElement {
    #[allow(bad_style)]
    #[doc = "The `toDataURL()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*"]
    #[allow(clippy::all)]
    pub fn to_data_url_with_type(&self, type_: &str) -> Result<String, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_to_data_url_with_type_HTMLCanvasElement(
                self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_to_data_url_with_type_HTMLCanvasElement(
            self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(type_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                __widl_f_to_data_url_with_type_HTMLCanvasElement(self_, type_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_to_data_url_with_type_and_encoder_options_HTMLCanvasElement(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl HtmlCanvasElement {
    #[allow(bad_style)]
    #[doc = "The `toDataURL()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*"]
    #[allow(clippy::all)]
    pub fn to_data_url_with_type_and_encoder_options(
        &self,
        type_: &str,
        encoder_options: &::wasm_bindgen::JsValue,
    ) -> Result<String, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_to_data_url_with_type_and_encoder_options_HTMLCanvasElement(
                self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                encoder_options : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_to_data_url_with_type_and_encoder_options_HTMLCanvasElement(
            self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            encoder_options: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(type_);
            drop(encoder_options);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                let encoder_options =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        encoder_options,
                    );
                __widl_f_to_data_url_with_type_and_encoder_options_HTMLCanvasElement(
                    self_,
                    type_,
                    encoder_options,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_width_HTMLCanvasElement() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl HtmlCanvasElement {
    #[allow(bad_style)]
    #[doc = "The `width` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*"]
    #[allow(clippy::all)]
    pub fn width(&self) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_width_HTMLCanvasElement(
                self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_width_HTMLCanvasElement(
            self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_width_HTMLCanvasElement(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_width_HTMLCanvasElement() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl HtmlCanvasElement {
    #[allow(bad_style)]
    #[doc = "The `width` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*"]
    #[allow(clippy::all)]
    pub fn set_width(&self, width: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_width_HTMLCanvasElement(
                self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_width_HTMLCanvasElement(
            self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(width);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let width = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                __widl_f_set_width_HTMLCanvasElement(self_, width)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_height_HTMLCanvasElement() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl HtmlCanvasElement {
    #[allow(bad_style)]
    #[doc = "The `height` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*"]
    #[allow(clippy::all)]
    pub fn height(&self) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_height_HTMLCanvasElement(
                self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_height_HTMLCanvasElement(
            self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_height_HTMLCanvasElement(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_height_HTMLCanvasElement() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl HtmlCanvasElement {
    #[allow(bad_style)]
    #[doc = "The `height` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*"]
    #[allow(clippy::all)]
    pub fn set_height(&self, height: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_height_HTMLCanvasElement(
                self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_height_HTMLCanvasElement(
            self_: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(height);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let height = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                __widl_f_set_height_HTMLCanvasElement(self_, height)
            };
            ()
        }
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `KeyboardEvent` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct KeyboardEvent {
    obj: Object,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_KeyboardEvent: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for KeyboardEvent {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for KeyboardEvent {
        type Target = Object;
        #[inline]
        fn deref(&self) -> &Object {
            &self.obj
        }
    }
    impl IntoWasmAbi for KeyboardEvent {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for KeyboardEvent {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a KeyboardEvent {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for KeyboardEvent {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            KeyboardEvent {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for KeyboardEvent {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a KeyboardEvent {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for KeyboardEvent {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<KeyboardEvent>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(KeyboardEvent {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for KeyboardEvent {
        #[inline]
        fn from(obj: JsValue) -> KeyboardEvent {
            KeyboardEvent { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for KeyboardEvent {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<KeyboardEvent> for KeyboardEvent {
        #[inline]
        fn as_ref(&self) -> &KeyboardEvent {
            self
        }
    }
    impl From<KeyboardEvent> for JsValue {
        #[inline]
        fn from(obj: KeyboardEvent) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for KeyboardEvent {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_KeyboardEvent(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_KeyboardEvent(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_KeyboardEvent(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            KeyboardEvent { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const KeyboardEvent) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<KeyboardEvent> for Object {
    #[inline]
    fn from(obj: KeyboardEvent) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for KeyboardEvent {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_new_KeyboardEvent() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&str as WasmDescribe>::describe();
    <KeyboardEvent as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `new KeyboardEvent(..)` constructor, creating a new instance of `KeyboardEvent`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn new(type_arg: &str) -> Result<KeyboardEvent, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_new_KeyboardEvent(
                type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <KeyboardEvent as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_new_KeyboardEvent(
            type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <KeyboardEvent as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(type_arg);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let type_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_arg);
                __widl_f_new_KeyboardEvent(type_arg)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<KeyboardEvent as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_modifier_state_KeyboardEvent() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `getModifierState()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn get_modifier_state(&self, key: &str) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_modifier_state_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                key: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_modifier_state_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            key: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(key);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let key = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(key);
                __widl_f_get_modifier_state_KeyboardEvent(self_, key)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_KeyboardEvent() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn init_keyboard_event(&self, type_arg: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_init_keyboard_event_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_init_keyboard_event_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(type_arg);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let type_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_arg);
                __widl_f_init_keyboard_event_KeyboardEvent(self_, type_arg)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_KeyboardEvent()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn init_keyboard_event_with_bubbles_arg(
        &self,
        type_arg: &str,
        bubbles_arg: bool,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_init_keyboard_event_with_bubbles_arg_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_init_keyboard_event_with_bubbles_arg_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(type_arg);
            drop(bubbles_arg);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let type_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_arg);
                let bubbles_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles_arg);
                __widl_f_init_keyboard_event_with_bubbles_arg_KeyboardEvent(
                    self_,
                    type_arg,
                    bubbles_arg,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_KeyboardEvent(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg(
        &self,
        type_arg: &str,
        bubbles_arg: bool,
        cancelable_arg: bool,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(type_arg);
            drop(bubbles_arg);
            drop(cancelable_arg);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let type_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_arg);
                let bubbles_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles_arg);
                let cancelable_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cancelable_arg);
                __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_KeyboardEvent(
                    self_,
                    type_arg,
                    bubbles_arg,
                    cancelable_arg,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_KeyboardEvent(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <Option<&Window> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*"]
    #[allow(clippy::all)]
    pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg(
        &self,
        type_arg: &str,
        bubbles_arg: bool,
        cancelable_arg: bool,
        view_arg: Option<&Window>,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                view_arg: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            view_arg: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(type_arg);
            drop(bubbles_arg);
            drop(cancelable_arg);
            drop(view_arg);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let type_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_arg);
                let bubbles_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles_arg);
                let cancelable_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cancelable_arg);
                let view_arg =
                    <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(view_arg);
                __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_KeyboardEvent ( self_ , type_arg , bubbles_arg , cancelable_arg , view_arg )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_KeyboardEvent(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <Option<&Window> as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*"]
    #[allow(clippy::all)]
    pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg(
        &self,
        type_arg: &str,
        bubbles_arg: bool,
        cancelable_arg: bool,
        view_arg: Option<&Window>,
        key_arg: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                view_arg: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                key_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            view_arg: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            key_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(type_arg);
            drop(bubbles_arg);
            drop(cancelable_arg);
            drop(view_arg);
            drop(key_arg);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let type_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_arg);
                let bubbles_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles_arg);
                let cancelable_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cancelable_arg);
                let view_arg =
                    <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(view_arg);
                let key_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(key_arg);
                __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_KeyboardEvent ( self_ , type_arg , bubbles_arg , cancelable_arg , view_arg , key_arg )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_KeyboardEvent(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <Option<&Window> as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*"]
    #[allow(clippy::all)]
    pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg(
        &self,
        type_arg: &str,
        bubbles_arg: bool,
        cancelable_arg: bool,
        view_arg: Option<&Window>,
        key_arg: &str,
        location_arg: u32,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                view_arg: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                key_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location_arg: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            view_arg: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            key_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location_arg: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(type_arg);
            drop(bubbles_arg);
            drop(cancelable_arg);
            drop(view_arg);
            drop(key_arg);
            drop(location_arg);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let type_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_arg);
                let bubbles_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles_arg);
                let cancelable_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cancelable_arg);
                let view_arg =
                    <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(view_arg);
                let key_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(key_arg);
                let location_arg =
                    <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(location_arg);
                __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_KeyboardEvent ( self_ , type_arg , bubbles_arg , cancelable_arg , view_arg , key_arg , location_arg )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_KeyboardEvent(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <Option<&Window> as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*"]
    #[allow(clippy::all)]
    pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key(
        &self,
        type_arg: &str,
        bubbles_arg: bool,
        cancelable_arg: bool,
        view_arg: Option<&Window>,
        key_arg: &str,
        location_arg: u32,
        ctrl_key: bool,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                view_arg: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                key_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location_arg: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ctrl_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            view_arg: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            key_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location_arg: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ctrl_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(type_arg);
            drop(bubbles_arg);
            drop(cancelable_arg);
            drop(view_arg);
            drop(key_arg);
            drop(location_arg);
            drop(ctrl_key);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let type_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_arg);
                let bubbles_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles_arg);
                let cancelable_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cancelable_arg);
                let view_arg =
                    <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(view_arg);
                let key_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(key_arg);
                let location_arg =
                    <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(location_arg);
                let ctrl_key = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(ctrl_key);
                __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_KeyboardEvent ( self_ , type_arg , bubbles_arg , cancelable_arg , view_arg , key_arg , location_arg , ctrl_key )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_KeyboardEvent(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(9u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <Option<&Window> as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*"]
    #[allow(clippy::all)]
    pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key(
        &self,
        type_arg: &str,
        bubbles_arg: bool,
        cancelable_arg: bool,
        view_arg: Option<&Window>,
        key_arg: &str,
        location_arg: u32,
        ctrl_key: bool,
        alt_key: bool,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                view_arg: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                key_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location_arg: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ctrl_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                alt_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            view_arg: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            key_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location_arg: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ctrl_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            alt_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(type_arg);
            drop(bubbles_arg);
            drop(cancelable_arg);
            drop(view_arg);
            drop(key_arg);
            drop(location_arg);
            drop(ctrl_key);
            drop(alt_key);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let type_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_arg);
                let bubbles_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles_arg);
                let cancelable_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cancelable_arg);
                let view_arg =
                    <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(view_arg);
                let key_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(key_arg);
                let location_arg =
                    <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(location_arg);
                let ctrl_key = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(ctrl_key);
                let alt_key = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(alt_key);
                __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_KeyboardEvent ( self_ , type_arg , bubbles_arg , cancelable_arg , view_arg , key_arg , location_arg , ctrl_key , alt_key )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_KeyboardEvent(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(10u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <Option<&Window> as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*"]
    #[allow(clippy::all)]
    pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key(
        &self,
        type_arg: &str,
        bubbles_arg: bool,
        cancelable_arg: bool,
        view_arg: Option<&Window>,
        key_arg: &str,
        location_arg: u32,
        ctrl_key: bool,
        alt_key: bool,
        shift_key: bool,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                view_arg: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                key_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location_arg: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ctrl_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                alt_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                shift_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            view_arg: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            key_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location_arg: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ctrl_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            alt_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            shift_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(type_arg);
            drop(bubbles_arg);
            drop(cancelable_arg);
            drop(view_arg);
            drop(key_arg);
            drop(location_arg);
            drop(ctrl_key);
            drop(alt_key);
            drop(shift_key);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let type_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_arg);
                let bubbles_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles_arg);
                let cancelable_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cancelable_arg);
                let view_arg =
                    <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(view_arg);
                let key_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(key_arg);
                let location_arg =
                    <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(location_arg);
                let ctrl_key = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(ctrl_key);
                let alt_key = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(alt_key);
                let shift_key = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(shift_key);
                __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_KeyboardEvent ( self_ , type_arg , bubbles_arg , cancelable_arg , view_arg , key_arg , location_arg , ctrl_key , alt_key , shift_key )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_and_meta_key_KeyboardEvent(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(11u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <Option<&Window> as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*"]
    #[allow(clippy::all)]
    pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_and_meta_key(
        &self,
        type_arg: &str,
        bubbles_arg: bool,
        cancelable_arg: bool,
        view_arg: Option<&Window>,
        key_arg: &str,
        location_arg: u32,
        ctrl_key: bool,
        alt_key: bool,
        shift_key: bool,
        meta_key: bool,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_and_meta_key_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                view_arg: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                key_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location_arg: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ctrl_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                alt_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                shift_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                meta_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_and_meta_key_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            bubbles_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            cancelable_arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            view_arg: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            key_arg: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location_arg: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ctrl_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            alt_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            shift_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            meta_key: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(type_arg);
            drop(bubbles_arg);
            drop(cancelable_arg);
            drop(view_arg);
            drop(key_arg);
            drop(location_arg);
            drop(ctrl_key);
            drop(alt_key);
            drop(shift_key);
            drop(meta_key);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let type_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_arg);
                let bubbles_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles_arg);
                let cancelable_arg =
                    <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cancelable_arg);
                let view_arg =
                    <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(view_arg);
                let key_arg = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(key_arg);
                let location_arg =
                    <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(location_arg);
                let ctrl_key = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(ctrl_key);
                let alt_key = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(alt_key);
                let shift_key = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(shift_key);
                let meta_key = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(meta_key);
                __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_and_meta_key_KeyboardEvent ( self_ , type_arg , bubbles_arg , cancelable_arg , view_arg , key_arg , location_arg , ctrl_key , alt_key , shift_key , meta_key )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_char_code_KeyboardEvent() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `charCode` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/charCode)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn char_code(&self) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_char_code_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_char_code_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_char_code_KeyboardEvent(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_key_code_KeyboardEvent() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `keyCode` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn key_code(&self) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_key_code_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_key_code_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_key_code_KeyboardEvent(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_alt_key_KeyboardEvent() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `altKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/altKey)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn alt_key(&self) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_alt_key_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_alt_key_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_alt_key_KeyboardEvent(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ctrl_key_KeyboardEvent() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `ctrlKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/ctrlKey)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn ctrl_key(&self) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ctrl_key_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ctrl_key_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ctrl_key_KeyboardEvent(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_shift_key_KeyboardEvent() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `shiftKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/shiftKey)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn shift_key(&self) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_shift_key_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_shift_key_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_shift_key_KeyboardEvent(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_meta_key_KeyboardEvent() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `metaKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/metaKey)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn meta_key(&self) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_meta_key_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_meta_key_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_meta_key_KeyboardEvent(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_location_KeyboardEvent() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `location` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/location)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn location(&self) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_location_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_location_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_location_KeyboardEvent(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_repeat_KeyboardEvent() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `repeat` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn repeat(&self) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_repeat_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_repeat_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_repeat_KeyboardEvent(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_is_composing_KeyboardEvent() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `isComposing` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn is_composing(&self) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_is_composing_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_is_composing_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_is_composing_KeyboardEvent(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_key_KeyboardEvent() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `key` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn key(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_key_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_key_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_key_KeyboardEvent(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_code_KeyboardEvent() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&KeyboardEvent as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl KeyboardEvent {
    #[allow(bad_style)]
    #[doc = "The `code` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*"]
    #[allow(clippy::all)]
    pub fn code(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_code_KeyboardEvent(
                self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_code_KeyboardEvent(
            self_: <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&KeyboardEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_code_KeyboardEvent(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `Node` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node)\n\n*This API requires the following crate features to be activated: `Node`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct Node {
    obj: Object,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_Node: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for Node {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for Node {
        type Target = Object;
        #[inline]
        fn deref(&self) -> &Object {
            &self.obj
        }
    }
    impl IntoWasmAbi for Node {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for Node {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a Node {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for Node {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            Node {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for Node {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a Node {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for Node {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<Node>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(Node {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for Node {
        #[inline]
        fn from(obj: JsValue) -> Node {
            Node { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for Node {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<Node> for Node {
        #[inline]
        fn as_ref(&self) -> &Node {
            self
        }
    }
    impl From<Node> for JsValue {
        #[inline]
        fn from(obj: Node) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for Node {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_Node(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_Node(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_Node(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            Node { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const Node) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<Node> for Object {
    #[inline]
    fn from(obj: Node) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for Node {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_append_child_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <Node as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `appendChild()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn append_child(&self, node: &Node) -> Result<Node, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_append_child_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_append_child_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(node);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let node = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                __widl_f_append_child_Node(self_, node)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_clone_node_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <Node as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `cloneNode()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn clone_node(&self) -> Result<Node, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_clone_node_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_clone_node_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_clone_node_Node(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_clone_node_with_deep_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Node as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <Node as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `cloneNode()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn clone_node_with_deep(&self, deep: bool) -> Result<Node, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_clone_node_with_deep_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                deep: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_clone_node_with_deep_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            deep: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(deep);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let deep = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(deep);
                __widl_f_clone_node_with_deep_Node(self_, deep)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_compare_document_position_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <u16 as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `compareDocumentPosition()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn compare_document_position(&self, other: &Node) -> u16 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_compare_document_position_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                other: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u16 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_compare_document_position_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            other: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u16 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(other);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let other = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(other);
                __widl_f_compare_document_position_Node(self_, other)
            };
            <u16 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_contains_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Node as WasmDescribe>::describe();
    <Option<&Node> as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `contains()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/contains)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn contains(&self, other: Option<&Node>) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_contains_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                other: <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_contains_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            other: <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(other);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let other = <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(other);
                __widl_f_contains_Node(self_, other)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_root_node_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <Node as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `getRootNode()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn get_root_node(&self) -> Node {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_root_node_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_root_node_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_get_root_node_Node(self_)
            };
            <Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_has_child_nodes_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `hasChildNodes()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn has_child_nodes(&self) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_has_child_nodes_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_has_child_nodes_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_has_child_nodes_Node(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_insert_before_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <Option<&Node> as WasmDescribe>::describe();
    <Node as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `insertBefore()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn insert_before(
        &self,
        node: &Node,
        child: Option<&Node>,
    ) -> Result<Node, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_insert_before_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                child: <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_insert_before_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            child: <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(node);
            drop(child);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let node = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                let child = <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(child);
                __widl_f_insert_before_Node(self_, node, child)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_is_default_namespace_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Node as WasmDescribe>::describe();
    <Option<&str> as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `isDefaultNamespace()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn is_default_namespace(&self, namespace: Option<&str>) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_is_default_namespace_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_is_default_namespace_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(namespace);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let namespace =
                    <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(namespace);
                __widl_f_is_default_namespace_Node(self_, namespace)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_is_equal_node_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Node as WasmDescribe>::describe();
    <Option<&Node> as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `isEqualNode()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn is_equal_node(&self, node: Option<&Node>) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_is_equal_node_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                node: <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_is_equal_node_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            node: <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(node);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let node = <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                __widl_f_is_equal_node_Node(self_, node)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_is_same_node_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Node as WasmDescribe>::describe();
    <Option<&Node> as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `isSameNode()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isSameNode)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn is_same_node(&self, node: Option<&Node>) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_is_same_node_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                node: <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_is_same_node_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            node: <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(node);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let node = <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                __widl_f_is_same_node_Node(self_, node)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_lookup_namespace_uri_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Node as WasmDescribe>::describe();
    <Option<&str> as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `lookupNamespaceURI()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupNamespaceURI)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn lookup_namespace_uri(&self, prefix: Option<&str>) -> Option<String> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_lookup_namespace_uri_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                prefix: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_lookup_namespace_uri_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            prefix: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(prefix);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let prefix = <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(prefix);
                __widl_f_lookup_namespace_uri_Node(self_, prefix)
            };
            <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_lookup_prefix_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Node as WasmDescribe>::describe();
    <Option<&str> as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `lookupPrefix()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn lookup_prefix(&self, namespace: Option<&str>) -> Option<String> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_lookup_prefix_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_lookup_prefix_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(namespace);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let namespace =
                    <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(namespace);
                __widl_f_lookup_prefix_Node(self_, namespace)
            };
            <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_normalize_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `normalize()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn normalize(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_normalize_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_normalize_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_normalize_Node(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_remove_child_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <Node as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `removeChild()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn remove_child(&self, child: &Node) -> Result<Node, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_remove_child_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                child: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_remove_child_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            child: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(child);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let child = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(child);
                __widl_f_remove_child_Node(self_, child)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_replace_child_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <&Node as WasmDescribe>::describe();
    <Node as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `replaceChild()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn replace_child(
        &self,
        node: &Node,
        child: &Node,
    ) -> Result<Node, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_replace_child_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                child: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_replace_child_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            child: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(node);
            drop(child);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let node = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                let child = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(child);
                __widl_f_replace_child_Node(self_, node, child)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_node_type_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <u16 as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `nodeType` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn node_type(&self) -> u16 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_node_type_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u16 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_node_type_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u16 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_node_type_Node(self_)
            };
            <u16 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_node_name_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `nodeName` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn node_name(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_node_name_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_node_name_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_node_name_Node(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_base_uri_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `baseURI` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn base_uri(&self) -> Result<Option<String>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_base_uri_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_base_uri_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_base_uri_Node(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_is_connected_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `isConnected` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn is_connected(&self) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_is_connected_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_is_connected_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_is_connected_Node(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_owner_document_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <Option<Document> as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `ownerDocument` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument)\n\n*This API requires the following crate features to be activated: `Document`, `Node`*"]
    #[allow(clippy::all)]
    pub fn owner_document(&self) -> Option<Document> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_owner_document_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Document> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_owner_document_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Document> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_owner_document_Node(self_)
            };
            <Option<Document> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_parent_node_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <Option<Node> as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `parentNode` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn parent_node(&self) -> Option<Node> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_parent_node_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_parent_node_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_parent_node_Node(self_)
            };
            <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_parent_element_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `parentElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement)\n\n*This API requires the following crate features to be activated: `Element`, `Node`*"]
    #[allow(clippy::all)]
    pub fn parent_element(&self) -> Option<Element> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_parent_element_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_parent_element_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_parent_element_Node(self_)
            };
            <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_first_child_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <Option<Node> as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `firstChild` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn first_child(&self) -> Option<Node> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_first_child_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_first_child_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_first_child_Node(self_)
            };
            <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_last_child_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <Option<Node> as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `lastChild` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn last_child(&self) -> Option<Node> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_last_child_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_last_child_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_last_child_Node(self_)
            };
            <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_previous_sibling_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <Option<Node> as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `previousSibling` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn previous_sibling(&self) -> Option<Node> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_previous_sibling_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_previous_sibling_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_previous_sibling_Node(self_)
            };
            <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_next_sibling_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <Option<Node> as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `nextSibling` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn next_sibling(&self) -> Option<Node> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_next_sibling_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_next_sibling_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_next_sibling_Node(self_)
            };
            <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_node_value_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `nodeValue` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn node_value(&self) -> Option<String> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_node_value_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_node_value_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_node_value_Node(self_)
            };
            <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_node_value_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Node as WasmDescribe>::describe();
    <Option<&str> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `nodeValue` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn set_node_value(&self, node_value: Option<&str>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_node_value_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                node_value: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_node_value_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            node_value: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(node_value);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let node_value =
                    <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node_value);
                __widl_f_set_node_value_Node(self_, node_value)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_text_content_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Node as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `textContent` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn text_content(&self) -> Option<String> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_text_content_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_text_content_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_text_content_Node(self_)
            };
            <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_text_content_Node() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Node as WasmDescribe>::describe();
    <Option<&str> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Node {
    #[allow(bad_style)]
    #[doc = "The `textContent` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)\n\n*This API requires the following crate features to be activated: `Node`*"]
    #[allow(clippy::all)]
    pub fn set_text_content(&self, text_content: Option<&str>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_text_content_Node(
                self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                text_content: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_text_content_Node(
            self_: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            text_content: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(text_content);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let text_content =
                    <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(text_content);
                __widl_f_set_text_content_Node(self_, text_content)
            };
            ()
        }
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `WebGLBuffer` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer)\n\n*This API requires the following crate features to be activated: `WebGlBuffer`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct WebGlBuffer {
    obj: Object,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_WebGlBuffer: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for WebGlBuffer {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for WebGlBuffer {
        type Target = Object;
        #[inline]
        fn deref(&self) -> &Object {
            &self.obj
        }
    }
    impl IntoWasmAbi for WebGlBuffer {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for WebGlBuffer {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a WebGlBuffer {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for WebGlBuffer {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            WebGlBuffer {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for WebGlBuffer {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a WebGlBuffer {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for WebGlBuffer {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<WebGlBuffer>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(WebGlBuffer {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for WebGlBuffer {
        #[inline]
        fn from(obj: JsValue) -> WebGlBuffer {
            WebGlBuffer { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for WebGlBuffer {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<WebGlBuffer> for WebGlBuffer {
        #[inline]
        fn as_ref(&self) -> &WebGlBuffer {
            self
        }
    }
    impl From<WebGlBuffer> for JsValue {
        #[inline]
        fn from(obj: WebGlBuffer) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for WebGlBuffer {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_WebGLBuffer(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_WebGLBuffer(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_WebGLBuffer(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            WebGlBuffer { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const WebGlBuffer) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<WebGlBuffer> for Object {
    #[inline]
    fn from(obj: WebGlBuffer) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for WebGlBuffer {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `WebGLProgram` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram)\n\n*This API requires the following crate features to be activated: `WebGlProgram`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct WebGlProgram {
    obj: Object,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_WebGlProgram: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for WebGlProgram {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for WebGlProgram {
        type Target = Object;
        #[inline]
        fn deref(&self) -> &Object {
            &self.obj
        }
    }
    impl IntoWasmAbi for WebGlProgram {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for WebGlProgram {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a WebGlProgram {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for WebGlProgram {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            WebGlProgram {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for WebGlProgram {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a WebGlProgram {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for WebGlProgram {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<WebGlProgram>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(WebGlProgram {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for WebGlProgram {
        #[inline]
        fn from(obj: JsValue) -> WebGlProgram {
            WebGlProgram { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for WebGlProgram {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<WebGlProgram> for WebGlProgram {
        #[inline]
        fn as_ref(&self) -> &WebGlProgram {
            self
        }
    }
    impl From<WebGlProgram> for JsValue {
        #[inline]
        fn from(obj: WebGlProgram) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for WebGlProgram {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_WebGLProgram(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_WebGLProgram(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_WebGLProgram(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            WebGlProgram { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const WebGlProgram) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<WebGlProgram> for Object {
    #[inline]
    fn from(obj: WebGlProgram) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for WebGlProgram {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `WebGLRenderingContext` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct WebGlRenderingContext {
    obj: Object,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_WebGlRenderingContext: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for WebGlRenderingContext {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for WebGlRenderingContext {
        type Target = Object;
        #[inline]
        fn deref(&self) -> &Object {
            &self.obj
        }
    }
    impl IntoWasmAbi for WebGlRenderingContext {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for WebGlRenderingContext {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a WebGlRenderingContext {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for WebGlRenderingContext {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            WebGlRenderingContext {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for WebGlRenderingContext {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a WebGlRenderingContext {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for WebGlRenderingContext {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<WebGlRenderingContext>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(WebGlRenderingContext {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for WebGlRenderingContext {
        #[inline]
        fn from(obj: JsValue) -> WebGlRenderingContext {
            WebGlRenderingContext { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for WebGlRenderingContext {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<WebGlRenderingContext> for WebGlRenderingContext {
        #[inline]
        fn as_ref(&self) -> &WebGlRenderingContext {
            self
        }
    }
    impl From<WebGlRenderingContext> for JsValue {
        #[inline]
        fn from(obj: WebGlRenderingContext) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for WebGlRenderingContext {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_WebGLRenderingContext(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_WebGLRenderingContext(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_WebGLRenderingContext(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            WebGlRenderingContext { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const WebGlRenderingContext) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<WebGlRenderingContext> for Object {
    #[inline]
    fn from(obj: WebGlRenderingContext) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for WebGlRenderingContext {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_buffer_data_with_i32_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `bufferData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn buffer_data_with_i32(&self, target: u32, size: i32, usage: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_buffer_data_with_i32_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                size: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                usage: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_buffer_data_with_i32_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            size: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            usage: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(size);
            drop(usage);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let size = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(size);
                let usage = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(usage);
                __widl_f_buffer_data_with_i32_WebGLRenderingContext(self_, target, size, usage)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_buffer_data_with_f64_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `bufferData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn buffer_data_with_f64(&self, target: u32, size: f64, usage: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_buffer_data_with_f64_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                size: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                usage: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_buffer_data_with_f64_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            size: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            usage: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(size);
            drop(usage);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let size = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(size);
                let usage = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(usage);
                __widl_f_buffer_data_with_f64_WebGLRenderingContext(self_, target, size, usage)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_buffer_data_with_opt_array_buffer_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <Option<&::js_sys::ArrayBuffer> as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `bufferData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn buffer_data_with_opt_array_buffer(
        &self,
        target: u32,
        data: Option<&::js_sys::ArrayBuffer>,
        usage: u32,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_buffer_data_with_opt_array_buffer_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <Option<&::js_sys::ArrayBuffer> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                usage: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_buffer_data_with_opt_array_buffer_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <Option<&::js_sys::ArrayBuffer> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            usage: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(data);
            drop(usage);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let data = < Option < & :: js_sys :: ArrayBuffer > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data ) ;
                let usage = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(usage);
                __widl_f_buffer_data_with_opt_array_buffer_WebGLRenderingContext(
                    self_, target, data, usage,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_buffer_data_with_array_buffer_view_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <&::js_sys::Object as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `bufferData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn buffer_data_with_array_buffer_view(
        &self,
        target: u32,
        data: &::js_sys::Object,
        usage: u32,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_buffer_data_with_array_buffer_view_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                usage: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_buffer_data_with_array_buffer_view_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            usage: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(data);
            drop(usage);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let data =
                    <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                let usage = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(usage);
                __widl_f_buffer_data_with_array_buffer_view_WebGLRenderingContext(
                    self_, target, data, usage,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_buffer_data_with_u8_array_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <&[u8] as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `bufferData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn buffer_data_with_u8_array(&self, target: u32, data: &[u8], usage: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_buffer_data_with_u8_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&[u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                usage: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_buffer_data_with_u8_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&[u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            usage: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(data);
            drop(usage);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let data = <&[u8] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                let usage = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(usage);
                __widl_f_buffer_data_with_u8_array_WebGLRenderingContext(self_, target, data, usage)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_buffer_sub_data_with_i32_and_array_buffer_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::js_sys::ArrayBuffer as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `bufferSubData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn buffer_sub_data_with_i32_and_array_buffer(
        &self,
        target: u32,
        offset: i32,
        data: &::js_sys::ArrayBuffer,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_buffer_sub_data_with_i32_and_array_buffer_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                offset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&::js_sys::ArrayBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_buffer_sub_data_with_i32_and_array_buffer_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            offset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::js_sys::ArrayBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(offset);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let offset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(offset);
                let data =
                    <&::js_sys::ArrayBuffer as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_buffer_sub_data_with_i32_and_array_buffer_WebGLRenderingContext(
                    self_, target, offset, data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_buffer_sub_data_with_f64_and_array_buffer_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <&::js_sys::ArrayBuffer as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `bufferSubData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn buffer_sub_data_with_f64_and_array_buffer(
        &self,
        target: u32,
        offset: f64,
        data: &::js_sys::ArrayBuffer,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_buffer_sub_data_with_f64_and_array_buffer_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                offset: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&::js_sys::ArrayBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_buffer_sub_data_with_f64_and_array_buffer_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            offset: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::js_sys::ArrayBuffer as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(offset);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let offset = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(offset);
                let data =
                    <&::js_sys::ArrayBuffer as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_buffer_sub_data_with_f64_and_array_buffer_WebGLRenderingContext(
                    self_, target, offset, data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_buffer_sub_data_with_i32_and_array_buffer_view_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::js_sys::Object as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `bufferSubData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn buffer_sub_data_with_i32_and_array_buffer_view(
        &self,
        target: u32,
        offset: i32,
        data: &::js_sys::Object,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_buffer_sub_data_with_i32_and_array_buffer_view_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                offset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_buffer_sub_data_with_i32_and_array_buffer_view_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            offset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(offset);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let offset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(offset);
                let data =
                    <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_buffer_sub_data_with_i32_and_array_buffer_view_WebGLRenderingContext(
                    self_, target, offset, data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_buffer_sub_data_with_f64_and_array_buffer_view_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <&::js_sys::Object as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `bufferSubData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn buffer_sub_data_with_f64_and_array_buffer_view(
        &self,
        target: u32,
        offset: f64,
        data: &::js_sys::Object,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_buffer_sub_data_with_f64_and_array_buffer_view_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                offset: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_buffer_sub_data_with_f64_and_array_buffer_view_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            offset: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(offset);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let offset = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(offset);
                let data =
                    <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_buffer_sub_data_with_f64_and_array_buffer_view_WebGLRenderingContext(
                    self_, target, offset, data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_buffer_sub_data_with_i32_and_u8_array_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&[u8] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `bufferSubData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn buffer_sub_data_with_i32_and_u8_array(&self, target: u32, offset: i32, data: &[u8]) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_buffer_sub_data_with_i32_and_u8_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                offset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&[u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_buffer_sub_data_with_i32_and_u8_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            offset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&[u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(offset);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let offset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(offset);
                let data = <&[u8] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_buffer_sub_data_with_i32_and_u8_array_WebGLRenderingContext(
                    self_, target, offset, data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_buffer_sub_data_with_f64_and_u8_array_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <&[u8] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `bufferSubData()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn buffer_sub_data_with_f64_and_u8_array(&self, target: u32, offset: f64, data: &[u8]) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_buffer_sub_data_with_f64_and_u8_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                offset: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&[u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_buffer_sub_data_with_f64_and_u8_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            offset: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&[u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(offset);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let offset = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(offset);
                let data = <&[u8] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_buffer_sub_data_with_f64_and_u8_array_WebGLRenderingContext(
                    self_, target, offset, data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_commit_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `commit()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/commit)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn commit(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_commit_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_commit_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_commit_WebGLRenderingContext(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_compressed_tex_image_2d_with_array_buffer_view_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::js_sys::Object as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `compressedTexImage2D()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexImage2D)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn compressed_tex_image_2d_with_array_buffer_view(
        &self,
        target: u32,
        level: i32,
        internalformat: u32,
        width: i32,
        height: i32,
        border: i32,
        data: &::js_sys::Object,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_compressed_tex_image_2d_with_array_buffer_view_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                internalformat: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                border: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_compressed_tex_image_2d_with_array_buffer_view_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            internalformat: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            border: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(level);
            drop(internalformat);
            drop(width);
            drop(height);
            drop(border);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let level = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(level);
                let internalformat =
                    <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(internalformat);
                let width = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                let height = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                let border = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(border);
                let data =
                    <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_compressed_tex_image_2d_with_array_buffer_view_WebGLRenderingContext(
                    self_,
                    target,
                    level,
                    internalformat,
                    width,
                    height,
                    border,
                    data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_compressed_tex_image_2d_with_u8_array_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&[u8] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `compressedTexImage2D()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexImage2D)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn compressed_tex_image_2d_with_u8_array(
        &self,
        target: u32,
        level: i32,
        internalformat: u32,
        width: i32,
        height: i32,
        border: i32,
        data: &[u8],
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_compressed_tex_image_2d_with_u8_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                internalformat: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                border: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&[u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_compressed_tex_image_2d_with_u8_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            internalformat: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            border: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&[u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(level);
            drop(internalformat);
            drop(width);
            drop(height);
            drop(border);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let level = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(level);
                let internalformat =
                    <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(internalformat);
                let width = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                let height = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                let border = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(border);
                let data = <&[u8] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_compressed_tex_image_2d_with_u8_array_WebGLRenderingContext(
                    self_,
                    target,
                    level,
                    internalformat,
                    width,
                    height,
                    border,
                    data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_compressed_tex_sub_image_2d_with_array_buffer_view_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(9u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <&::js_sys::Object as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `compressedTexSubImage2D()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn compressed_tex_sub_image_2d_with_array_buffer_view(
        &self,
        target: u32,
        level: i32,
        xoffset: i32,
        yoffset: i32,
        width: i32,
        height: i32,
        format: u32,
        data: &::js_sys::Object,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_compressed_tex_sub_image_2d_with_array_buffer_view_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                xoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                yoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_compressed_tex_sub_image_2d_with_array_buffer_view_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            xoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            yoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(level);
            drop(xoffset);
            drop(yoffset);
            drop(width);
            drop(height);
            drop(format);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let level = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(level);
                let xoffset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(xoffset);
                let yoffset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(yoffset);
                let width = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                let height = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                let format = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(format);
                let data =
                    <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_compressed_tex_sub_image_2d_with_array_buffer_view_WebGLRenderingContext(
                    self_, target, level, xoffset, yoffset, width, height, format, data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_compressed_tex_sub_image_2d_with_u8_array_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(9u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <&mut [u8] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `compressedTexSubImage2D()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn compressed_tex_sub_image_2d_with_u8_array(
        &self,
        target: u32,
        level: i32,
        xoffset: i32,
        yoffset: i32,
        width: i32,
        height: i32,
        format: u32,
        data: &mut [u8],
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_compressed_tex_sub_image_2d_with_u8_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                xoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                yoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_compressed_tex_sub_image_2d_with_u8_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            xoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            yoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(level);
            drop(xoffset);
            drop(yoffset);
            drop(width);
            drop(height);
            drop(format);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let level = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(level);
                let xoffset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(xoffset);
                let yoffset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(yoffset);
                let width = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                let height = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                let format = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(format);
                let data = <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_compressed_tex_sub_image_2d_with_u8_array_WebGLRenderingContext(
                    self_, target, level, xoffset, yoffset, width, height, format, data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_read_pixels_with_opt_array_buffer_view_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <Option<&::js_sys::Object> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `readPixels()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn read_pixels_with_opt_array_buffer_view(
        &self,
        x: i32,
        y: i32,
        width: i32,
        height: i32,
        format: u32,
        type_: u32,
        pixels: Option<&::js_sys::Object>,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_read_pixels_with_opt_array_buffer_view_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pixels: <Option<&::js_sys::Object> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_read_pixels_with_opt_array_buffer_view_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pixels: <Option<&::js_sys::Object> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            drop(width);
            drop(height);
            drop(format);
            drop(type_);
            drop(pixels);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                let width = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                let height = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                let format = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(format);
                let type_ = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                let pixels =
                    <Option<&::js_sys::Object> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        pixels,
                    );
                __widl_f_read_pixels_with_opt_array_buffer_view_WebGLRenderingContext(
                    self_, x, y, width, height, format, type_, pixels,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_read_pixels_with_opt_u8_array_WebGLRenderingContext()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <Option<&mut [u8]> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `readPixels()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn read_pixels_with_opt_u8_array(
        &self,
        x: i32,
        y: i32,
        width: i32,
        height: i32,
        format: u32,
        type_: u32,
        pixels: Option<&mut [u8]>,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_read_pixels_with_opt_u8_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pixels: <Option<&mut [u8]> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_read_pixels_with_opt_u8_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pixels: <Option<&mut [u8]> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            drop(width);
            drop(height);
            drop(format);
            drop(type_);
            drop(pixels);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                let width = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                let height = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                let format = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(format);
                let type_ = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                let pixels =
                    <Option<&mut [u8]> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pixels);
                __widl_f_read_pixels_with_opt_u8_array_WebGLRenderingContext(
                    self_, x, y, width, height, format, type_, pixels,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_tex_image_2d_with_i32_and_i32_and_i32_and_format_and_type_and_opt_array_buffer_view_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(10u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <Option<&::js_sys::Object> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `texImage2D()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn tex_image_2d_with_i32_and_i32_and_i32_and_format_and_type_and_opt_array_buffer_view(
        &self,
        target: u32,
        level: i32,
        internalformat: i32,
        width: i32,
        height: i32,
        border: i32,
        format: u32,
        type_: u32,
        pixels: Option<&::js_sys::Object>,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_tex_image_2d_with_i32_and_i32_and_i32_and_format_and_type_and_opt_array_buffer_view_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                internalformat: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                border: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pixels: <Option<&::js_sys::Object> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_tex_image_2d_with_i32_and_i32_and_i32_and_format_and_type_and_opt_array_buffer_view_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            internalformat: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            border: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pixels: <Option<&::js_sys::Object> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(level);
            drop(internalformat);
            drop(width);
            drop(height);
            drop(border);
            drop(format);
            drop(type_);
            drop(pixels);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let level = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(level);
                let internalformat =
                    <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(internalformat);
                let width = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                let height = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                let border = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(border);
                let format = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(format);
                let type_ = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                let pixels =
                    <Option<&::js_sys::Object> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        pixels,
                    );
                __widl_f_tex_image_2d_with_i32_and_i32_and_i32_and_format_and_type_and_opt_array_buffer_view_WebGLRenderingContext ( self_ , target , level , internalformat , width , height , border , format , type_ , pixels )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_tex_image_2d_with_i32_and_i32_and_i32_and_format_and_type_and_opt_u8_array_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(10u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <Option<&[u8]> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `texImage2D()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn tex_image_2d_with_i32_and_i32_and_i32_and_format_and_type_and_opt_u8_array(
        &self,
        target: u32,
        level: i32,
        internalformat: i32,
        width: i32,
        height: i32,
        border: i32,
        format: u32,
        type_: u32,
        pixels: Option<&[u8]>,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_tex_image_2d_with_i32_and_i32_and_i32_and_format_and_type_and_opt_u8_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                internalformat: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                border: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pixels: <Option<&[u8]> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_tex_image_2d_with_i32_and_i32_and_i32_and_format_and_type_and_opt_u8_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            internalformat: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            border: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pixels: <Option<&[u8]> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(level);
            drop(internalformat);
            drop(width);
            drop(height);
            drop(border);
            drop(format);
            drop(type_);
            drop(pixels);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let level = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(level);
                let internalformat =
                    <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(internalformat);
                let width = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                let height = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                let border = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(border);
                let format = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(format);
                let type_ = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                let pixels =
                    <Option<&[u8]> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pixels);
                __widl_f_tex_image_2d_with_i32_and_i32_and_i32_and_format_and_type_and_opt_u8_array_WebGLRenderingContext ( self_ , target , level , internalformat , width , height , border , format , type_ , pixels )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_tex_image_2d_with_u32_and_u32_and_canvas_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `texImage2D()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn tex_image_2d_with_u32_and_u32_and_canvas(
        &self,
        target: u32,
        level: i32,
        internalformat: i32,
        format: u32,
        type_: u32,
        canvas: &HtmlCanvasElement,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_tex_image_2d_with_u32_and_u32_and_canvas_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                internalformat: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                canvas: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_tex_image_2d_with_u32_and_u32_and_canvas_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            internalformat: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            canvas: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(level);
            drop(internalformat);
            drop(format);
            drop(type_);
            drop(canvas);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let level = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(level);
                let internalformat =
                    <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(internalformat);
                let format = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(format);
                let type_ = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                let canvas =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(canvas);
                __widl_f_tex_image_2d_with_u32_and_u32_and_canvas_WebGLRenderingContext(
                    self_,
                    target,
                    level,
                    internalformat,
                    format,
                    type_,
                    canvas,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_tex_sub_image_2d_with_i32_and_i32_and_u32_and_type_and_opt_array_buffer_view_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(10u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <Option<&::js_sys::Object> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `texSubImage2D()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texSubImage2D)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn tex_sub_image_2d_with_i32_and_i32_and_u32_and_type_and_opt_array_buffer_view(
        &self,
        target: u32,
        level: i32,
        xoffset: i32,
        yoffset: i32,
        width: i32,
        height: i32,
        format: u32,
        type_: u32,
        pixels: Option<&::js_sys::Object>,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_tex_sub_image_2d_with_i32_and_i32_and_u32_and_type_and_opt_array_buffer_view_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                xoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                yoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pixels: <Option<&::js_sys::Object> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_tex_sub_image_2d_with_i32_and_i32_and_u32_and_type_and_opt_array_buffer_view_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            xoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            yoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pixels: <Option<&::js_sys::Object> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(level);
            drop(xoffset);
            drop(yoffset);
            drop(width);
            drop(height);
            drop(format);
            drop(type_);
            drop(pixels);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let level = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(level);
                let xoffset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(xoffset);
                let yoffset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(yoffset);
                let width = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                let height = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                let format = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(format);
                let type_ = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                let pixels =
                    <Option<&::js_sys::Object> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        pixels,
                    );
                __widl_f_tex_sub_image_2d_with_i32_and_i32_and_u32_and_type_and_opt_array_buffer_view_WebGLRenderingContext ( self_ , target , level , xoffset , yoffset , width , height , format , type_ , pixels )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_tex_sub_image_2d_with_i32_and_i32_and_u32_and_type_and_opt_u8_array_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(10u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <Option<&[u8]> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `texSubImage2D()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texSubImage2D)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn tex_sub_image_2d_with_i32_and_i32_and_u32_and_type_and_opt_u8_array(
        &self,
        target: u32,
        level: i32,
        xoffset: i32,
        yoffset: i32,
        width: i32,
        height: i32,
        format: u32,
        type_: u32,
        pixels: Option<&[u8]>,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_tex_sub_image_2d_with_i32_and_i32_and_u32_and_type_and_opt_u8_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                xoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                yoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pixels: <Option<&[u8]> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_tex_sub_image_2d_with_i32_and_i32_and_u32_and_type_and_opt_u8_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            xoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            yoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pixels: <Option<&[u8]> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(level);
            drop(xoffset);
            drop(yoffset);
            drop(width);
            drop(height);
            drop(format);
            drop(type_);
            drop(pixels);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let level = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(level);
                let xoffset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(xoffset);
                let yoffset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(yoffset);
                let width = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                let height = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                let format = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(format);
                let type_ = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                let pixels =
                    <Option<&[u8]> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pixels);
                __widl_f_tex_sub_image_2d_with_i32_and_i32_and_u32_and_type_and_opt_u8_array_WebGLRenderingContext ( self_ , target , level , xoffset , yoffset , width , height , format , type_ , pixels )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_tex_sub_image_2d_with_u32_and_u32_and_canvas_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `texSubImage2D()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texSubImage2D)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn tex_sub_image_2d_with_u32_and_u32_and_canvas(
        &self,
        target: u32,
        level: i32,
        xoffset: i32,
        yoffset: i32,
        format: u32,
        type_: u32,
        canvas: &HtmlCanvasElement,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_tex_sub_image_2d_with_u32_and_u32_and_canvas_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                xoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                yoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                canvas: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_tex_sub_image_2d_with_u32_and_u32_and_canvas_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            xoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            yoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            format: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            canvas: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(level);
            drop(xoffset);
            drop(yoffset);
            drop(format);
            drop(type_);
            drop(canvas);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let level = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(level);
                let xoffset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(xoffset);
                let yoffset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(yoffset);
                let format = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(format);
                let type_ = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                let canvas =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(canvas);
                __widl_f_tex_sub_image_2d_with_u32_and_u32_and_canvas_WebGLRenderingContext(
                    self_, target, level, xoffset, yoffset, format, type_, canvas,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform1fv_with_f32_array_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&[f32] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform1fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform1fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform1fv_with_f32_array(&self, location: Option<&WebGlUniformLocation>, data: &[f32]) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform1fv_with_f32_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform1fv_with_f32_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data = <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_uniform1fv_with_f32_array_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform1fv_with_f32_sequence_WebGLRenderingContext()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform1fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform1fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform1fv_with_f32_sequence(
        &self,
        location: Option<&WebGlUniformLocation>,
        data: &::wasm_bindgen::JsValue,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform1fv_with_f32_sequence_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform1fv_with_f32_sequence_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        data,
                    );
                __widl_f_uniform1fv_with_f32_sequence_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform1iv_with_i32_array_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&[i32] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform1iv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform1iv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform1iv_with_i32_array(&self, location: Option<&WebGlUniformLocation>, data: &[i32]) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform1iv_with_i32_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&[i32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform1iv_with_i32_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&[i32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data = <&[i32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_uniform1iv_with_i32_array_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform1iv_with_i32_sequence_WebGLRenderingContext()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform1iv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform1iv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform1iv_with_i32_sequence(
        &self,
        location: Option<&WebGlUniformLocation>,
        data: &::wasm_bindgen::JsValue,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform1iv_with_i32_sequence_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform1iv_with_i32_sequence_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        data,
                    );
                __widl_f_uniform1iv_with_i32_sequence_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform2fv_with_f32_array_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&[f32] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform2fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform2fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform2fv_with_f32_array(&self, location: Option<&WebGlUniformLocation>, data: &[f32]) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform2fv_with_f32_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform2fv_with_f32_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data = <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_uniform2fv_with_f32_array_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform2fv_with_f32_sequence_WebGLRenderingContext()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform2fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform2fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform2fv_with_f32_sequence(
        &self,
        location: Option<&WebGlUniformLocation>,
        data: &::wasm_bindgen::JsValue,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform2fv_with_f32_sequence_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform2fv_with_f32_sequence_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        data,
                    );
                __widl_f_uniform2fv_with_f32_sequence_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform2iv_with_i32_array_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&[i32] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform2iv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform2iv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform2iv_with_i32_array(&self, location: Option<&WebGlUniformLocation>, data: &[i32]) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform2iv_with_i32_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&[i32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform2iv_with_i32_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&[i32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data = <&[i32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_uniform2iv_with_i32_array_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform2iv_with_i32_sequence_WebGLRenderingContext()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform2iv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform2iv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform2iv_with_i32_sequence(
        &self,
        location: Option<&WebGlUniformLocation>,
        data: &::wasm_bindgen::JsValue,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform2iv_with_i32_sequence_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform2iv_with_i32_sequence_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        data,
                    );
                __widl_f_uniform2iv_with_i32_sequence_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform3fv_with_f32_array_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&[f32] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform3fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform3fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform3fv_with_f32_array(&self, location: Option<&WebGlUniformLocation>, data: &[f32]) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform3fv_with_f32_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform3fv_with_f32_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data = <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_uniform3fv_with_f32_array_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform3fv_with_f32_sequence_WebGLRenderingContext()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform3fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform3fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform3fv_with_f32_sequence(
        &self,
        location: Option<&WebGlUniformLocation>,
        data: &::wasm_bindgen::JsValue,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform3fv_with_f32_sequence_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform3fv_with_f32_sequence_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        data,
                    );
                __widl_f_uniform3fv_with_f32_sequence_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform3iv_with_i32_array_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&[i32] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform3iv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform3iv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform3iv_with_i32_array(&self, location: Option<&WebGlUniformLocation>, data: &[i32]) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform3iv_with_i32_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&[i32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform3iv_with_i32_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&[i32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data = <&[i32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_uniform3iv_with_i32_array_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform3iv_with_i32_sequence_WebGLRenderingContext()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform3iv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform3iv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform3iv_with_i32_sequence(
        &self,
        location: Option<&WebGlUniformLocation>,
        data: &::wasm_bindgen::JsValue,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform3iv_with_i32_sequence_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform3iv_with_i32_sequence_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        data,
                    );
                __widl_f_uniform3iv_with_i32_sequence_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform4fv_with_f32_array_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&[f32] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform4fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform4fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform4fv_with_f32_array(&self, location: Option<&WebGlUniformLocation>, data: &[f32]) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform4fv_with_f32_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform4fv_with_f32_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data = <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_uniform4fv_with_f32_array_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform4fv_with_f32_sequence_WebGLRenderingContext()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform4fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform4fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform4fv_with_f32_sequence(
        &self,
        location: Option<&WebGlUniformLocation>,
        data: &::wasm_bindgen::JsValue,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform4fv_with_f32_sequence_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform4fv_with_f32_sequence_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        data,
                    );
                __widl_f_uniform4fv_with_f32_sequence_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform4iv_with_i32_array_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&[i32] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform4iv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform4iv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform4iv_with_i32_array(&self, location: Option<&WebGlUniformLocation>, data: &[i32]) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform4iv_with_i32_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&[i32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform4iv_with_i32_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&[i32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data = <&[i32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_uniform4iv_with_i32_array_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform4iv_with_i32_sequence_WebGLRenderingContext()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform4iv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform4iv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform4iv_with_i32_sequence(
        &self,
        location: Option<&WebGlUniformLocation>,
        data: &::wasm_bindgen::JsValue,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform4iv_with_i32_sequence_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform4iv_with_i32_sequence_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let data =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        data,
                    );
                __widl_f_uniform4iv_with_i32_sequence_WebGLRenderingContext(self_, location, data)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform_matrix2fv_with_f32_array_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <&[f32] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniformMatrix2fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix2fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform_matrix2fv_with_f32_array(
        &self,
        location: Option<&WebGlUniformLocation>,
        transpose: bool,
        data: &[f32],
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform_matrix2fv_with_f32_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                transpose: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform_matrix2fv_with_f32_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            transpose: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(transpose);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let transpose = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(transpose);
                let data = <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_uniform_matrix2fv_with_f32_array_WebGLRenderingContext(
                    self_, location, transpose, data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform_matrix2fv_with_f32_sequence_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniformMatrix2fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix2fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform_matrix2fv_with_f32_sequence(
        &self,
        location: Option<&WebGlUniformLocation>,
        transpose: bool,
        data: &::wasm_bindgen::JsValue,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform_matrix2fv_with_f32_sequence_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                transpose: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform_matrix2fv_with_f32_sequence_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            transpose: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(transpose);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let transpose = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(transpose);
                let data =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        data,
                    );
                __widl_f_uniform_matrix2fv_with_f32_sequence_WebGLRenderingContext(
                    self_, location, transpose, data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform_matrix3fv_with_f32_array_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <&[f32] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniformMatrix3fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix3fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform_matrix3fv_with_f32_array(
        &self,
        location: Option<&WebGlUniformLocation>,
        transpose: bool,
        data: &[f32],
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform_matrix3fv_with_f32_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                transpose: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform_matrix3fv_with_f32_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            transpose: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(transpose);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let transpose = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(transpose);
                let data = <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_uniform_matrix3fv_with_f32_array_WebGLRenderingContext(
                    self_, location, transpose, data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform_matrix3fv_with_f32_sequence_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniformMatrix3fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix3fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform_matrix3fv_with_f32_sequence(
        &self,
        location: Option<&WebGlUniformLocation>,
        transpose: bool,
        data: &::wasm_bindgen::JsValue,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform_matrix3fv_with_f32_sequence_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                transpose: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform_matrix3fv_with_f32_sequence_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            transpose: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(transpose);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let transpose = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(transpose);
                let data =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        data,
                    );
                __widl_f_uniform_matrix3fv_with_f32_sequence_WebGLRenderingContext(
                    self_, location, transpose, data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform_matrix4fv_with_f32_array_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <&[f32] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniformMatrix4fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix4fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform_matrix4fv_with_f32_array(
        &self,
        location: Option<&WebGlUniformLocation>,
        transpose: bool,
        data: &[f32],
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform_matrix4fv_with_f32_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                transpose: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform_matrix4fv_with_f32_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            transpose: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(transpose);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let transpose = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(transpose);
                let data = <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                __widl_f_uniform_matrix4fv_with_f32_array_WebGLRenderingContext(
                    self_, location, transpose, data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform_matrix4fv_with_f32_sequence_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniformMatrix4fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix4fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform_matrix4fv_with_f32_sequence(
        &self,
        location: Option<&WebGlUniformLocation>,
        transpose: bool,
        data: &::wasm_bindgen::JsValue,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform_matrix4fv_with_f32_sequence_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                transpose: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform_matrix4fv_with_f32_sequence_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            transpose: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(transpose);
            drop(data);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let transpose = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(transpose);
                let data =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        data,
                    );
                __widl_f_uniform_matrix4fv_with_f32_sequence_WebGLRenderingContext(
                    self_, location, transpose, data,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_active_texture_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `activeTexture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/activeTexture)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn active_texture(&self, texture: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_active_texture_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                texture: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_active_texture_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            texture: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(texture);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let texture = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(texture);
                __widl_f_active_texture_WebGLRenderingContext(self_, texture)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_attach_shader_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlProgram as WasmDescribe>::describe();
    <&WebGlShader as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `attachShader()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/attachShader)\n\n*This API requires the following crate features to be activated: `WebGlProgram`, `WebGlRenderingContext`, `WebGlShader`*"]
    #[allow(clippy::all)]
    pub fn attach_shader(&self, program: &WebGlProgram, shader: &WebGlShader) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_attach_shader_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                shader: <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_attach_shader_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            shader: <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(program);
            drop(shader);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let program =
                    <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::into_abi(program);
                let shader = <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::into_abi(shader);
                __widl_f_attach_shader_WebGLRenderingContext(self_, program, shader)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_bind_attrib_location_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlProgram as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `bindAttribLocation()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindAttribLocation)\n\n*This API requires the following crate features to be activated: `WebGlProgram`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn bind_attrib_location(&self, program: &WebGlProgram, index: u32, name: &str) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_bind_attrib_location_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                index: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_bind_attrib_location_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            index: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(program);
            drop(index);
            drop(name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let program =
                    <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::into_abi(program);
                let index = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(index);
                let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                __widl_f_bind_attrib_location_WebGLRenderingContext(self_, program, index, name)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_bind_buffer_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <Option<&WebGlBuffer> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `bindBuffer()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindBuffer)\n\n*This API requires the following crate features to be activated: `WebGlBuffer`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn bind_buffer(&self, target: u32, buffer: Option<&WebGlBuffer>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_bind_buffer_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                buffer: <Option<&WebGlBuffer> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_bind_buffer_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            buffer: <Option<&WebGlBuffer> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(buffer);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let buffer =
                    <Option<&WebGlBuffer> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(buffer);
                __widl_f_bind_buffer_WebGLRenderingContext(self_, target, buffer)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_bind_texture_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <Option<&WebGlTexture> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `bindTexture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindTexture)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlTexture`*"]
    #[allow(clippy::all)]
    pub fn bind_texture(&self, target: u32, texture: Option<&WebGlTexture>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_bind_texture_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                texture: <Option<&WebGlTexture> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_bind_texture_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            texture: <Option<&WebGlTexture> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(texture);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let texture =
                    <Option<&WebGlTexture> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        texture,
                    );
                __widl_f_bind_texture_WebGLRenderingContext(self_, target, texture)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_blend_color_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `blendColor()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendColor)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn blend_color(&self, red: f32, green: f32, blue: f32, alpha: f32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_blend_color_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                red: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                green: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                blue: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                alpha: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_blend_color_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            red: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            green: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            blue: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            alpha: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(red);
            drop(green);
            drop(blue);
            drop(alpha);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let red = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(red);
                let green = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(green);
                let blue = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(blue);
                let alpha = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(alpha);
                __widl_f_blend_color_WebGLRenderingContext(self_, red, green, blue, alpha)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_blend_equation_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `blendEquation()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendEquation)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn blend_equation(&self, mode: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_blend_equation_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                mode: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_blend_equation_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            mode: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(mode);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let mode = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(mode);
                __widl_f_blend_equation_WebGLRenderingContext(self_, mode)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_blend_equation_separate_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `blendEquationSeparate()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendEquationSeparate)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn blend_equation_separate(&self, mode_rgb: u32, mode_alpha: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_blend_equation_separate_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                mode_rgb: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                mode_alpha: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_blend_equation_separate_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            mode_rgb: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            mode_alpha: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(mode_rgb);
            drop(mode_alpha);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let mode_rgb = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(mode_rgb);
                let mode_alpha = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(mode_alpha);
                __widl_f_blend_equation_separate_WebGLRenderingContext(self_, mode_rgb, mode_alpha)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_blend_func_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `blendFunc()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFunc)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn blend_func(&self, sfactor: u32, dfactor: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_blend_func_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                sfactor: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                dfactor: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_blend_func_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            sfactor: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            dfactor: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(sfactor);
            drop(dfactor);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let sfactor = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(sfactor);
                let dfactor = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(dfactor);
                __widl_f_blend_func_WebGLRenderingContext(self_, sfactor, dfactor)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_blend_func_separate_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `blendFuncSeparate()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFuncSeparate)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn blend_func_separate(&self, src_rgb: u32, dst_rgb: u32, src_alpha: u32, dst_alpha: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_blend_func_separate_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                src_rgb: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                dst_rgb: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                src_alpha: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                dst_alpha: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_blend_func_separate_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            src_rgb: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            dst_rgb: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            src_alpha: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            dst_alpha: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(src_rgb);
            drop(dst_rgb);
            drop(src_alpha);
            drop(dst_alpha);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let src_rgb = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(src_rgb);
                let dst_rgb = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(dst_rgb);
                let src_alpha = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(src_alpha);
                let dst_alpha = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(dst_alpha);
                __widl_f_blend_func_separate_WebGLRenderingContext(
                    self_, src_rgb, dst_rgb, src_alpha, dst_alpha,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_check_framebuffer_status_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `checkFramebufferStatus()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/checkFramebufferStatus)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn check_framebuffer_status(&self, target: u32) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_check_framebuffer_status_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_check_framebuffer_status_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(target);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                __widl_f_check_framebuffer_status_WebGLRenderingContext(self_, target)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_clear_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `clear()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clear)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn clear(&self, mask: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_clear_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                mask: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_clear_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            mask: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(mask);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let mask = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(mask);
                __widl_f_clear_WebGLRenderingContext(self_, mask)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_clear_color_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `clearColor()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clearColor)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn clear_color(&self, red: f32, green: f32, blue: f32, alpha: f32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_clear_color_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                red: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                green: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                blue: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                alpha: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_clear_color_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            red: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            green: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            blue: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            alpha: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(red);
            drop(green);
            drop(blue);
            drop(alpha);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let red = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(red);
                let green = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(green);
                let blue = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(blue);
                let alpha = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(alpha);
                __widl_f_clear_color_WebGLRenderingContext(self_, red, green, blue, alpha)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_clear_depth_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `clearDepth()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clearDepth)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn clear_depth(&self, depth: f32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_clear_depth_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                depth: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_clear_depth_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            depth: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(depth);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let depth = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(depth);
                __widl_f_clear_depth_WebGLRenderingContext(self_, depth)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_clear_stencil_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `clearStencil()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clearStencil)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn clear_stencil(&self, s: i32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_clear_stencil_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                s: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_clear_stencil_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            s: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(s);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let s = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(s);
                __widl_f_clear_stencil_WebGLRenderingContext(self_, s)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_color_mask_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `colorMask()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/colorMask)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn color_mask(&self, red: bool, green: bool, blue: bool, alpha: bool) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_color_mask_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                red: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                green: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                blue: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                alpha: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_color_mask_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            red: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            green: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            blue: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            alpha: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(red);
            drop(green);
            drop(blue);
            drop(alpha);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let red = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(red);
                let green = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(green);
                let blue = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(blue);
                let alpha = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(alpha);
                __widl_f_color_mask_WebGLRenderingContext(self_, red, green, blue, alpha)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_compile_shader_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlShader as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `compileShader()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compileShader)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlShader`*"]
    #[allow(clippy::all)]
    pub fn compile_shader(&self, shader: &WebGlShader) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_compile_shader_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                shader: <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_compile_shader_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            shader: <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(shader);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let shader = <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::into_abi(shader);
                __widl_f_compile_shader_WebGLRenderingContext(self_, shader)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_copy_tex_image_2d_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(9u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `copyTexImage2D()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/copyTexImage2D)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn copy_tex_image_2d(
        &self,
        target: u32,
        level: i32,
        internalformat: u32,
        x: i32,
        y: i32,
        width: i32,
        height: i32,
        border: i32,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_copy_tex_image_2d_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                internalformat: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                border: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_copy_tex_image_2d_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            internalformat: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            border: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(level);
            drop(internalformat);
            drop(x);
            drop(y);
            drop(width);
            drop(height);
            drop(border);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let level = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(level);
                let internalformat =
                    <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(internalformat);
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                let width = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                let height = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                let border = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(border);
                __widl_f_copy_tex_image_2d_WebGLRenderingContext(
                    self_,
                    target,
                    level,
                    internalformat,
                    x,
                    y,
                    width,
                    height,
                    border,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_copy_tex_sub_image_2d_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(9u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `copyTexSubImage2D()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/copyTexSubImage2D)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn copy_tex_sub_image_2d(
        &self,
        target: u32,
        level: i32,
        xoffset: i32,
        yoffset: i32,
        x: i32,
        y: i32,
        width: i32,
        height: i32,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_copy_tex_sub_image_2d_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                xoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                yoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_copy_tex_sub_image_2d_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            xoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            yoffset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(level);
            drop(xoffset);
            drop(yoffset);
            drop(x);
            drop(y);
            drop(width);
            drop(height);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let level = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(level);
                let xoffset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(xoffset);
                let yoffset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(yoffset);
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                let width = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                let height = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                __widl_f_copy_tex_sub_image_2d_WebGLRenderingContext(
                    self_, target, level, xoffset, yoffset, x, y, width, height,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_buffer_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<WebGlBuffer> as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `createBuffer()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createBuffer)\n\n*This API requires the following crate features to be activated: `WebGlBuffer`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn create_buffer(&self) -> Option<WebGlBuffer> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_buffer_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<WebGlBuffer> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_buffer_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<WebGlBuffer> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_create_buffer_WebGLRenderingContext(self_)
            };
            <Option<WebGlBuffer> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_program_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<WebGlProgram> as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `createProgram()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createProgram)\n\n*This API requires the following crate features to be activated: `WebGlProgram`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn create_program(&self) -> Option<WebGlProgram> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_program_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<WebGlProgram> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_program_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<WebGlProgram> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_create_program_WebGLRenderingContext(self_)
            };
            <Option<WebGlProgram> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_shader_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <Option<WebGlShader> as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `createShader()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createShader)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlShader`*"]
    #[allow(clippy::all)]
    pub fn create_shader(&self, type_: u32) -> Option<WebGlShader> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_shader_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<WebGlShader> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_shader_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<WebGlShader> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(type_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let type_ = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                __widl_f_create_shader_WebGLRenderingContext(self_, type_)
            };
            <Option<WebGlShader> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_texture_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<WebGlTexture> as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `createTexture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createTexture)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlTexture`*"]
    #[allow(clippy::all)]
    pub fn create_texture(&self) -> Option<WebGlTexture> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_texture_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<WebGlTexture> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_texture_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<WebGlTexture> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_create_texture_WebGLRenderingContext(self_)
            };
            <Option<WebGlTexture> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_cull_face_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `cullFace()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/cullFace)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn cull_face(&self, mode: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_cull_face_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                mode: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_cull_face_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            mode: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(mode);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let mode = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(mode);
                __widl_f_cull_face_WebGLRenderingContext(self_, mode)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_delete_buffer_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlBuffer> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `deleteBuffer()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteBuffer)\n\n*This API requires the following crate features to be activated: `WebGlBuffer`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn delete_buffer(&self, buffer: Option<&WebGlBuffer>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_delete_buffer_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                buffer: <Option<&WebGlBuffer> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_delete_buffer_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            buffer: <Option<&WebGlBuffer> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(buffer);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let buffer =
                    <Option<&WebGlBuffer> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(buffer);
                __widl_f_delete_buffer_WebGLRenderingContext(self_, buffer)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_delete_program_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlProgram> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `deleteProgram()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteProgram)\n\n*This API requires the following crate features to be activated: `WebGlProgram`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn delete_program(&self, program: Option<&WebGlProgram>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_delete_program_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                program: <Option<&WebGlProgram> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_delete_program_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            program: <Option<&WebGlProgram> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(program);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let program =
                    <Option<&WebGlProgram> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        program,
                    );
                __widl_f_delete_program_WebGLRenderingContext(self_, program)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_delete_shader_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlShader> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `deleteShader()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteShader)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlShader`*"]
    #[allow(clippy::all)]
    pub fn delete_shader(&self, shader: Option<&WebGlShader>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_delete_shader_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                shader: <Option<&WebGlShader> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_delete_shader_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            shader: <Option<&WebGlShader> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(shader);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let shader =
                    <Option<&WebGlShader> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(shader);
                __widl_f_delete_shader_WebGLRenderingContext(self_, shader)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_delete_texture_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlTexture> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `deleteTexture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteTexture)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlTexture`*"]
    #[allow(clippy::all)]
    pub fn delete_texture(&self, texture: Option<&WebGlTexture>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_delete_texture_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                texture: <Option<&WebGlTexture> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_delete_texture_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            texture: <Option<&WebGlTexture> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(texture);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let texture =
                    <Option<&WebGlTexture> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        texture,
                    );
                __widl_f_delete_texture_WebGLRenderingContext(self_, texture)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_depth_func_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `depthFunc()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthFunc)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn depth_func(&self, func: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_depth_func_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                func: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_depth_func_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            func: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(func);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let func = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(func);
                __widl_f_depth_func_WebGLRenderingContext(self_, func)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_depth_mask_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `depthMask()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthMask)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn depth_mask(&self, flag: bool) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_depth_mask_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                flag: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_depth_mask_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            flag: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(flag);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let flag = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(flag);
                __widl_f_depth_mask_WebGLRenderingContext(self_, flag)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_depth_range_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `depthRange()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthRange)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn depth_range(&self, z_near: f32, z_far: f32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_depth_range_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                z_near: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                z_far: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_depth_range_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            z_near: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            z_far: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(z_near);
            drop(z_far);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let z_near = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(z_near);
                let z_far = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(z_far);
                __widl_f_depth_range_WebGLRenderingContext(self_, z_near, z_far)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_detach_shader_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlProgram as WasmDescribe>::describe();
    <&WebGlShader as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `detachShader()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/detachShader)\n\n*This API requires the following crate features to be activated: `WebGlProgram`, `WebGlRenderingContext`, `WebGlShader`*"]
    #[allow(clippy::all)]
    pub fn detach_shader(&self, program: &WebGlProgram, shader: &WebGlShader) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_detach_shader_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                shader: <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_detach_shader_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            shader: <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(program);
            drop(shader);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let program =
                    <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::into_abi(program);
                let shader = <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::into_abi(shader);
                __widl_f_detach_shader_WebGLRenderingContext(self_, program, shader)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_disable_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `disable()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/disable)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn disable(&self, cap: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_disable_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                cap: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_disable_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            cap: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(cap);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let cap = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cap);
                __widl_f_disable_WebGLRenderingContext(self_, cap)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_disable_vertex_attrib_array_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `disableVertexAttribArray()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/disableVertexAttribArray)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn disable_vertex_attrib_array(&self, index: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_disable_vertex_attrib_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                index: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_disable_vertex_attrib_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            index: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(index);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let index = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(index);
                __widl_f_disable_vertex_attrib_array_WebGLRenderingContext(self_, index)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_draw_arrays_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `drawArrays()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawArrays)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn draw_arrays(&self, mode: u32, first: i32, count: i32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_draw_arrays_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                mode: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                first: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                count: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_draw_arrays_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            mode: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            first: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            count: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(mode);
            drop(first);
            drop(count);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let mode = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(mode);
                let first = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(first);
                let count = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(count);
                __widl_f_draw_arrays_WebGLRenderingContext(self_, mode, first, count)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_draw_elements_with_i32_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `drawElements()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn draw_elements_with_i32(&self, mode: u32, count: i32, type_: u32, offset: i32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_draw_elements_with_i32_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                mode: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                count: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                offset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_draw_elements_with_i32_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            mode: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            count: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            offset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(mode);
            drop(count);
            drop(type_);
            drop(offset);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let mode = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(mode);
                let count = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(count);
                let type_ = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                let offset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(offset);
                __widl_f_draw_elements_with_i32_WebGLRenderingContext(
                    self_, mode, count, type_, offset,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_draw_elements_with_f64_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `drawElements()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn draw_elements_with_f64(&self, mode: u32, count: i32, type_: u32, offset: f64) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_draw_elements_with_f64_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                mode: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                count: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                offset: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_draw_elements_with_f64_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            mode: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            count: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            offset: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(mode);
            drop(count);
            drop(type_);
            drop(offset);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let mode = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(mode);
                let count = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(count);
                let type_ = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                let offset = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(offset);
                __widl_f_draw_elements_with_f64_WebGLRenderingContext(
                    self_, mode, count, type_, offset,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_enable_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `enable()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/enable)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn enable(&self, cap: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_enable_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                cap: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_enable_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            cap: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(cap);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let cap = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cap);
                __widl_f_enable_WebGLRenderingContext(self_, cap)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_enable_vertex_attrib_array_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `enableVertexAttribArray()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/enableVertexAttribArray)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn enable_vertex_attrib_array(&self, index: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_enable_vertex_attrib_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                index: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_enable_vertex_attrib_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            index: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(index);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let index = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(index);
                __widl_f_enable_vertex_attrib_array_WebGLRenderingContext(self_, index)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_finish_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `finish()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/finish)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn finish(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_finish_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_finish_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_finish_WebGLRenderingContext(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_flush_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `flush()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/flush)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn flush(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_flush_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_flush_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_flush_WebGLRenderingContext(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_framebuffer_texture_2d_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <Option<&WebGlTexture> as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `framebufferTexture2D()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferTexture2D)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlTexture`*"]
    #[allow(clippy::all)]
    pub fn framebuffer_texture_2d(
        &self,
        target: u32,
        attachment: u32,
        textarget: u32,
        texture: Option<&WebGlTexture>,
        level: i32,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_framebuffer_texture_2d_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                attachment: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                textarget: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                texture: <Option<&WebGlTexture> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_framebuffer_texture_2d_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            attachment: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            textarget: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            texture: <Option<&WebGlTexture> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            level: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(attachment);
            drop(textarget);
            drop(texture);
            drop(level);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let attachment = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(attachment);
                let textarget = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(textarget);
                let texture =
                    <Option<&WebGlTexture> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        texture,
                    );
                let level = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(level);
                __widl_f_framebuffer_texture_2d_WebGLRenderingContext(
                    self_, target, attachment, textarget, texture, level,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_front_face_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `frontFace()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/frontFace)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn front_face(&self, mode: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_front_face_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                mode: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_front_face_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            mode: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(mode);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let mode = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(mode);
                __widl_f_front_face_WebGLRenderingContext(self_, mode)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_generate_mipmap_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `generateMipmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/generateMipmap)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn generate_mipmap(&self, target: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_generate_mipmap_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_generate_mipmap_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                __widl_f_generate_mipmap_WebGLRenderingContext(self_, target)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_attached_shaders_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlProgram as WasmDescribe>::describe();
    <Option<::js_sys::Array> as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getAttachedShaders()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getAttachedShaders)\n\n*This API requires the following crate features to be activated: `WebGlProgram`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn get_attached_shaders(&self, program: &WebGlProgram) -> Option<::js_sys::Array> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_attached_shaders_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Array> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_attached_shaders_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Array> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(program);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let program =
                    <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::into_abi(program);
                __widl_f_get_attached_shaders_WebGLRenderingContext(self_, program)
            };
            <Option<::js_sys::Array> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_attrib_location_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlProgram as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getAttribLocation()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getAttribLocation)\n\n*This API requires the following crate features to be activated: `WebGlProgram`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn get_attrib_location(&self, program: &WebGlProgram, name: &str) -> i32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_attrib_location_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_attrib_location_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(program);
            drop(name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let program =
                    <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::into_abi(program);
                let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                __widl_f_get_attrib_location_WebGLRenderingContext(self_, program, name)
            };
            <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_buffer_parameter_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getBufferParameter()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getBufferParameter)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn get_buffer_parameter(&self, target: u32, pname: u32) -> ::wasm_bindgen::JsValue {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_buffer_parameter_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_buffer_parameter_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(target);
            drop(pname);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let pname = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pname);
                __widl_f_get_buffer_parameter_WebGLRenderingContext(self_, target, pname)
            };
            <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_error_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getError()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getError)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn get_error(&self) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_error_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_error_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_get_error_WebGLRenderingContext(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_extension_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<::js_sys::Object> as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getExtension()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getExtension)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn get_extension(
        &self,
        name: &str,
    ) -> Result<Option<::js_sys::Object>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_extension_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_extension_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                __widl_f_get_extension_WebGLRenderingContext(self_, name)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_framebuffer_attachment_parameter_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getFramebufferAttachmentParameter()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getFramebufferAttachmentParameter)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn get_framebuffer_attachment_parameter(
        &self,
        target: u32,
        attachment: u32,
        pname: u32,
    ) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_framebuffer_attachment_parameter_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                attachment: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_framebuffer_attachment_parameter_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            attachment: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(target);
            drop(attachment);
            drop(pname);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let attachment = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(attachment);
                let pname = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pname);
                __widl_f_get_framebuffer_attachment_parameter_WebGLRenderingContext(
                    self_, target, attachment, pname,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_parameter_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getParameter()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getParameter)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn get_parameter(
        &self,
        pname: u32,
    ) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_parameter_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_parameter_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(pname);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let pname = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pname);
                __widl_f_get_parameter_WebGLRenderingContext(self_, pname)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_program_info_log_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlProgram as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getProgramInfoLog()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getProgramInfoLog)\n\n*This API requires the following crate features to be activated: `WebGlProgram`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn get_program_info_log(&self, program: &WebGlProgram) -> Option<String> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_program_info_log_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_program_info_log_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(program);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let program =
                    <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::into_abi(program);
                __widl_f_get_program_info_log_WebGLRenderingContext(self_, program)
            };
            <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_program_parameter_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlProgram as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getProgramParameter()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getProgramParameter)\n\n*This API requires the following crate features to be activated: `WebGlProgram`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn get_program_parameter(
        &self,
        program: &WebGlProgram,
        pname: u32,
    ) -> ::wasm_bindgen::JsValue {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_program_parameter_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_program_parameter_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(program);
            drop(pname);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let program =
                    <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::into_abi(program);
                let pname = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pname);
                __widl_f_get_program_parameter_WebGLRenderingContext(self_, program, pname)
            };
            <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_renderbuffer_parameter_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getRenderbufferParameter()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getRenderbufferParameter)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn get_renderbuffer_parameter(&self, target: u32, pname: u32) -> ::wasm_bindgen::JsValue {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_renderbuffer_parameter_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_renderbuffer_parameter_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(target);
            drop(pname);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let pname = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pname);
                __widl_f_get_renderbuffer_parameter_WebGLRenderingContext(self_, target, pname)
            };
            <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_shader_info_log_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlShader as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getShaderInfoLog()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderInfoLog)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlShader`*"]
    #[allow(clippy::all)]
    pub fn get_shader_info_log(&self, shader: &WebGlShader) -> Option<String> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_shader_info_log_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                shader: <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_shader_info_log_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            shader: <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(shader);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let shader = <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::into_abi(shader);
                __widl_f_get_shader_info_log_WebGLRenderingContext(self_, shader)
            };
            <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_shader_parameter_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlShader as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getShaderParameter()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderParameter)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlShader`*"]
    #[allow(clippy::all)]
    pub fn get_shader_parameter(
        &self,
        shader: &WebGlShader,
        pname: u32,
    ) -> ::wasm_bindgen::JsValue {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_shader_parameter_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                shader: <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_shader_parameter_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            shader: <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(shader);
            drop(pname);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let shader = <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::into_abi(shader);
                let pname = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pname);
                __widl_f_get_shader_parameter_WebGLRenderingContext(self_, shader, pname)
            };
            <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_shader_source_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlShader as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getShaderSource()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderSource)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlShader`*"]
    #[allow(clippy::all)]
    pub fn get_shader_source(&self, shader: &WebGlShader) -> Option<String> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_shader_source_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                shader: <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_shader_source_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            shader: <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(shader);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let shader = <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::into_abi(shader);
                __widl_f_get_shader_source_WebGLRenderingContext(self_, shader)
            };
            <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_supported_extensions_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<::js_sys::Array> as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getSupportedExtensions()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getSupportedExtensions)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn get_supported_extensions(&self) -> Option<::js_sys::Array> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_supported_extensions_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Array> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_supported_extensions_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Array> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_get_supported_extensions_WebGLRenderingContext(self_)
            };
            <Option<::js_sys::Array> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_tex_parameter_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getTexParameter()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getTexParameter)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn get_tex_parameter(&self, target: u32, pname: u32) -> ::wasm_bindgen::JsValue {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_tex_parameter_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_tex_parameter_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(target);
            drop(pname);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let pname = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pname);
                __widl_f_get_tex_parameter_WebGLRenderingContext(self_, target, pname)
            };
            <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_uniform_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlProgram as WasmDescribe>::describe();
    <&WebGlUniformLocation as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getUniform()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getUniform)\n\n*This API requires the following crate features to be activated: `WebGlProgram`, `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn get_uniform(
        &self,
        program: &WebGlProgram,
        location: &WebGlUniformLocation,
    ) -> ::wasm_bindgen::JsValue {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_uniform_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location: <&WebGlUniformLocation as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_uniform_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <&WebGlUniformLocation as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(program);
            drop(location);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let program =
                    <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::into_abi(program);
                let location =
                    <&WebGlUniformLocation as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                __widl_f_get_uniform_WebGLRenderingContext(self_, program, location)
            };
            <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_uniform_location_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlProgram as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<WebGlUniformLocation> as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getUniformLocation()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getUniformLocation)\n\n*This API requires the following crate features to be activated: `WebGlProgram`, `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn get_uniform_location(
        &self,
        program: &WebGlProgram,
        name: &str,
    ) -> Option<WebGlUniformLocation> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_uniform_location_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<WebGlUniformLocation> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_uniform_location_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<WebGlUniformLocation> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(program);
            drop(name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let program =
                    <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::into_abi(program);
                let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                __widl_f_get_uniform_location_WebGLRenderingContext(self_, program, name)
            };
            <Option<WebGlUniformLocation> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_vertex_attrib_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getVertexAttrib()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getVertexAttrib)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn get_vertex_attrib(
        &self,
        index: u32,
        pname: u32,
    ) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_vertex_attrib_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                index: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_vertex_attrib_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            index: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(index);
            drop(pname);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let index = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(index);
                let pname = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pname);
                __widl_f_get_vertex_attrib_WebGLRenderingContext(self_, index, pname)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_vertex_attrib_offset_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `getVertexAttribOffset()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getVertexAttribOffset)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn get_vertex_attrib_offset(&self, index: u32, pname: u32) -> f64 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_vertex_attrib_offset_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                index: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_vertex_attrib_offset_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            index: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(index);
            drop(pname);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let index = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(index);
                let pname = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pname);
                __widl_f_get_vertex_attrib_offset_WebGLRenderingContext(self_, index, pname)
            };
            <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_hint_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `hint()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/hint)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn hint(&self, target: u32, mode: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_hint_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                mode: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_hint_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            mode: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(mode);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let mode = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(mode);
                __widl_f_hint_WebGLRenderingContext(self_, target, mode)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_is_buffer_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlBuffer> as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `isBuffer()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isBuffer)\n\n*This API requires the following crate features to be activated: `WebGlBuffer`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn is_buffer(&self, buffer: Option<&WebGlBuffer>) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_is_buffer_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                buffer: <Option<&WebGlBuffer> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_is_buffer_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            buffer: <Option<&WebGlBuffer> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(buffer);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let buffer =
                    <Option<&WebGlBuffer> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(buffer);
                __widl_f_is_buffer_WebGLRenderingContext(self_, buffer)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_is_context_lost_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `isContextLost()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isContextLost)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn is_context_lost(&self) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_is_context_lost_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_is_context_lost_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_is_context_lost_WebGLRenderingContext(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_is_enabled_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `isEnabled()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isEnabled)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn is_enabled(&self, cap: u32) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_is_enabled_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                cap: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_is_enabled_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            cap: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(cap);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let cap = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cap);
                __widl_f_is_enabled_WebGLRenderingContext(self_, cap)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_is_program_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlProgram> as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `isProgram()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isProgram)\n\n*This API requires the following crate features to be activated: `WebGlProgram`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn is_program(&self, program: Option<&WebGlProgram>) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_is_program_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                program: <Option<&WebGlProgram> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_is_program_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            program: <Option<&WebGlProgram> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(program);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let program =
                    <Option<&WebGlProgram> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        program,
                    );
                __widl_f_is_program_WebGLRenderingContext(self_, program)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_is_shader_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlShader> as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `isShader()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isShader)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlShader`*"]
    #[allow(clippy::all)]
    pub fn is_shader(&self, shader: Option<&WebGlShader>) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_is_shader_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                shader: <Option<&WebGlShader> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_is_shader_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            shader: <Option<&WebGlShader> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(shader);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let shader =
                    <Option<&WebGlShader> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(shader);
                __widl_f_is_shader_WebGLRenderingContext(self_, shader)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_is_texture_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlTexture> as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `isTexture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isTexture)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlTexture`*"]
    #[allow(clippy::all)]
    pub fn is_texture(&self, texture: Option<&WebGlTexture>) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_is_texture_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                texture: <Option<&WebGlTexture> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_is_texture_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            texture: <Option<&WebGlTexture> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(texture);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let texture =
                    <Option<&WebGlTexture> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        texture,
                    );
                __widl_f_is_texture_WebGLRenderingContext(self_, texture)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_line_width_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `lineWidth()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/lineWidth)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn line_width(&self, width: f32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_line_width_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_line_width_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(width);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let width = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                __widl_f_line_width_WebGLRenderingContext(self_, width)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_link_program_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlProgram as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `linkProgram()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/linkProgram)\n\n*This API requires the following crate features to be activated: `WebGlProgram`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn link_program(&self, program: &WebGlProgram) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_link_program_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_link_program_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(program);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let program =
                    <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::into_abi(program);
                __widl_f_link_program_WebGLRenderingContext(self_, program)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_pixel_storei_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `pixelStorei()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn pixel_storei(&self, pname: u32, param: i32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_pixel_storei_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                param: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_pixel_storei_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            param: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(pname);
            drop(param);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let pname = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pname);
                let param = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(param);
                __widl_f_pixel_storei_WebGLRenderingContext(self_, pname, param)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_polygon_offset_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `polygonOffset()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/polygonOffset)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn polygon_offset(&self, factor: f32, units: f32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_polygon_offset_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                factor: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                units: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_polygon_offset_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            factor: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            units: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(factor);
            drop(units);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let factor = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(factor);
                let units = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(units);
                __widl_f_polygon_offset_WebGLRenderingContext(self_, factor, units)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_renderbuffer_storage_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `renderbufferStorage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/renderbufferStorage)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn renderbuffer_storage(&self, target: u32, internalformat: u32, width: i32, height: i32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_renderbuffer_storage_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                internalformat: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_renderbuffer_storage_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            internalformat: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(internalformat);
            drop(width);
            drop(height);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let internalformat =
                    <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(internalformat);
                let width = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                let height = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                __widl_f_renderbuffer_storage_WebGLRenderingContext(
                    self_,
                    target,
                    internalformat,
                    width,
                    height,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_sample_coverage_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `sampleCoverage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/sampleCoverage)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn sample_coverage(&self, value: f32, invert: bool) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_sample_coverage_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                value: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                invert: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_sample_coverage_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            value: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            invert: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(value);
            drop(invert);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let value = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                let invert = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(invert);
                __widl_f_sample_coverage_WebGLRenderingContext(self_, value, invert)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scissor_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `scissor()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/scissor)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn scissor(&self, x: i32, y: i32, width: i32, height: i32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scissor_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scissor_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            drop(width);
            drop(height);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                let width = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                let height = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                __widl_f_scissor_WebGLRenderingContext(self_, x, y, width, height)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_shader_source_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlShader as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `shaderSource()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/shaderSource)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlShader`*"]
    #[allow(clippy::all)]
    pub fn shader_source(&self, shader: &WebGlShader, source: &str) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_shader_source_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                shader: <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                source: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_shader_source_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            shader: <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            source: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(shader);
            drop(source);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let shader = <&WebGlShader as wasm_bindgen::convert::IntoWasmAbi>::into_abi(shader);
                let source = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(source);
                __widl_f_shader_source_WebGLRenderingContext(self_, shader, source)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_stencil_func_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `stencilFunc()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilFunc)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn stencil_func(&self, func: u32, ref_: i32, mask: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_stencil_func_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                func: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ref_: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                mask: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_stencil_func_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            func: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ref_: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            mask: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(func);
            drop(ref_);
            drop(mask);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let func = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(func);
                let ref_ = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(ref_);
                let mask = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(mask);
                __widl_f_stencil_func_WebGLRenderingContext(self_, func, ref_, mask)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_stencil_func_separate_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `stencilFuncSeparate()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilFuncSeparate)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn stencil_func_separate(&self, face: u32, func: u32, ref_: i32, mask: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_stencil_func_separate_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                face: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                func: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ref_: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                mask: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_stencil_func_separate_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            face: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            func: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ref_: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            mask: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(face);
            drop(func);
            drop(ref_);
            drop(mask);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let face = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(face);
                let func = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(func);
                let ref_ = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(ref_);
                let mask = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(mask);
                __widl_f_stencil_func_separate_WebGLRenderingContext(self_, face, func, ref_, mask)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_stencil_mask_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `stencilMask()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilMask)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn stencil_mask(&self, mask: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_stencil_mask_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                mask: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_stencil_mask_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            mask: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(mask);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let mask = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(mask);
                __widl_f_stencil_mask_WebGLRenderingContext(self_, mask)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_stencil_mask_separate_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `stencilMaskSeparate()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilMaskSeparate)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn stencil_mask_separate(&self, face: u32, mask: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_stencil_mask_separate_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                face: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                mask: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_stencil_mask_separate_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            face: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            mask: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(face);
            drop(mask);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let face = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(face);
                let mask = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(mask);
                __widl_f_stencil_mask_separate_WebGLRenderingContext(self_, face, mask)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_stencil_op_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `stencilOp()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilOp)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn stencil_op(&self, fail: u32, zfail: u32, zpass: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_stencil_op_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                fail: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                zfail: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                zpass: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_stencil_op_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            fail: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            zfail: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            zpass: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(fail);
            drop(zfail);
            drop(zpass);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let fail = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(fail);
                let zfail = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(zfail);
                let zpass = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(zpass);
                __widl_f_stencil_op_WebGLRenderingContext(self_, fail, zfail, zpass)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_stencil_op_separate_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `stencilOpSeparate()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilOpSeparate)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn stencil_op_separate(&self, face: u32, fail: u32, zfail: u32, zpass: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_stencil_op_separate_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                face: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                fail: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                zfail: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                zpass: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_stencil_op_separate_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            face: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            fail: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            zfail: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            zpass: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(face);
            drop(fail);
            drop(zfail);
            drop(zpass);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let face = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(face);
                let fail = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(fail);
                let zfail = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(zfail);
                let zpass = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(zpass);
                __widl_f_stencil_op_separate_WebGLRenderingContext(self_, face, fail, zfail, zpass)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_tex_parameterf_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `texParameterf()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameterf)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn tex_parameterf(&self, target: u32, pname: u32, param: f32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_tex_parameterf_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                param: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_tex_parameterf_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            param: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(pname);
            drop(param);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let pname = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pname);
                let param = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(param);
                __widl_f_tex_parameterf_WebGLRenderingContext(self_, target, pname, param)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_tex_parameteri_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `texParameteri()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameteri)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn tex_parameteri(&self, target: u32, pname: u32, param: i32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_tex_parameteri_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                param: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_tex_parameteri_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pname: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            param: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(target);
            drop(pname);
            drop(param);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let target = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let pname = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pname);
                let param = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(param);
                __widl_f_tex_parameteri_WebGLRenderingContext(self_, target, pname, param)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform1f_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform1f()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform1f)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform1f(&self, location: Option<&WebGlUniformLocation>, x: f32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform1f_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform1f_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(x);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let x = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                __widl_f_uniform1f_WebGLRenderingContext(self_, location, x)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform1i_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform1i()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform1i)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform1i(&self, location: Option<&WebGlUniformLocation>, x: i32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform1i_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform1i_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(x);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                __widl_f_uniform1i_WebGLRenderingContext(self_, location, x)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform2f_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform2f()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform2f)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform2f(&self, location: Option<&WebGlUniformLocation>, x: f32, y: f32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform2f_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform2f_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let x = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_uniform2f_WebGLRenderingContext(self_, location, x, y)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform2i_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform2i()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform2i)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform2i(&self, location: Option<&WebGlUniformLocation>, x: i32, y: i32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform2i_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform2i_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_uniform2i_WebGLRenderingContext(self_, location, x, y)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform3f_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform3f()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform3f)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform3f(&self, location: Option<&WebGlUniformLocation>, x: f32, y: f32, z: f32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform3f_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                z: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform3f_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            z: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(x);
            drop(y);
            drop(z);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let x = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                let z = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(z);
                __widl_f_uniform3f_WebGLRenderingContext(self_, location, x, y, z)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform3i_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform3i()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform3i)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform3i(&self, location: Option<&WebGlUniformLocation>, x: i32, y: i32, z: i32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform3i_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                z: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform3i_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            z: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(x);
            drop(y);
            drop(z);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                let z = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(z);
                __widl_f_uniform3i_WebGLRenderingContext(self_, location, x, y, z)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform4f_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform4f()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform4f)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform4f(
        &self,
        location: Option<&WebGlUniformLocation>,
        x: f32,
        y: f32,
        z: f32,
        w: f32,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform4f_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                z: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                w: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform4f_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            z: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            w: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(x);
            drop(y);
            drop(z);
            drop(w);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let x = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                let z = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(z);
                let w = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(w);
                __widl_f_uniform4f_WebGLRenderingContext(self_, location, x, y, z, w)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_uniform4i_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlUniformLocation> as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `uniform4i()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform4i)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`, `WebGlUniformLocation`*"]
    #[allow(clippy::all)]
    pub fn uniform4i(
        &self,
        location: Option<&WebGlUniformLocation>,
        x: i32,
        y: i32,
        z: i32,
        w: i32,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_uniform4i_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                location : < Option < & WebGlUniformLocation > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                z: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                w: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_uniform4i_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            location: <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            z: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            w: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(location);
            drop(x);
            drop(y);
            drop(z);
            drop(w);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let location =
                    <Option<&WebGlUniformLocation> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        location,
                    );
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                let z = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(z);
                let w = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(w);
                __widl_f_uniform4i_WebGLRenderingContext(self_, location, x, y, z, w)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_use_program_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<&WebGlProgram> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `useProgram()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/useProgram)\n\n*This API requires the following crate features to be activated: `WebGlProgram`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn use_program(&self, program: Option<&WebGlProgram>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_use_program_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                program: <Option<&WebGlProgram> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_use_program_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            program: <Option<&WebGlProgram> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(program);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let program =
                    <Option<&WebGlProgram> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        program,
                    );
                __widl_f_use_program_WebGLRenderingContext(self_, program)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_validate_program_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <&WebGlProgram as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `validateProgram()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/validateProgram)\n\n*This API requires the following crate features to be activated: `WebGlProgram`, `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn validate_program(&self, program: &WebGlProgram) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_validate_program_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_validate_program_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            program: <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(program);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let program =
                    <&WebGlProgram as wasm_bindgen::convert::IntoWasmAbi>::into_abi(program);
                __widl_f_validate_program_WebGLRenderingContext(self_, program)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_vertex_attrib1f_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `vertexAttrib1f()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib1f)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn vertex_attrib1f(&self, indx: u32, x: f32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_vertex_attrib1f_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_vertex_attrib1f_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(indx);
            drop(x);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let indx = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(indx);
                let x = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                __widl_f_vertex_attrib1f_WebGLRenderingContext(self_, indx, x)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_vertex_attrib1fv_with_f32_array_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <&[f32] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `vertexAttrib1fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib1fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn vertex_attrib1fv_with_f32_array(&self, indx: u32, values: &[f32]) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_vertex_attrib1fv_with_f32_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                values: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_vertex_attrib1fv_with_f32_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            values: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(indx);
            drop(values);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let indx = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(indx);
                let values = <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(values);
                __widl_f_vertex_attrib1fv_with_f32_array_WebGLRenderingContext(self_, indx, values)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_vertex_attrib1fv_with_f32_sequence_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `vertexAttrib1fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib1fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn vertex_attrib1fv_with_f32_sequence(&self, indx: u32, values: &::wasm_bindgen::JsValue) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_vertex_attrib1fv_with_f32_sequence_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                values: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_vertex_attrib1fv_with_f32_sequence_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            values: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(indx);
            drop(values);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let indx = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(indx);
                let values =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        values,
                    );
                __widl_f_vertex_attrib1fv_with_f32_sequence_WebGLRenderingContext(
                    self_, indx, values,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_vertex_attrib2f_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `vertexAttrib2f()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib2f)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn vertex_attrib2f(&self, indx: u32, x: f32, y: f32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_vertex_attrib2f_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_vertex_attrib2f_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(indx);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let indx = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(indx);
                let x = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_vertex_attrib2f_WebGLRenderingContext(self_, indx, x, y)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_vertex_attrib2fv_with_f32_array_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <&[f32] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `vertexAttrib2fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib2fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn vertex_attrib2fv_with_f32_array(&self, indx: u32, values: &[f32]) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_vertex_attrib2fv_with_f32_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                values: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_vertex_attrib2fv_with_f32_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            values: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(indx);
            drop(values);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let indx = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(indx);
                let values = <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(values);
                __widl_f_vertex_attrib2fv_with_f32_array_WebGLRenderingContext(self_, indx, values)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_vertex_attrib2fv_with_f32_sequence_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `vertexAttrib2fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib2fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn vertex_attrib2fv_with_f32_sequence(&self, indx: u32, values: &::wasm_bindgen::JsValue) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_vertex_attrib2fv_with_f32_sequence_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                values: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_vertex_attrib2fv_with_f32_sequence_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            values: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(indx);
            drop(values);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let indx = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(indx);
                let values =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        values,
                    );
                __widl_f_vertex_attrib2fv_with_f32_sequence_WebGLRenderingContext(
                    self_, indx, values,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_vertex_attrib3f_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `vertexAttrib3f()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib3f)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn vertex_attrib3f(&self, indx: u32, x: f32, y: f32, z: f32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_vertex_attrib3f_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                z: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_vertex_attrib3f_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            z: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(indx);
            drop(x);
            drop(y);
            drop(z);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let indx = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(indx);
                let x = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                let z = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(z);
                __widl_f_vertex_attrib3f_WebGLRenderingContext(self_, indx, x, y, z)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_vertex_attrib3fv_with_f32_array_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <&[f32] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `vertexAttrib3fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib3fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn vertex_attrib3fv_with_f32_array(&self, indx: u32, values: &[f32]) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_vertex_attrib3fv_with_f32_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                values: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_vertex_attrib3fv_with_f32_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            values: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(indx);
            drop(values);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let indx = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(indx);
                let values = <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(values);
                __widl_f_vertex_attrib3fv_with_f32_array_WebGLRenderingContext(self_, indx, values)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_vertex_attrib3fv_with_f32_sequence_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `vertexAttrib3fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib3fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn vertex_attrib3fv_with_f32_sequence(&self, indx: u32, values: &::wasm_bindgen::JsValue) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_vertex_attrib3fv_with_f32_sequence_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                values: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_vertex_attrib3fv_with_f32_sequence_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            values: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(indx);
            drop(values);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let indx = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(indx);
                let values =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        values,
                    );
                __widl_f_vertex_attrib3fv_with_f32_sequence_WebGLRenderingContext(
                    self_, indx, values,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_vertex_attrib4f_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <f32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `vertexAttrib4f()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib4f)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn vertex_attrib4f(&self, indx: u32, x: f32, y: f32, z: f32, w: f32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_vertex_attrib4f_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                z: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                w: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_vertex_attrib4f_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            z: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            w: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(indx);
            drop(x);
            drop(y);
            drop(z);
            drop(w);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let indx = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(indx);
                let x = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                let z = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(z);
                let w = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(w);
                __widl_f_vertex_attrib4f_WebGLRenderingContext(self_, indx, x, y, z, w)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_vertex_attrib4fv_with_f32_array_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <&[f32] as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `vertexAttrib4fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib4fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn vertex_attrib4fv_with_f32_array(&self, indx: u32, values: &[f32]) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_vertex_attrib4fv_with_f32_array_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                values: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_vertex_attrib4fv_with_f32_array_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            values: <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(indx);
            drop(values);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let indx = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(indx);
                let values = <&[f32] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(values);
                __widl_f_vertex_attrib4fv_with_f32_array_WebGLRenderingContext(self_, indx, values)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_vertex_attrib4fv_with_f32_sequence_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `vertexAttrib4fv()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib4fv)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn vertex_attrib4fv_with_f32_sequence(&self, indx: u32, values: &::wasm_bindgen::JsValue) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_vertex_attrib4fv_with_f32_sequence_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                values: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_vertex_attrib4fv_with_f32_sequence_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            values: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(indx);
            drop(values);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let indx = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(indx);
                let values =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        values,
                    );
                __widl_f_vertex_attrib4fv_with_f32_sequence_WebGLRenderingContext(
                    self_, indx, values,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_vertex_attrib_pointer_with_i32_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `vertexAttribPointer()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn vertex_attrib_pointer_with_i32(
        &self,
        indx: u32,
        size: i32,
        type_: u32,
        normalized: bool,
        stride: i32,
        offset: i32,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_vertex_attrib_pointer_with_i32_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                size: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                normalized: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                stride: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                offset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_vertex_attrib_pointer_with_i32_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            size: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            normalized: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            stride: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            offset: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(indx);
            drop(size);
            drop(type_);
            drop(normalized);
            drop(stride);
            drop(offset);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let indx = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(indx);
                let size = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(size);
                let type_ = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                let normalized = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(normalized);
                let stride = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(stride);
                let offset = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(offset);
                __widl_f_vertex_attrib_pointer_with_i32_WebGLRenderingContext(
                    self_, indx, size, type_, normalized, stride, offset,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_vertex_attrib_pointer_with_f64_WebGLRenderingContext(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `vertexAttribPointer()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn vertex_attrib_pointer_with_f64(
        &self,
        indx: u32,
        size: i32,
        type_: u32,
        normalized: bool,
        stride: i32,
        offset: f64,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_vertex_attrib_pointer_with_f64_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                size: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                normalized: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                stride: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                offset: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_vertex_attrib_pointer_with_f64_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            indx: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            size: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            type_: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            normalized: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            stride: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            offset: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(indx);
            drop(size);
            drop(type_);
            drop(normalized);
            drop(stride);
            drop(offset);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let indx = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(indx);
                let size = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(size);
                let type_ = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                let normalized = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(normalized);
                let stride = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(stride);
                let offset = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(offset);
                __widl_f_vertex_attrib_pointer_with_f64_WebGLRenderingContext(
                    self_, indx, size, type_, normalized, stride, offset,
                )
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_viewport_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `viewport()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/viewport)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn viewport(&self, x: i32, y: i32, width: i32, height: i32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_viewport_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_viewport_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            width: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            height: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            drop(width);
            drop(height);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                let width = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(width);
                let height = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(height);
                __widl_f_viewport_WebGLRenderingContext(self_, x, y, width, height)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_canvas_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <Option<::js_sys::Object> as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `canvas` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/canvas)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn canvas(&self) -> Option<::js_sys::Object> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_canvas_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_canvas_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_canvas_WebGLRenderingContext(self_)
            };
            <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_drawing_buffer_width_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `drawingBufferWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawingBufferWidth)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn drawing_buffer_width(&self) -> i32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_drawing_buffer_width_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_drawing_buffer_width_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_drawing_buffer_width_WebGLRenderingContext(self_)
            };
            <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_drawing_buffer_height_WebGLRenderingContext() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&WebGlRenderingContext as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl WebGlRenderingContext {
    #[allow(bad_style)]
    #[doc = "The `drawingBufferHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawingBufferHeight)\n\n*This API requires the following crate features to be activated: `WebGlRenderingContext`*"]
    #[allow(clippy::all)]
    pub fn drawing_buffer_height(&self) -> i32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_drawing_buffer_height_WebGLRenderingContext(
                self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_drawing_buffer_height_WebGLRenderingContext(
            self_: <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ =
                    <&WebGlRenderingContext as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_drawing_buffer_height_WebGLRenderingContext(self_)
            };
            <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `WebGLShader` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader)\n\n*This API requires the following crate features to be activated: `WebGlShader`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct WebGlShader {
    obj: Object,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_WebGlShader: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for WebGlShader {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for WebGlShader {
        type Target = Object;
        #[inline]
        fn deref(&self) -> &Object {
            &self.obj
        }
    }
    impl IntoWasmAbi for WebGlShader {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for WebGlShader {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a WebGlShader {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for WebGlShader {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            WebGlShader {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for WebGlShader {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a WebGlShader {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for WebGlShader {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<WebGlShader>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(WebGlShader {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for WebGlShader {
        #[inline]
        fn from(obj: JsValue) -> WebGlShader {
            WebGlShader { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for WebGlShader {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<WebGlShader> for WebGlShader {
        #[inline]
        fn as_ref(&self) -> &WebGlShader {
            self
        }
    }
    impl From<WebGlShader> for JsValue {
        #[inline]
        fn from(obj: WebGlShader) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for WebGlShader {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_WebGLShader(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_WebGLShader(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_WebGLShader(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            WebGlShader { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const WebGlShader) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<WebGlShader> for Object {
    #[inline]
    fn from(obj: WebGlShader) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for WebGlShader {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `WebGLTexture` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture)\n\n*This API requires the following crate features to be activated: `WebGlTexture`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct WebGlTexture {
    obj: Object,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_WebGlTexture: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for WebGlTexture {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for WebGlTexture {
        type Target = Object;
        #[inline]
        fn deref(&self) -> &Object {
            &self.obj
        }
    }
    impl IntoWasmAbi for WebGlTexture {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for WebGlTexture {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a WebGlTexture {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for WebGlTexture {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            WebGlTexture {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for WebGlTexture {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a WebGlTexture {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for WebGlTexture {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<WebGlTexture>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(WebGlTexture {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for WebGlTexture {
        #[inline]
        fn from(obj: JsValue) -> WebGlTexture {
            WebGlTexture { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for WebGlTexture {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<WebGlTexture> for WebGlTexture {
        #[inline]
        fn as_ref(&self) -> &WebGlTexture {
            self
        }
    }
    impl From<WebGlTexture> for JsValue {
        #[inline]
        fn from(obj: WebGlTexture) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for WebGlTexture {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_WebGLTexture(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_WebGLTexture(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_WebGLTexture(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            WebGlTexture { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const WebGlTexture) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<WebGlTexture> for Object {
    #[inline]
    fn from(obj: WebGlTexture) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for WebGlTexture {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `WebGLUniformLocation` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation)\n\n*This API requires the following crate features to be activated: `WebGlUniformLocation`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct WebGlUniformLocation {
    obj: Object,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_WebGlUniformLocation: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for WebGlUniformLocation {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for WebGlUniformLocation {
        type Target = Object;
        #[inline]
        fn deref(&self) -> &Object {
            &self.obj
        }
    }
    impl IntoWasmAbi for WebGlUniformLocation {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for WebGlUniformLocation {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a WebGlUniformLocation {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for WebGlUniformLocation {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            WebGlUniformLocation {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for WebGlUniformLocation {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a WebGlUniformLocation {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for WebGlUniformLocation {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<WebGlUniformLocation>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(WebGlUniformLocation {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for WebGlUniformLocation {
        #[inline]
        fn from(obj: JsValue) -> WebGlUniformLocation {
            WebGlUniformLocation { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for WebGlUniformLocation {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<WebGlUniformLocation> for WebGlUniformLocation {
        #[inline]
        fn as_ref(&self) -> &WebGlUniformLocation {
            self
        }
    }
    impl From<WebGlUniformLocation> for JsValue {
        #[inline]
        fn from(obj: WebGlUniformLocation) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for WebGlUniformLocation {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_WebGLUniformLocation(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_WebGLUniformLocation(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_WebGLUniformLocation(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            WebGlUniformLocation { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const WebGlUniformLocation) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<WebGlUniformLocation> for Object {
    #[inline]
    fn from(obj: WebGlUniformLocation) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for WebGlUniformLocation {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `Window` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window)\n\n*This API requires the following crate features to be activated: `Window`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct Window {
    obj: Object,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_Window: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for Window {
        fn describe() {
            JsValue::describe();
        }
    }
    impl core::ops::Deref for Window {
        type Target = Object;
        #[inline]
        fn deref(&self) -> &Object {
            &self.obj
        }
    }
    impl IntoWasmAbi for Window {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for Window {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a Window {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for Window {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            Window {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for Window {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a Window {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for Window {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<Window>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(Window {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for Window {
        #[inline]
        fn from(obj: JsValue) -> Window {
            Window { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for Window {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<Window> for Window {
        #[inline]
        fn as_ref(&self) -> &Window {
            self
        }
    }
    impl From<Window> for JsValue {
        #[inline]
        fn from(obj: Window) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for Window {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_Window(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_Window(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_Window(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            Window { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const Window) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<Window> for Object {
    #[inline]
    fn from(obj: Window) -> Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<Object> for Window {
    #[inline]
    fn as_ref(&self) -> &Object {
        use wasm_bindgen::JsCast;
        Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_alert_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `alert()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn alert(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_alert_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_alert_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_alert_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_alert_with_message_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `alert()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn alert_with_message(&self, message: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_alert_with_message_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_alert_with_message_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(message);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let message = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(message);
                __widl_f_alert_with_message_Window(self_, message)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_blur_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `blur()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/blur)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn blur(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_blur_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_blur_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_blur_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_cancel_animation_frame_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `cancelAnimationFrame()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn cancel_animation_frame(&self, handle: i32) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_cancel_animation_frame_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handle: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_cancel_animation_frame_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handle: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(handle);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handle = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handle);
                __widl_f_cancel_animation_frame_Window(self_, handle)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_cancel_idle_callback_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `cancelIdleCallback()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn cancel_idle_callback(&self, handle: u32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_cancel_idle_callback_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handle: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_cancel_idle_callback_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handle: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(handle);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handle = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handle);
                __widl_f_cancel_idle_callback_Window(self_, handle)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_capture_events_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `captureEvents()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/captureEvents)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn capture_events(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_capture_events_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_capture_events_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_capture_events_Window(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_close_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `close()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/close)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn close(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_close_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_close_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_close_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_confirm_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `confirm()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn confirm(&self) -> Result<bool, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_confirm_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_confirm_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_confirm_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_confirm_with_message_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `confirm()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn confirm_with_message(&self, message: &str) -> Result<bool, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_confirm_with_message_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_confirm_with_message_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(message);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let message = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(message);
                __widl_f_confirm_with_message_Window(self_, message)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_focus_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `focus()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/focus)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn focus(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_focus_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_focus_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_focus_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_move_by_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `moveBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn move_by(&self, x: i32, y: i32) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_move_by_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_move_by_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_move_by_Window(self_, x, y)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_move_to_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `moveTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn move_to(&self, x: i32, y: i32) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_move_to_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_move_to_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_move_to_Window(self_, x, y)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_open_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<Window> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn open(&self) -> Result<Option<Window>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_open_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_open_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_open_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_open_with_url_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<Window> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn open_with_url(&self, url: &str) -> Result<Option<Window>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_open_with_url_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_open_with_url_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(url);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let url = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(url);
                __widl_f_open_with_url_Window(self_, url)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_open_with_url_and_target_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<Window> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn open_with_url_and_target(
        &self,
        url: &str,
        target: &str,
    ) -> Result<Option<Window>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_open_with_url_and_target_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_open_with_url_and_target_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(url);
            drop(target);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let url = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(url);
                let target = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                __widl_f_open_with_url_and_target_Window(self_, url, target)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_open_with_url_and_target_and_features_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<Window> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn open_with_url_and_target_and_features(
        &self,
        url: &str,
        target: &str,
        features: &str,
    ) -> Result<Option<Window>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_open_with_url_and_target_and_features_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                features: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_open_with_url_and_target_and_features_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            features: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(url);
            drop(target);
            drop(features);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let url = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(url);
                let target = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let features = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(features);
                __widl_f_open_with_url_and_target_and_features_Window(self_, url, target, features)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_post_message_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn post_message(
        &self,
        message: &::wasm_bindgen::JsValue,
        target_origin: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_post_message_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                message: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target_origin: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_post_message_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            message: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target_origin: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(message);
            drop(target_origin);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let message =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        message,
                    );
                let target_origin =
                    <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target_origin);
                __widl_f_post_message_Window(self_, message, target_origin)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_post_message_with_transfer_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn post_message_with_transfer(
        &self,
        message: &::wasm_bindgen::JsValue,
        target_origin: &str,
        transfer: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_post_message_with_transfer_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                message: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target_origin: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                transfer: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_post_message_with_transfer_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            message: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target_origin: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            transfer: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(message);
            drop(target_origin);
            drop(transfer);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let message =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        message,
                    );
                let target_origin =
                    <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target_origin);
                let transfer =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        transfer,
                    );
                __widl_f_post_message_with_transfer_Window(self_, message, target_origin, transfer)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_print_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `print()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/print)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn print(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_print_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_print_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_print_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prompt_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `prompt()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn prompt(&self) -> Result<Option<String>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prompt_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prompt_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_prompt_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prompt_with_message_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `prompt()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn prompt_with_message(
        &self,
        message: &str,
    ) -> Result<Option<String>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prompt_with_message_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prompt_with_message_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(message);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let message = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(message);
                __widl_f_prompt_with_message_Window(self_, message)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prompt_with_message_and_default_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `prompt()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn prompt_with_message_and_default(
        &self,
        message: &str,
        default: &str,
    ) -> Result<Option<String>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prompt_with_message_and_default_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                default: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prompt_with_message_and_default_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            default: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(message);
            drop(default);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let message = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(message);
                let default = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(default);
                __widl_f_prompt_with_message_and_default_Window(self_, message, default)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_release_events_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `releaseEvents()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn release_events(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_release_events_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_release_events_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_release_events_Window(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_request_animation_frame_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `requestAnimationFrame()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn request_animation_frame(
        &self,
        callback: &::js_sys::Function,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_request_animation_frame_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_request_animation_frame_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(callback);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let callback =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(callback);
                __widl_f_request_animation_frame_Window(self_, callback)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_request_idle_callback_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `requestIdleCallback()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn request_idle_callback(
        &self,
        callback: &::js_sys::Function,
    ) -> Result<u32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_request_idle_callback_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_request_idle_callback_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(callback);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let callback =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(callback);
                __widl_f_request_idle_callback_Window(self_, callback)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_resize_by_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `resizeBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn resize_by(&self, x: i32, y: i32) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_resize_by_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_resize_by_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_resize_by_Window(self_, x, y)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_resize_to_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `resizeTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn resize_to(&self, x: i32, y: i32) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_resize_to_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_resize_to_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_resize_to_Window(self_, x, y)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_with_x_and_y_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_with_x_and_y(&self, x: f64, y: f64) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_with_x_and_y_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_with_x_and_y_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_scroll_with_x_and_y_Window(self_, x, y)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_Window(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_by_with_x_and_y_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_by_with_x_and_y(&self, x: f64, y: f64) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_by_with_x_and_y_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_by_with_x_and_y_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_scroll_by_with_x_and_y_Window(self_, x, y)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_by_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_by(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_by_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_by_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_by_Window(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_to_with_x_and_y_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_to_with_x_and_y(&self, x: f64, y: f64) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_to_with_x_and_y_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_to_with_x_and_y_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_scroll_to_with_x_and_y_Window(self_, x, y)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_to_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_to(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_to_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_to_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_to_Window(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_stop_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `stop()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/stop)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn stop(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_stop_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_stop_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_stop_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<::js_sys::Object> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The indexing getter\n\n\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn get(&self, name: &str) -> Option<::js_sys::Object> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                __widl_f_get_Window(self_, name)
            };
            <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_window_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Window as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `window` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/window)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn window(&self) -> Window {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_window_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Window as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_window_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Window as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_window_Window(self_)
            };
            <Window as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_self_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Window as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `self` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/self)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn self_(&self) -> Window {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_self_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Window as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_self_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Window as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_self_Window(self_)
            };
            <Window as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_document_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<Document> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `document` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/document)\n\n*This API requires the following crate features to be activated: `Document`, `Window`*"]
    #[allow(clippy::all)]
    pub fn document(&self) -> Option<Document> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_document_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Document> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_document_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Document> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_document_Window(self_)
            };
            <Option<Document> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_name_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `name` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn name(&self) -> Result<String, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_name_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_name_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_name_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_name_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `name` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_name(&self, name: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_name_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_name_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                __widl_f_set_name_Window(self_, name)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_status_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `status` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn status(&self) -> Result<String, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_status_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_status_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_status_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_status_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `status` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_status(&self, status: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_status_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                status: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_status_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            status: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(status);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let status = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(status);
                __widl_f_set_status_Window(self_, status)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_closed_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `closed` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/closed)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn closed(&self) -> Result<bool, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_closed_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_closed_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_closed_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_event_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `event` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/event)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn event(&self) -> ::wasm_bindgen::JsValue {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_event_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_event_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_event_Window(self_)
            };
            <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_frames_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Window as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `frames` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/frames)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn frames(&self) -> Result<Window, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_frames_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Window as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_frames_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Window as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_frames_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Window as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_length_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `length` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/length)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn length(&self) -> u32 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_length_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_length_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_length_Window(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_top_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<Window> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `top` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/top)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn top(&self) -> Result<Option<Window>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_top_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_top_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_top_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_opener_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `opener` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn opener(&self) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_opener_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_opener_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_opener_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_opener_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `opener` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_opener(
        &self,
        opener: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_opener_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                opener: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_opener_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            opener: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(opener);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let opener =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        opener,
                    );
                __widl_f_set_opener_Window(self_, opener)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_parent_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<Window> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `parent` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/parent)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn parent(&self) -> Result<Option<Window>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_parent_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_parent_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_parent_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_frame_element_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `frameElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement)\n\n*This API requires the following crate features to be activated: `Element`, `Window`*"]
    #[allow(clippy::all)]
    pub fn frame_element(&self) -> Result<Option<Element>, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_frame_element_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_frame_element_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_frame_element_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onappinstalled_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onappinstalled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onappinstalled(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onappinstalled_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onappinstalled_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onappinstalled_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onappinstalled_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onappinstalled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onappinstalled(&self, onappinstalled: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onappinstalled_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onappinstalled : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onappinstalled_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onappinstalled : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onappinstalled);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onappinstalled =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onappinstalled,
                    );
                __widl_f_set_onappinstalled_Window(self_, onappinstalled)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_inner_width_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `innerWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn inner_width(&self) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_inner_width_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_inner_width_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_inner_width_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_inner_width_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `innerWidth` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_inner_width(
        &self,
        inner_width: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_inner_width_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                inner_width: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_inner_width_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            inner_width: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(inner_width);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let inner_width =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        inner_width,
                    );
                __widl_f_set_inner_width_Window(self_, inner_width)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_inner_height_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `innerHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn inner_height(&self) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_inner_height_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_inner_height_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_inner_height_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_inner_height_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `innerHeight` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_inner_height(
        &self,
        inner_height: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_inner_height_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                inner_height: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_inner_height_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            inner_height: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(inner_height);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let inner_height =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        inner_height,
                    );
                __widl_f_set_inner_height_Window(self_, inner_height)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_x_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `scrollX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_x(&self) -> Result<f64, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_x_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_x_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_x_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_page_x_offset_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `pageXOffset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageXOffset)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn page_x_offset(&self) -> Result<f64, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_page_x_offset_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_page_x_offset_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_page_x_offset_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_y_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `scrollY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_y(&self) -> Result<f64, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_y_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_y_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_y_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_page_y_offset_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `pageYOffset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageYOffset)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn page_y_offset(&self) -> Result<f64, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_page_y_offset_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_page_y_offset_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_page_y_offset_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_screen_x_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `screenX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn screen_x(&self) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_screen_x_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_screen_x_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_screen_x_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_screen_x_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `screenX` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_screen_x(
        &self,
        screen_x: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_screen_x_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                screen_x: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_screen_x_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            screen_x: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(screen_x);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let screen_x =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        screen_x,
                    );
                __widl_f_set_screen_x_Window(self_, screen_x)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_screen_y_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `screenY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn screen_y(&self) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_screen_y_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_screen_y_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_screen_y_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_screen_y_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `screenY` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_screen_y(
        &self,
        screen_y: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_screen_y_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                screen_y: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_screen_y_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            screen_y: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(screen_y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let screen_y =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        screen_y,
                    );
                __widl_f_set_screen_y_Window(self_, screen_y)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_outer_width_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `outerWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn outer_width(&self) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_outer_width_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_outer_width_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_outer_width_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_outer_width_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `outerWidth` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_outer_width(
        &self,
        outer_width: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_outer_width_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                outer_width: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_outer_width_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            outer_width: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(outer_width);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let outer_width =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        outer_width,
                    );
                __widl_f_set_outer_width_Window(self_, outer_width)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_outer_height_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `outerHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn outer_height(&self) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_outer_height_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_outer_height_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_outer_height_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_outer_height_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `outerHeight` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_outer_height(
        &self,
        outer_height: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_outer_height_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                outer_height: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_outer_height_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            outer_height: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(outer_height);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let outer_height =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        outer_height,
                    );
                __widl_f_set_outer_height_Window(self_, outer_height)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_device_pixel_ratio_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `devicePixelRatio` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn device_pixel_ratio(&self) -> f64 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_device_pixel_ratio_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_device_pixel_ratio_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_device_pixel_ratio_Window(self_)
            };
            <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_orientation_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <i16 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `orientation` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn orientation(&self) -> i16 {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_orientation_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i16 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_orientation_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i16 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_orientation_Window(self_)
            };
            <i16 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onorientationchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onorientationchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onorientationchange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onorientationchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onorientationchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onorientationchange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onorientationchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onorientationchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onorientationchange(&self, onorientationchange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onorientationchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onorientationchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onorientationchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onorientationchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onorientationchange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onorientationchange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onorientationchange,
                    );
                __widl_f_set_onorientationchange_Window(self_, onorientationchange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplayconnect_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onvrdisplayconnect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onvrdisplayconnect(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onvrdisplayconnect_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onvrdisplayconnect_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onvrdisplayconnect_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplayconnect_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onvrdisplayconnect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onvrdisplayconnect(&self, onvrdisplayconnect: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onvrdisplayconnect_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onvrdisplayconnect : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onvrdisplayconnect_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onvrdisplayconnect : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onvrdisplayconnect);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onvrdisplayconnect =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onvrdisplayconnect,
                    );
                __widl_f_set_onvrdisplayconnect_Window(self_, onvrdisplayconnect)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplaydisconnect_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onvrdisplaydisconnect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onvrdisplaydisconnect(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onvrdisplaydisconnect_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onvrdisplaydisconnect_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onvrdisplaydisconnect_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplaydisconnect_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onvrdisplaydisconnect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onvrdisplaydisconnect(&self, onvrdisplaydisconnect: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onvrdisplaydisconnect_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onvrdisplaydisconnect : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onvrdisplaydisconnect_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onvrdisplaydisconnect : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onvrdisplaydisconnect);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onvrdisplaydisconnect =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onvrdisplaydisconnect,
                    );
                __widl_f_set_onvrdisplaydisconnect_Window(self_, onvrdisplaydisconnect)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplayactivate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onvrdisplayactivate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onvrdisplayactivate(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onvrdisplayactivate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onvrdisplayactivate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onvrdisplayactivate_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplayactivate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onvrdisplayactivate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onvrdisplayactivate(&self, onvrdisplayactivate: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onvrdisplayactivate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onvrdisplayactivate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onvrdisplayactivate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onvrdisplayactivate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onvrdisplayactivate);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onvrdisplayactivate =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onvrdisplayactivate,
                    );
                __widl_f_set_onvrdisplayactivate_Window(self_, onvrdisplayactivate)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplaydeactivate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onvrdisplaydeactivate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onvrdisplaydeactivate(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onvrdisplaydeactivate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onvrdisplaydeactivate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onvrdisplaydeactivate_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplaydeactivate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onvrdisplaydeactivate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onvrdisplaydeactivate(&self, onvrdisplaydeactivate: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onvrdisplaydeactivate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onvrdisplaydeactivate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onvrdisplaydeactivate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onvrdisplaydeactivate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onvrdisplaydeactivate);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onvrdisplaydeactivate =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onvrdisplaydeactivate,
                    );
                __widl_f_set_onvrdisplaydeactivate_Window(self_, onvrdisplaydeactivate)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplaypresentchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onvrdisplaypresentchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onvrdisplaypresentchange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onvrdisplaypresentchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onvrdisplaypresentchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onvrdisplaypresentchange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplaypresentchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onvrdisplaypresentchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onvrdisplaypresentchange(
        &self,
        onvrdisplaypresentchange: Option<&::js_sys::Function>,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onvrdisplaypresentchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onvrdisplaypresentchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onvrdisplaypresentchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onvrdisplaypresentchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onvrdisplaypresentchange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onvrdisplaypresentchange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onvrdisplaypresentchange,
                    );
                __widl_f_set_onvrdisplaypresentchange_Window(self_, onvrdisplaypresentchange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onabort_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onabort` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onabort(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onabort_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onabort_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onabort_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onabort_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onabort` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onabort(&self, onabort: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onabort_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onabort: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onabort_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onabort: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onabort);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onabort =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onabort,
                    );
                __widl_f_set_onabort_Window(self_, onabort)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onblur_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onblur` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onblur(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onblur_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onblur_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onblur_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onblur_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onblur` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onblur(&self, onblur: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onblur_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onblur: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onblur_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onblur: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onblur);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onblur =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onblur,
                    );
                __widl_f_set_onblur_Window(self_, onblur)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onfocus_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onfocus` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onfocus(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onfocus_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onfocus_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onfocus_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onfocus_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onfocus` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onfocus(&self, onfocus: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onfocus_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onfocus: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onfocus_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onfocus: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onfocus);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onfocus =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onfocus,
                    );
                __widl_f_set_onfocus_Window(self_, onfocus)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onauxclick_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onauxclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onauxclick(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onauxclick_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onauxclick_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onauxclick_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onauxclick_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onauxclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onauxclick(&self, onauxclick: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onauxclick_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onauxclick : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onauxclick_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onauxclick: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onauxclick);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onauxclick =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onauxclick,
                    );
                __widl_f_set_onauxclick_Window(self_, onauxclick)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oncanplay_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `oncanplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn oncanplay(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oncanplay_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oncanplay_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oncanplay_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oncanplay_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `oncanplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_oncanplay(&self, oncanplay: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oncanplay_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oncanplay: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oncanplay_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oncanplay: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(oncanplay);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oncanplay =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oncanplay,
                    );
                __widl_f_set_oncanplay_Window(self_, oncanplay)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oncanplaythrough_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `oncanplaythrough` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn oncanplaythrough(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oncanplaythrough_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oncanplaythrough_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oncanplaythrough_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oncanplaythrough_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `oncanplaythrough` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_oncanplaythrough(&self, oncanplaythrough: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oncanplaythrough_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oncanplaythrough : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oncanplaythrough_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oncanplaythrough : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(oncanplaythrough);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oncanplaythrough =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oncanplaythrough,
                    );
                __widl_f_set_oncanplaythrough_Window(self_, oncanplaythrough)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onchange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onchange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onchange(&self, onchange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onchange: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onchange: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onchange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onchange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onchange,
                    );
                __widl_f_set_onchange_Window(self_, onchange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onclick_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onclick(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onclick_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onclick_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onclick_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onclick_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onclick(&self, onclick: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onclick_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onclick: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onclick_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onclick: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onclick);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onclick =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onclick,
                    );
                __widl_f_set_onclick_Window(self_, onclick)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onclose_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onclose` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onclose(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onclose_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onclose_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onclose_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onclose_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onclose` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onclose(&self, onclose: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onclose_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onclose: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onclose_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onclose: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onclose);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onclose =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onclose,
                    );
                __widl_f_set_onclose_Window(self_, onclose)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oncontextmenu_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `oncontextmenu` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn oncontextmenu(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oncontextmenu_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oncontextmenu_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oncontextmenu_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oncontextmenu_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `oncontextmenu` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_oncontextmenu(&self, oncontextmenu: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oncontextmenu_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oncontextmenu : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oncontextmenu_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oncontextmenu: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(oncontextmenu);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oncontextmenu =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oncontextmenu,
                    );
                __widl_f_set_oncontextmenu_Window(self_, oncontextmenu)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondblclick_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondblclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondblclick(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondblclick_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondblclick_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondblclick_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondblclick_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondblclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondblclick(&self, ondblclick: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondblclick_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondblclick : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondblclick_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondblclick: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondblclick);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondblclick =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondblclick,
                    );
                __widl_f_set_ondblclick_Window(self_, ondblclick)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondrag_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondrag` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondrag(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondrag_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondrag_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondrag_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondrag_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondrag` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondrag(&self, ondrag: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondrag_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondrag: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondrag_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondrag: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondrag);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondrag =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondrag,
                    );
                __widl_f_set_ondrag_Window(self_, ondrag)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondragend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondragend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondragend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondragend(&self, ondragend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragend,
                    );
                __widl_f_set_ondragend_Window(self_, ondragend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragenter_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondragenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondragenter(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragenter_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragenter_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragenter_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragenter_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondragenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondragenter(&self, ondragenter: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragenter_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragenter_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragenter: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragenter);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragenter =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragenter,
                    );
                __widl_f_set_ondragenter_Window(self_, ondragenter)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragexit_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondragexit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondragexit(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragexit_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragexit_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragexit_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragexit_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondragexit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondragexit(&self, ondragexit: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragexit_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragexit : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragexit_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragexit: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragexit);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragexit =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragexit,
                    );
                __widl_f_set_ondragexit_Window(self_, ondragexit)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragleave_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondragleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondragleave(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragleave_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragleave_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragleave_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragleave_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondragleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondragleave(&self, ondragleave: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragleave_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragleave_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragleave: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragleave);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragleave =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragleave,
                    );
                __widl_f_set_ondragleave_Window(self_, ondragleave)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragover_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondragover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondragover(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragover_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragover_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragover_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragover_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondragover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondragover(&self, ondragover: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragover_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragover : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragover_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragover: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragover);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragover =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragover,
                    );
                __widl_f_set_ondragover_Window(self_, ondragover)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondragstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondragstart(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragstart_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondragstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondragstart(&self, ondragstart: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragstart: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragstart,
                    );
                __widl_f_set_ondragstart_Window(self_, ondragstart)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondrop_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondrop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondrop(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondrop_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondrop_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondrop_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondrop_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondrop` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondrop(&self, ondrop: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondrop_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondrop: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondrop_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondrop: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondrop);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondrop =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondrop,
                    );
                __widl_f_set_ondrop_Window(self_, ondrop)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondurationchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondurationchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondurationchange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondurationchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondurationchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondurationchange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondurationchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ondurationchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondurationchange(&self, ondurationchange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondurationchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondurationchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondurationchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondurationchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ondurationchange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondurationchange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondurationchange,
                    );
                __widl_f_set_ondurationchange_Window(self_, ondurationchange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onemptied_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onemptied` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onemptied(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onemptied_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onemptied_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onemptied_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onemptied_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onemptied` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onemptied(&self, onemptied: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onemptied_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onemptied: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onemptied_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onemptied: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onemptied);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onemptied =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onemptied,
                    );
                __widl_f_set_onemptied_Window(self_, onemptied)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onended_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onended` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onended(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onended_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onended_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onended_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onended_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onended` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onended(&self, onended: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onended_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onended: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onended_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onended: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onended);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onended =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onended,
                    );
                __widl_f_set_onended_Window(self_, onended)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oninput_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `oninput` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn oninput(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oninput_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oninput_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oninput_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oninput_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `oninput` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_oninput(&self, oninput: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oninput_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oninput: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oninput_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oninput: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(oninput);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oninput =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oninput,
                    );
                __widl_f_set_oninput_Window(self_, oninput)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oninvalid_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `oninvalid` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn oninvalid(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oninvalid_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oninvalid_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oninvalid_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oninvalid_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `oninvalid` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_oninvalid(&self, oninvalid: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oninvalid_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oninvalid: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oninvalid_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oninvalid: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(oninvalid);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oninvalid =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oninvalid,
                    );
                __widl_f_set_oninvalid_Window(self_, oninvalid)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onkeydown_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onkeydown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onkeydown(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onkeydown_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onkeydown_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onkeydown_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onkeydown_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onkeydown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onkeydown(&self, onkeydown: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onkeydown_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onkeydown: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onkeydown_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onkeydown: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onkeydown);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onkeydown =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onkeydown,
                    );
                __widl_f_set_onkeydown_Window(self_, onkeydown)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onkeypress_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onkeypress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onkeypress(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onkeypress_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onkeypress_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onkeypress_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onkeypress_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onkeypress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onkeypress(&self, onkeypress: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onkeypress_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onkeypress : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onkeypress_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onkeypress: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onkeypress);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onkeypress =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onkeypress,
                    );
                __widl_f_set_onkeypress_Window(self_, onkeypress)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onkeyup_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onkeyup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onkeyup(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onkeyup_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onkeyup_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onkeyup_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onkeyup_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onkeyup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onkeyup(&self, onkeyup: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onkeyup_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onkeyup: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onkeyup_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onkeyup: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onkeyup);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onkeyup =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onkeyup,
                    );
                __widl_f_set_onkeyup_Window(self_, onkeyup)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onload_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onload(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onload_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onload_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onload_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onload_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onload(&self, onload: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onload_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onload: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onload_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onload: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onload);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onload =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onload,
                    );
                __widl_f_set_onload_Window(self_, onload)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onloadeddata_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onloadeddata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onloadeddata(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onloadeddata_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onloadeddata_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onloadeddata_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onloadeddata_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onloadeddata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onloadeddata(&self, onloadeddata: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onloadeddata_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onloadeddata : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onloadeddata_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onloadeddata: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onloadeddata);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onloadeddata =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onloadeddata,
                    );
                __widl_f_set_onloadeddata_Window(self_, onloadeddata)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onloadedmetadata_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onloadedmetadata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onloadedmetadata(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onloadedmetadata_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onloadedmetadata_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onloadedmetadata_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onloadedmetadata_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onloadedmetadata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onloadedmetadata(&self, onloadedmetadata: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onloadedmetadata_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onloadedmetadata : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onloadedmetadata_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onloadedmetadata : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onloadedmetadata);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onloadedmetadata =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onloadedmetadata,
                    );
                __widl_f_set_onloadedmetadata_Window(self_, onloadedmetadata)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onloadend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onloadend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onloadend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onloadend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onloadend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onloadend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onloadend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onloadend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onloadend(&self, onloadend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onloadend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onloadend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onloadend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onloadend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onloadend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onloadend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onloadend,
                    );
                __widl_f_set_onloadend_Window(self_, onloadend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onloadstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onloadstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onloadstart(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onloadstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onloadstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onloadstart_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onloadstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onloadstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onloadstart(&self, onloadstart: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onloadstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onloadstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onloadstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onloadstart: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onloadstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onloadstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onloadstart,
                    );
                __widl_f_set_onloadstart_Window(self_, onloadstart)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmousedown_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmousedown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmousedown(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmousedown_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmousedown_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmousedown_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmousedown_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmousedown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmousedown(&self, onmousedown: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmousedown_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmousedown : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmousedown_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmousedown: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmousedown);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmousedown =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmousedown,
                    );
                __widl_f_set_onmousedown_Window(self_, onmousedown)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmouseenter_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmouseenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmouseenter(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmouseenter_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmouseenter_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmouseenter_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseenter_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmouseenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmouseenter(&self, onmouseenter: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmouseenter_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmouseenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmouseenter_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmouseenter: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmouseenter);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmouseenter =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmouseenter,
                    );
                __widl_f_set_onmouseenter_Window(self_, onmouseenter)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmouseleave_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmouseleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmouseleave(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmouseleave_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmouseleave_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmouseleave_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseleave_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmouseleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmouseleave(&self, onmouseleave: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmouseleave_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmouseleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmouseleave_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmouseleave: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmouseleave);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmouseleave =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmouseleave,
                    );
                __widl_f_set_onmouseleave_Window(self_, onmouseleave)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmousemove_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmousemove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmousemove(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmousemove_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmousemove_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmousemove_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmousemove_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmousemove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmousemove(&self, onmousemove: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmousemove_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmousemove : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmousemove_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmousemove: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmousemove);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmousemove =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmousemove,
                    );
                __widl_f_set_onmousemove_Window(self_, onmousemove)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmouseout_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmouseout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmouseout(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmouseout_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmouseout_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmouseout_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseout_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmouseout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmouseout(&self, onmouseout: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmouseout_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmouseout : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmouseout_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmouseout: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmouseout);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmouseout =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmouseout,
                    );
                __widl_f_set_onmouseout_Window(self_, onmouseout)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmouseover_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmouseover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmouseover(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmouseover_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmouseover_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmouseover_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseover_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmouseover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmouseover(&self, onmouseover: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmouseover_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmouseover : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmouseover_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmouseover: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmouseover);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmouseover =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmouseover,
                    );
                __widl_f_set_onmouseover_Window(self_, onmouseover)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmouseup_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmouseup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmouseup(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmouseup_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmouseup_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmouseup_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseup_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmouseup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmouseup(&self, onmouseup: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmouseup_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmouseup: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmouseup_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmouseup: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmouseup);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmouseup =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmouseup,
                    );
                __widl_f_set_onmouseup_Window(self_, onmouseup)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwheel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onwheel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onwheel(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwheel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwheel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwheel_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwheel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onwheel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onwheel(&self, onwheel: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwheel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwheel: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwheel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwheel: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onwheel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwheel =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwheel,
                    );
                __widl_f_set_onwheel_Window(self_, onwheel)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpause_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpause` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpause(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpause_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpause_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpause_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpause_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpause` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpause(&self, onpause: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpause_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpause: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpause_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpause: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpause);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpause =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpause,
                    );
                __widl_f_set_onpause_Window(self_, onpause)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onplay_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onplay(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onplay_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onplay_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onplay_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onplay_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onplay(&self, onplay: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onplay_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onplay: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onplay_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onplay: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onplay);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onplay =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onplay,
                    );
                __widl_f_set_onplay_Window(self_, onplay)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onplaying_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onplaying` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onplaying(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onplaying_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onplaying_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onplaying_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onplaying_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onplaying` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onplaying(&self, onplaying: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onplaying_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onplaying: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onplaying_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onplaying: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onplaying);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onplaying =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onplaying,
                    );
                __widl_f_set_onplaying_Window(self_, onplaying)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onprogress_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onprogress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onprogress(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onprogress_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onprogress_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onprogress_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onprogress_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onprogress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onprogress(&self, onprogress: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onprogress_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onprogress : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onprogress_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onprogress: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onprogress);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onprogress =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onprogress,
                    );
                __widl_f_set_onprogress_Window(self_, onprogress)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onratechange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onratechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onratechange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onratechange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onratechange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onratechange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onratechange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onratechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onratechange(&self, onratechange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onratechange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onratechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onratechange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onratechange: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onratechange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onratechange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onratechange,
                    );
                __widl_f_set_onratechange_Window(self_, onratechange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onreset_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onreset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onreset(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onreset_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onreset_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onreset_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onreset_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onreset` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onreset(&self, onreset: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onreset_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onreset: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onreset_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onreset: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onreset);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onreset =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onreset,
                    );
                __widl_f_set_onreset_Window(self_, onreset)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onresize_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onresize` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onresize(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onresize_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onresize_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onresize_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onresize_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onresize` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onresize(&self, onresize: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onresize_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onresize: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onresize_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onresize: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onresize);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onresize =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onresize,
                    );
                __widl_f_set_onresize_Window(self_, onresize)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onscroll_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onscroll` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onscroll(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onscroll_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onscroll_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onscroll_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onscroll_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onscroll` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onscroll(&self, onscroll: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onscroll_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onscroll: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onscroll_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onscroll: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onscroll);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onscroll =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onscroll,
                    );
                __widl_f_set_onscroll_Window(self_, onscroll)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onseeked_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onseeked` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onseeked(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onseeked_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onseeked_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onseeked_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onseeked_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onseeked` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onseeked(&self, onseeked: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onseeked_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onseeked: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onseeked_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onseeked: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onseeked);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onseeked =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onseeked,
                    );
                __widl_f_set_onseeked_Window(self_, onseeked)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onseeking_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onseeking` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onseeking(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onseeking_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onseeking_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onseeking_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onseeking_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onseeking` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onseeking(&self, onseeking: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onseeking_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onseeking: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onseeking_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onseeking: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onseeking);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onseeking =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onseeking,
                    );
                __widl_f_set_onseeking_Window(self_, onseeking)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onselect_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onselect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onselect(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onselect_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onselect_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onselect_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onselect_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onselect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onselect(&self, onselect: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onselect_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onselect: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onselect_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onselect: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onselect);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onselect =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onselect,
                    );
                __widl_f_set_onselect_Window(self_, onselect)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onshow_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onshow` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onshow(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onshow_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onshow_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onshow_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onshow_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onshow` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onshow(&self, onshow: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onshow_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onshow: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onshow_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onshow: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onshow);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onshow =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onshow,
                    );
                __widl_f_set_onshow_Window(self_, onshow)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onstalled_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onstalled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onstalled(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onstalled_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onstalled_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onstalled_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onstalled_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onstalled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onstalled(&self, onstalled: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onstalled_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onstalled: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onstalled_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onstalled: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onstalled);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onstalled =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onstalled,
                    );
                __widl_f_set_onstalled_Window(self_, onstalled)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onsubmit_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onsubmit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onsubmit(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onsubmit_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onsubmit_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onsubmit_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onsubmit_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onsubmit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onsubmit(&self, onsubmit: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onsubmit_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onsubmit: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onsubmit_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onsubmit: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onsubmit);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onsubmit =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onsubmit,
                    );
                __widl_f_set_onsubmit_Window(self_, onsubmit)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onsuspend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onsuspend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onsuspend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onsuspend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onsuspend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onsuspend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onsuspend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onsuspend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onsuspend(&self, onsuspend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onsuspend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onsuspend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onsuspend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onsuspend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onsuspend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onsuspend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onsuspend,
                    );
                __widl_f_set_onsuspend_Window(self_, onsuspend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontimeupdate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontimeupdate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontimeupdate(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontimeupdate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontimeupdate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontimeupdate_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontimeupdate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontimeupdate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontimeupdate(&self, ontimeupdate: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontimeupdate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontimeupdate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontimeupdate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontimeupdate: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontimeupdate);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontimeupdate =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontimeupdate,
                    );
                __widl_f_set_ontimeupdate_Window(self_, ontimeupdate)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onvolumechange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onvolumechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onvolumechange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onvolumechange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onvolumechange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onvolumechange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onvolumechange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onvolumechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onvolumechange(&self, onvolumechange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onvolumechange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onvolumechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onvolumechange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onvolumechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onvolumechange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onvolumechange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onvolumechange,
                    );
                __widl_f_set_onvolumechange_Window(self_, onvolumechange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwaiting_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onwaiting` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onwaiting(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwaiting_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwaiting_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwaiting_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwaiting_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onwaiting` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onwaiting(&self, onwaiting: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwaiting_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwaiting: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwaiting_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwaiting: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onwaiting);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwaiting =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwaiting,
                    );
                __widl_f_set_onwaiting_Window(self_, onwaiting)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onselectstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onselectstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onselectstart(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onselectstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onselectstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onselectstart_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onselectstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onselectstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onselectstart(&self, onselectstart: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onselectstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onselectstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onselectstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onselectstart: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onselectstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onselectstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onselectstart,
                    );
                __widl_f_set_onselectstart_Window(self_, onselectstart)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontoggle_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontoggle` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontoggle(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontoggle_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontoggle_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontoggle_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontoggle_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontoggle` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontoggle(&self, ontoggle: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontoggle_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontoggle: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontoggle_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontoggle: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontoggle);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontoggle =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontoggle,
                    );
                __widl_f_set_ontoggle_Window(self_, ontoggle)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointercancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointercancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointercancel(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointercancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointercancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointercancel_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointercancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointercancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointercancel(&self, onpointercancel: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointercancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointercancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointercancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointercancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onpointercancel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointercancel =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointercancel,
                    );
                __widl_f_set_onpointercancel_Window(self_, onpointercancel)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerdown_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointerdown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointerdown(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerdown_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerdown_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerdown_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerdown_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointerdown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerdown(&self, onpointerdown: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerdown_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerdown : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerdown_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerdown: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpointerdown);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerdown =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerdown,
                    );
                __widl_f_set_onpointerdown_Window(self_, onpointerdown)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerup_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointerup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointerup(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerup_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerup_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerup_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerup_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointerup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerup(&self, onpointerup: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerup_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerup : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerup_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerup: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpointerup);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerup =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerup,
                    );
                __widl_f_set_onpointerup_Window(self_, onpointerup)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointermove_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointermove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointermove(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointermove_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointermove_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointermove_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointermove_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointermove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointermove(&self, onpointermove: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointermove_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointermove : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointermove_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointermove: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpointermove);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointermove =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointermove,
                    );
                __widl_f_set_onpointermove_Window(self_, onpointermove)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerout_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointerout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointerout(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerout_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerout_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerout_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerout_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointerout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerout(&self, onpointerout: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerout_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerout : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerout_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerout: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpointerout);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerout =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerout,
                    );
                __widl_f_set_onpointerout_Window(self_, onpointerout)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerover_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointerover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointerover(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerover_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerover_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerover_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerover_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointerover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerover(&self, onpointerover: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerover_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerover : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerover_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerover: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpointerover);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerover =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerover,
                    );
                __widl_f_set_onpointerover_Window(self_, onpointerover)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerenter_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointerenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointerenter(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerenter_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerenter_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerenter_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerenter_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointerenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerenter(&self, onpointerenter: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerenter_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerenter_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onpointerenter);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerenter =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerenter,
                    );
                __widl_f_set_onpointerenter_Window(self_, onpointerenter)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerleave_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointerleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointerleave(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerleave_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerleave_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerleave_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerleave_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpointerleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerleave(&self, onpointerleave: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerleave_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerleave_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onpointerleave);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerleave =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerleave,
                    );
                __widl_f_set_onpointerleave_Window(self_, onpointerleave)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ongotpointercapture_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ongotpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ongotpointercapture(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ongotpointercapture_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ongotpointercapture_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ongotpointercapture_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ongotpointercapture_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ongotpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ongotpointercapture(&self, ongotpointercapture: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ongotpointercapture_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ongotpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ongotpointercapture_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ongotpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ongotpointercapture);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ongotpointercapture =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ongotpointercapture,
                    );
                __widl_f_set_ongotpointercapture_Window(self_, ongotpointercapture)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onlostpointercapture_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onlostpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onlostpointercapture(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onlostpointercapture_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onlostpointercapture_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onlostpointercapture_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onlostpointercapture_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onlostpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onlostpointercapture(&self, onlostpointercapture: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onlostpointercapture_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onlostpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onlostpointercapture_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onlostpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onlostpointercapture);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onlostpointercapture =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onlostpointercapture,
                    );
                __widl_f_set_onlostpointercapture_Window(self_, onlostpointercapture)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onanimationcancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onanimationcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onanimationcancel(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onanimationcancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onanimationcancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onanimationcancel_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationcancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onanimationcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onanimationcancel(&self, onanimationcancel: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onanimationcancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onanimationcancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onanimationcancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onanimationcancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onanimationcancel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onanimationcancel =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onanimationcancel,
                    );
                __widl_f_set_onanimationcancel_Window(self_, onanimationcancel)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onanimationend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onanimationend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onanimationend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onanimationend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onanimationend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onanimationend(&self, onanimationend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onanimationend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onanimationend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onanimationend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onanimationend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onanimationend,
                    );
                __widl_f_set_onanimationend_Window(self_, onanimationend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onanimationiteration_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onanimationiteration(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onanimationiteration_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onanimationiteration_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onanimationiteration_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationiteration_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onanimationiteration(&self, onanimationiteration: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onanimationiteration_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onanimationiteration_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onanimationiteration);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onanimationiteration =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onanimationiteration,
                    );
                __widl_f_set_onanimationiteration_Window(self_, onanimationiteration)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onanimationstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onanimationstart(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onanimationstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onanimationstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onanimationstart_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onanimationstart(&self, onanimationstart: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onanimationstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onanimationstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onanimationstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onanimationstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onanimationstart,
                    );
                __widl_f_set_onanimationstart_Window(self_, onanimationstart)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontransitioncancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontransitioncancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontransitioncancel(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontransitioncancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontransitioncancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontransitioncancel_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitioncancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontransitioncancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontransitioncancel(&self, ontransitioncancel: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontransitioncancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontransitioncancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontransitioncancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontransitioncancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ontransitioncancel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontransitioncancel =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontransitioncancel,
                    );
                __widl_f_set_ontransitioncancel_Window(self_, ontransitioncancel)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontransitionend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontransitionend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontransitionend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontransitionend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontransitionend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontransitionend(&self, ontransitionend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontransitionend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontransitionend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ontransitionend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontransitionend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontransitionend,
                    );
                __widl_f_set_ontransitionend_Window(self_, ontransitionend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontransitionrun_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontransitionrun` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontransitionrun(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontransitionrun_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontransitionrun_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontransitionrun_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionrun_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontransitionrun` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontransitionrun(&self, ontransitionrun: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontransitionrun_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontransitionrun : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontransitionrun_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontransitionrun : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ontransitionrun);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontransitionrun =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontransitionrun,
                    );
                __widl_f_set_ontransitionrun_Window(self_, ontransitionrun)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontransitionstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontransitionstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontransitionstart(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontransitionstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontransitionstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontransitionstart_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontransitionstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontransitionstart(&self, ontransitionstart: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontransitionstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontransitionstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontransitionstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontransitionstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ontransitionstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontransitionstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontransitionstart,
                    );
                __widl_f_set_ontransitionstart_Window(self_, ontransitionstart)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onwebkitanimationend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwebkitanimationend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwebkitanimationend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwebkitanimationend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onwebkitanimationend(&self, onwebkitanimationend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwebkitanimationend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwebkitanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwebkitanimationend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwebkitanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onwebkitanimationend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwebkitanimationend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwebkitanimationend,
                    );
                __widl_f_set_onwebkitanimationend_Window(self_, onwebkitanimationend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationiteration_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onwebkitanimationiteration(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwebkitanimationiteration_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwebkitanimationiteration_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwebkitanimationiteration_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationiteration_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onwebkitanimationiteration(
        &self,
        onwebkitanimationiteration: Option<&::js_sys::Function>,
    ) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwebkitanimationiteration_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwebkitanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwebkitanimationiteration_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwebkitanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onwebkitanimationiteration);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwebkitanimationiteration =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwebkitanimationiteration,
                    );
                __widl_f_set_onwebkitanimationiteration_Window(self_, onwebkitanimationiteration)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onwebkitanimationstart(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwebkitanimationstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwebkitanimationstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwebkitanimationstart_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onwebkitanimationstart(&self, onwebkitanimationstart: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwebkitanimationstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwebkitanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwebkitanimationstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwebkitanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onwebkitanimationstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwebkitanimationstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwebkitanimationstart,
                    );
                __widl_f_set_onwebkitanimationstart_Window(self_, onwebkitanimationstart)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwebkittransitionend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onwebkittransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onwebkittransitionend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwebkittransitionend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwebkittransitionend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwebkittransitionend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkittransitionend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onwebkittransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onwebkittransitionend(&self, onwebkittransitionend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwebkittransitionend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwebkittransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwebkittransitionend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwebkittransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onwebkittransitionend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwebkittransitionend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwebkittransitionend,
                    );
                __widl_f_set_onwebkittransitionend_Window(self_, onwebkittransitionend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onerror_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onerror(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onerror_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onerror_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onerror_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onerror_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onerror(&self, onerror: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onerror_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onerror: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onerror_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onerror: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onerror);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onerror =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onerror,
                    );
                __widl_f_set_onerror_Window(self_, onerror)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontouchstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontouchstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontouchstart(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontouchstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontouchstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontouchstart_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontouchstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontouchstart(&self, ontouchstart: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontouchstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontouchstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontouchstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontouchstart: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontouchstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontouchstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontouchstart,
                    );
                __widl_f_set_ontouchstart_Window(self_, ontouchstart)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontouchend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontouchend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontouchend(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontouchend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontouchend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontouchend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontouchend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontouchend(&self, ontouchend: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontouchend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontouchend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontouchend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontouchend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontouchend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontouchend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontouchend,
                    );
                __widl_f_set_ontouchend_Window(self_, ontouchend)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontouchmove_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontouchmove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontouchmove(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontouchmove_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontouchmove_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontouchmove_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchmove_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontouchmove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontouchmove(&self, ontouchmove: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontouchmove_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontouchmove : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontouchmove_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontouchmove: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontouchmove);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontouchmove =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontouchmove,
                    );
                __widl_f_set_ontouchmove_Window(self_, ontouchmove)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontouchcancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontouchcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontouchcancel(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontouchcancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontouchcancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontouchcancel_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchcancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ontouchcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontouchcancel(&self, ontouchcancel: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontouchcancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontouchcancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontouchcancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontouchcancel: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontouchcancel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontouchcancel =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontouchcancel,
                    );
                __widl_f_set_ontouchcancel_Window(self_, ontouchcancel)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onafterprint_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onafterprint` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onafterprint(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onafterprint_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onafterprint_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onafterprint_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onafterprint_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onafterprint` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onafterprint(&self, onafterprint: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onafterprint_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onafterprint : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onafterprint_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onafterprint: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onafterprint);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onafterprint =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onafterprint,
                    );
                __widl_f_set_onafterprint_Window(self_, onafterprint)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onbeforeprint_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onbeforeprint` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onbeforeprint(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onbeforeprint_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onbeforeprint_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onbeforeprint_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onbeforeprint_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onbeforeprint` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onbeforeprint(&self, onbeforeprint: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onbeforeprint_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onbeforeprint : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onbeforeprint_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onbeforeprint: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onbeforeprint);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onbeforeprint =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onbeforeprint,
                    );
                __widl_f_set_onbeforeprint_Window(self_, onbeforeprint)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onbeforeunload_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onbeforeunload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onbeforeunload(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onbeforeunload_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onbeforeunload_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onbeforeunload_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onbeforeunload_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onbeforeunload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onbeforeunload(&self, onbeforeunload: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onbeforeunload_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onbeforeunload : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onbeforeunload_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onbeforeunload : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onbeforeunload);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onbeforeunload =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onbeforeunload,
                    );
                __widl_f_set_onbeforeunload_Window(self_, onbeforeunload)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onhashchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onhashchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onhashchange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onhashchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onhashchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onhashchange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onhashchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onhashchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onhashchange(&self, onhashchange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onhashchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onhashchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onhashchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onhashchange: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onhashchange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onhashchange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onhashchange,
                    );
                __widl_f_set_onhashchange_Window(self_, onhashchange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onlanguagechange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onlanguagechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onlanguagechange(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onlanguagechange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onlanguagechange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onlanguagechange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onlanguagechange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onlanguagechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onlanguagechange(&self, onlanguagechange: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onlanguagechange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onlanguagechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onlanguagechange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onlanguagechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onlanguagechange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onlanguagechange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onlanguagechange,
                    );
                __widl_f_set_onlanguagechange_Window(self_, onlanguagechange)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmessage_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmessage` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmessage(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmessage_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmessage_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmessage_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmessage_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmessage` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmessage(&self, onmessage: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmessage_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmessage: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmessage_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmessage: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmessage);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmessage =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmessage,
                    );
                __widl_f_set_onmessage_Window(self_, onmessage)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmessageerror_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmessageerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmessageerror(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmessageerror_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmessageerror_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmessageerror_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmessageerror_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onmessageerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmessageerror(&self, onmessageerror: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmessageerror_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmessageerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmessageerror_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmessageerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onmessageerror);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmessageerror =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmessageerror,
                    );
                __widl_f_set_onmessageerror_Window(self_, onmessageerror)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onoffline_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onoffline` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onoffline(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onoffline_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onoffline_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onoffline_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onoffline_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onoffline` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onoffline(&self, onoffline: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onoffline_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onoffline: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onoffline_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onoffline: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onoffline);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onoffline =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onoffline,
                    );
                __widl_f_set_onoffline_Window(self_, onoffline)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ononline_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ononline` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ononline(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ononline_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ononline_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ononline_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ononline_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `ononline` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ononline(&self, ononline: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ononline_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ononline: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ononline_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ononline: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ononline);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ononline =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ononline,
                    );
                __widl_f_set_ononline_Window(self_, ononline)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpagehide_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpagehide` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpagehide(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpagehide_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpagehide_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpagehide_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpagehide_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpagehide` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpagehide(&self, onpagehide: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpagehide_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpagehide : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpagehide_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpagehide: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpagehide);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpagehide =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpagehide,
                    );
                __widl_f_set_onpagehide_Window(self_, onpagehide)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpageshow_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpageshow` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpageshow(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpageshow_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpageshow_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpageshow_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpageshow_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpageshow` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpageshow(&self, onpageshow: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpageshow_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpageshow : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpageshow_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpageshow: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpageshow);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpageshow =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpageshow,
                    );
                __widl_f_set_onpageshow_Window(self_, onpageshow)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpopstate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpopstate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpopstate(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpopstate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpopstate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpopstate_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpopstate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onpopstate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpopstate(&self, onpopstate: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpopstate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpopstate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpopstate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpopstate: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpopstate);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpopstate =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpopstate,
                    );
                __widl_f_set_onpopstate_Window(self_, onpopstate)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onstorage_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onstorage` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onstorage(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onstorage_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onstorage_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onstorage_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onstorage_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onstorage` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onstorage(&self, onstorage: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onstorage_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onstorage: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onstorage_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onstorage: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onstorage);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onstorage =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onstorage,
                    );
                __widl_f_set_onstorage_Window(self_, onstorage)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onunload_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onunload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onunload(&self) -> Option<::js_sys::Function> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onunload_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onunload_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onunload_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onunload_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `onunload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onunload(&self, onunload: Option<&::js_sys::Function>) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onunload_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onunload: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onunload_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onunload: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onunload);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onunload =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onunload,
                    );
                __widl_f_set_onunload_Window(self_, onunload)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_atob_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `atob()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/atob)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn atob(&self, atob: &str) -> Result<String, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_atob_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                atob: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_atob_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            atob: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(atob);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let atob = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(atob);
                __widl_f_atob_Window(self_, atob)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_btoa_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `btoa()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/btoa)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn btoa(&self, btoa: &str) -> Result<String, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_btoa_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                btoa: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_btoa_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            btoa: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(btoa);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let btoa = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(btoa);
                __widl_f_btoa_Window(self_, btoa)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_clear_interval_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `clearInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn clear_interval(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_clear_interval_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_clear_interval_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_clear_interval_Window(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_clear_interval_with_handle_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `clearInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn clear_interval_with_handle(&self, handle: i32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_clear_interval_with_handle_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handle: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_clear_interval_with_handle_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handle: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(handle);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handle = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handle);
                __widl_f_clear_interval_with_handle_Window(self_, handle)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_clear_timeout_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `clearTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn clear_timeout(&self) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_clear_timeout_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_clear_timeout_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_clear_timeout_Window(self_)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_clear_timeout_with_handle_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `clearTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn clear_timeout_with_handle(&self, handle: i32) {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_clear_timeout_with_handle_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handle: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_clear_timeout_with_handle_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handle: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(handle);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handle = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handle);
                __widl_f_clear_timeout_with_handle_Window(self_, handle)
            };
            ()
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_html_canvas_element_Window()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_html_canvas_element(
        &self,
        a_image: &HtmlCanvasElement,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_html_canvas_element_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_html_canvas_element_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                __widl_f_create_image_bitmap_with_html_canvas_element_Window(self_, a_image)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_buffer_source_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Object as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_buffer_source(
        &self,
        a_image: &::js_sys::Object,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_buffer_source_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_buffer_source_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                __widl_f_create_image_bitmap_with_buffer_source_Window(self_, a_image)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_u8_array_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&mut [u8] as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_u8_array(
        &self,
        a_image: &mut [u8],
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_u8_array_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_u8_array_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image = <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                __widl_f_create_image_bitmap_with_u8_array_Window(self_, a_image)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
        &self,
        a_image: &HtmlCanvasElement,
        a_sx: i32,
        a_sy: i32,
        a_sw: i32,
        a_sh: i32,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            drop(a_sx);
            drop(a_sy);
            drop(a_sw);
            drop(a_sh);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                __widl_f_create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Object as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
        &self,
        a_image: &::js_sys::Object,
        a_sx: i32,
        a_sy: i32,
        a_sw: i32,
        a_sh: i32,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            drop(a_sx);
            drop(a_sy);
            drop(a_sw);
            drop(a_sh);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                __widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&mut [u8] as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
        &self,
        a_image: &mut [u8],
        a_sx: i32,
        a_sy: i32,
        a_sw: i32,
        a_sh: i32,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            drop(a_sx);
            drop(a_sy);
            drop(a_sw);
            drop(a_sh);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image = <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                __widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_fetch_with_str_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `fetch()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn fetch_with_str(&self, input: &str) -> ::js_sys::Promise {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_fetch_with_str_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                input: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_fetch_with_str_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            input: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(input);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let input = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(input);
                __widl_f_fetch_with_str_Window(self_, input)
            };
            <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback(
        &self,
        handler: &::js_sys::Function,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                __widl_f_set_interval_with_callback_Window(self_, handler)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments: &::js_sys::Array,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(arguments);
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_Window(
                    self_, handler, timeout, arguments,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_0(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window(
                    self_, handler, timeout,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_1(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_2(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_3(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_4(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_5(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
        arguments_5: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            drop(arguments_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                let arguments_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_5,
                    );
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                    arguments_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(9u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_6(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
        arguments_5: &::wasm_bindgen::JsValue,
        arguments_6: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            drop(arguments_5);
            drop(arguments_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                let arguments_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_5,
                    );
                let arguments_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_6,
                    );
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                    arguments_5,
                    arguments_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(10u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_7(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
        arguments_5: &::wasm_bindgen::JsValue,
        arguments_6: &::wasm_bindgen::JsValue,
        arguments_7: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            drop(arguments_5);
            drop(arguments_6);
            drop(arguments_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                let arguments_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_5,
                    );
                let arguments_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_6,
                    );
                let arguments_7 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_7,
                    );
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                    arguments_5,
                    arguments_6,
                    arguments_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str(&self, handler: &str) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                __widl_f_set_interval_with_str_Window(self_, handler)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_Window()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused(
        &self,
        handler: &str,
        timeout: i32,
        unused: &::js_sys::Array,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(unused);
                __widl_f_set_interval_with_str_and_timeout_and_unused_Window(
                    self_, handler, timeout, unused,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_0_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_0(
        &self,
        handler: &str,
        timeout: i32,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_0_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_0_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                __widl_f_set_interval_with_str_and_timeout_and_unused_0_Window(
                    self_, handler, timeout,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_1_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_1(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_1_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_1_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                __widl_f_set_interval_with_str_and_timeout_and_unused_1_Window(
                    self_, handler, timeout, unused_1,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_2_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_2(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_2_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_2_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                __widl_f_set_interval_with_str_and_timeout_and_unused_2_Window(
                    self_, handler, timeout, unused_1, unused_2,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_3_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_3(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_3_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_3_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                __widl_f_set_interval_with_str_and_timeout_and_unused_3_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_4_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_4(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_4_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_4_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                __widl_f_set_interval_with_str_and_timeout_and_unused_4_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_5_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_5(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
        unused_5: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_5_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_5_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            drop(unused_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                let unused_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_5,
                    );
                __widl_f_set_interval_with_str_and_timeout_and_unused_5_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4, unused_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_6_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(9u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_6(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
        unused_5: &::wasm_bindgen::JsValue,
        unused_6: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_6_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_6_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            drop(unused_5);
            drop(unused_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                let unused_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_5,
                    );
                let unused_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_6,
                    );
                __widl_f_set_interval_with_str_and_timeout_and_unused_6_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4, unused_5,
                    unused_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_7_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(10u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_7(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
        unused_5: &::wasm_bindgen::JsValue,
        unused_6: &::wasm_bindgen::JsValue,
        unused_7: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_7_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_7_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            drop(unused_5);
            drop(unused_6);
            drop(unused_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                let unused_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_5,
                    );
                let unused_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_6,
                    );
                let unused_7 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_7,
                    );
                __widl_f_set_interval_with_str_and_timeout_and_unused_7_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4, unused_5,
                    unused_6, unused_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback(
        &self,
        handler: &::js_sys::Function,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                __widl_f_set_timeout_with_callback_Window(self_, handler)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments: &::js_sys::Array,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(arguments);
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window(
                    self_, handler, timeout, arguments,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_0(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window(
                    self_, handler, timeout,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_1(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_2(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_3(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_4(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_5(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
        arguments_5: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            drop(arguments_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                let arguments_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_5,
                    );
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                    arguments_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(9u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_6(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
        arguments_5: &::wasm_bindgen::JsValue,
        arguments_6: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            drop(arguments_5);
            drop(arguments_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                let arguments_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_5,
                    );
                let arguments_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_6,
                    );
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                    arguments_5,
                    arguments_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(10u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_7(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
        arguments_5: &::wasm_bindgen::JsValue,
        arguments_6: &::wasm_bindgen::JsValue,
        arguments_7: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            drop(arguments_5);
            drop(arguments_6);
            drop(arguments_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                let arguments_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_5,
                    );
                let arguments_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_6,
                    );
                let arguments_7 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_7,
                    );
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                    arguments_5,
                    arguments_6,
                    arguments_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str(&self, handler: &str) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                __widl_f_set_timeout_with_str_Window(self_, handler)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_Window()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused(
        &self,
        handler: &str,
        timeout: i32,
        unused: &::js_sys::Array,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(unused);
                __widl_f_set_timeout_with_str_and_timeout_and_unused_Window(
                    self_, handler, timeout, unused,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_0(
        &self,
        handler: &str,
        timeout: i32,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                __widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window(
                    self_, handler, timeout,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_1(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                __widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window(
                    self_, handler, timeout, unused_1,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_2(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                __widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window(
                    self_, handler, timeout, unused_1, unused_2,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_3(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                __widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_4(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                __widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_5(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
        unused_5: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            drop(unused_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                let unused_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_5,
                    );
                __widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4, unused_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(9u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_6(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
        unused_5: &::wasm_bindgen::JsValue,
        unused_6: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            drop(unused_5);
            drop(unused_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                let unused_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_5,
                    );
                let unused_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_6,
                    );
                __widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4, unused_5,
                    unused_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(10u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_7(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
        unused_5: &::wasm_bindgen::JsValue,
        unused_6: &::wasm_bindgen::JsValue,
        unused_7: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            drop(unused_5);
            drop(unused_6);
            drop(unused_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                let unused_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_5,
                    );
                let unused_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_6,
                    );
                let unused_7 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_7,
                    );
                __widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4, unused_5,
                    unused_6, unused_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_origin_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `origin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/origin)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn origin(&self) -> String {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_origin_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_origin_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_origin_Window(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_is_secure_context_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Window {
    #[allow(bad_style)]
    #[doc = "The `isSecureContext` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn is_secure_context(&self) -> bool {
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_is_secure_context_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_is_secure_context_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                 non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_is_secure_context_Window(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
impl KeyboardEvent {
    pub const DOM_KEY_LOCATION_STANDARD: u32 = 0u64 as u32;
}
impl KeyboardEvent {
    pub const DOM_KEY_LOCATION_LEFT: u32 = 1u64 as u32;
}
impl KeyboardEvent {
    pub const DOM_KEY_LOCATION_RIGHT: u32 = 2u64 as u32;
}
impl KeyboardEvent {
    pub const DOM_KEY_LOCATION_NUMPAD: u32 = 3u64 as u32;
}
impl Node {
    pub const ELEMENT_NODE: u16 = 1u64 as u16;
}
impl Node {
    pub const ATTRIBUTE_NODE: u16 = 2u64 as u16;
}
impl Node {
    pub const TEXT_NODE: u16 = 3u64 as u16;
}
impl Node {
    pub const CDATA_SECTION_NODE: u16 = 4u64 as u16;
}
impl Node {
    pub const ENTITY_REFERENCE_NODE: u16 = 5u64 as u16;
}
impl Node {
    pub const ENTITY_NODE: u16 = 6u64 as u16;
}
impl Node {
    pub const PROCESSING_INSTRUCTION_NODE: u16 = 7u64 as u16;
}
impl Node {
    pub const COMMENT_NODE: u16 = 8u64 as u16;
}
impl Node {
    pub const DOCUMENT_NODE: u16 = 9u64 as u16;
}
impl Node {
    pub const DOCUMENT_TYPE_NODE: u16 = 10u64 as u16;
}
impl Node {
    pub const DOCUMENT_FRAGMENT_NODE: u16 = 11u64 as u16;
}
impl Node {
    pub const NOTATION_NODE: u16 = 12u64 as u16;
}
impl Node {
    pub const DOCUMENT_POSITION_DISCONNECTED: u16 = 1u64 as u16;
}
impl Node {
    pub const DOCUMENT_POSITION_PRECEDING: u16 = 2u64 as u16;
}
impl Node {
    pub const DOCUMENT_POSITION_FOLLOWING: u16 = 4u64 as u16;
}
impl Node {
    pub const DOCUMENT_POSITION_CONTAINS: u16 = 8u64 as u16;
}
impl Node {
    pub const DOCUMENT_POSITION_CONTAINED_BY: u16 = 16u64 as u16;
}
impl Node {
    pub const DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: u16 = 32u64 as u16;
}
impl WebGlRenderingContext {
    pub const DEPTH_BUFFER_BIT: u32 = 256u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_BUFFER_BIT: u32 = 1024u64 as u32;
}
impl WebGlRenderingContext {
    pub const COLOR_BUFFER_BIT: u32 = 16384u64 as u32;
}
impl WebGlRenderingContext {
    pub const POINTS: u32 = 0u64 as u32;
}
impl WebGlRenderingContext {
    pub const LINES: u32 = 1u64 as u32;
}
impl WebGlRenderingContext {
    pub const LINE_LOOP: u32 = 2u64 as u32;
}
impl WebGlRenderingContext {
    pub const LINE_STRIP: u32 = 3u64 as u32;
}
impl WebGlRenderingContext {
    pub const TRIANGLES: u32 = 4u64 as u32;
}
impl WebGlRenderingContext {
    pub const TRIANGLE_STRIP: u32 = 5u64 as u32;
}
impl WebGlRenderingContext {
    pub const TRIANGLE_FAN: u32 = 6u64 as u32;
}
impl WebGlRenderingContext {
    pub const ZERO: u32 = 0i64 as u32;
}
impl WebGlRenderingContext {
    pub const ONE: u32 = 1u64 as u32;
}
impl WebGlRenderingContext {
    pub const SRC_COLOR: u32 = 768u64 as u32;
}
impl WebGlRenderingContext {
    pub const ONE_MINUS_SRC_COLOR: u32 = 769u64 as u32;
}
impl WebGlRenderingContext {
    pub const SRC_ALPHA: u32 = 770u64 as u32;
}
impl WebGlRenderingContext {
    pub const ONE_MINUS_SRC_ALPHA: u32 = 771u64 as u32;
}
impl WebGlRenderingContext {
    pub const DST_ALPHA: u32 = 772u64 as u32;
}
impl WebGlRenderingContext {
    pub const ONE_MINUS_DST_ALPHA: u32 = 773u64 as u32;
}
impl WebGlRenderingContext {
    pub const DST_COLOR: u32 = 774u64 as u32;
}
impl WebGlRenderingContext {
    pub const ONE_MINUS_DST_COLOR: u32 = 775u64 as u32;
}
impl WebGlRenderingContext {
    pub const SRC_ALPHA_SATURATE: u32 = 776u64 as u32;
}
impl WebGlRenderingContext {
    pub const FUNC_ADD: u32 = 32774u64 as u32;
}
impl WebGlRenderingContext {
    pub const BLEND_EQUATION: u32 = 32777u64 as u32;
}
impl WebGlRenderingContext {
    pub const BLEND_EQUATION_RGB: u32 = 32777u64 as u32;
}
impl WebGlRenderingContext {
    pub const BLEND_EQUATION_ALPHA: u32 = 34877u64 as u32;
}
impl WebGlRenderingContext {
    pub const FUNC_SUBTRACT: u32 = 32778u64 as u32;
}
impl WebGlRenderingContext {
    pub const FUNC_REVERSE_SUBTRACT: u32 = 32779u64 as u32;
}
impl WebGlRenderingContext {
    pub const BLEND_DST_RGB: u32 = 32968u64 as u32;
}
impl WebGlRenderingContext {
    pub const BLEND_SRC_RGB: u32 = 32969u64 as u32;
}
impl WebGlRenderingContext {
    pub const BLEND_DST_ALPHA: u32 = 32970u64 as u32;
}
impl WebGlRenderingContext {
    pub const BLEND_SRC_ALPHA: u32 = 32971u64 as u32;
}
impl WebGlRenderingContext {
    pub const CONSTANT_COLOR: u32 = 32769u64 as u32;
}
impl WebGlRenderingContext {
    pub const ONE_MINUS_CONSTANT_COLOR: u32 = 32770u64 as u32;
}
impl WebGlRenderingContext {
    pub const CONSTANT_ALPHA: u32 = 32771u64 as u32;
}
impl WebGlRenderingContext {
    pub const ONE_MINUS_CONSTANT_ALPHA: u32 = 32772u64 as u32;
}
impl WebGlRenderingContext {
    pub const BLEND_COLOR: u32 = 32773u64 as u32;
}
impl WebGlRenderingContext {
    pub const ARRAY_BUFFER: u32 = 34962u64 as u32;
}
impl WebGlRenderingContext {
    pub const ELEMENT_ARRAY_BUFFER: u32 = 34963u64 as u32;
}
impl WebGlRenderingContext {
    pub const ARRAY_BUFFER_BINDING: u32 = 34964u64 as u32;
}
impl WebGlRenderingContext {
    pub const ELEMENT_ARRAY_BUFFER_BINDING: u32 = 34965u64 as u32;
}
impl WebGlRenderingContext {
    pub const STREAM_DRAW: u32 = 35040u64 as u32;
}
impl WebGlRenderingContext {
    pub const STATIC_DRAW: u32 = 35044u64 as u32;
}
impl WebGlRenderingContext {
    pub const DYNAMIC_DRAW: u32 = 35048u64 as u32;
}
impl WebGlRenderingContext {
    pub const BUFFER_SIZE: u32 = 34660u64 as u32;
}
impl WebGlRenderingContext {
    pub const BUFFER_USAGE: u32 = 34661u64 as u32;
}
impl WebGlRenderingContext {
    pub const CURRENT_VERTEX_ATTRIB: u32 = 34342u64 as u32;
}
impl WebGlRenderingContext {
    pub const FRONT: u32 = 1028u64 as u32;
}
impl WebGlRenderingContext {
    pub const BACK: u32 = 1029u64 as u32;
}
impl WebGlRenderingContext {
    pub const FRONT_AND_BACK: u32 = 1032u64 as u32;
}
impl WebGlRenderingContext {
    pub const CULL_FACE: u32 = 2884u64 as u32;
}
impl WebGlRenderingContext {
    pub const BLEND: u32 = 3042u64 as u32;
}
impl WebGlRenderingContext {
    pub const DITHER: u32 = 3024u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_TEST: u32 = 2960u64 as u32;
}
impl WebGlRenderingContext {
    pub const DEPTH_TEST: u32 = 2929u64 as u32;
}
impl WebGlRenderingContext {
    pub const SCISSOR_TEST: u32 = 3089u64 as u32;
}
impl WebGlRenderingContext {
    pub const POLYGON_OFFSET_FILL: u32 = 32823u64 as u32;
}
impl WebGlRenderingContext {
    pub const SAMPLE_ALPHA_TO_COVERAGE: u32 = 32926u64 as u32;
}
impl WebGlRenderingContext {
    pub const SAMPLE_COVERAGE: u32 = 32928u64 as u32;
}
impl WebGlRenderingContext {
    pub const NO_ERROR: u32 = 0i64 as u32;
}
impl WebGlRenderingContext {
    pub const INVALID_ENUM: u32 = 1280u64 as u32;
}
impl WebGlRenderingContext {
    pub const INVALID_VALUE: u32 = 1281u64 as u32;
}
impl WebGlRenderingContext {
    pub const INVALID_OPERATION: u32 = 1282u64 as u32;
}
impl WebGlRenderingContext {
    pub const OUT_OF_MEMORY: u32 = 1285u64 as u32;
}
impl WebGlRenderingContext {
    pub const CW: u32 = 2304u64 as u32;
}
impl WebGlRenderingContext {
    pub const CCW: u32 = 2305u64 as u32;
}
impl WebGlRenderingContext {
    pub const LINE_WIDTH: u32 = 2849u64 as u32;
}
impl WebGlRenderingContext {
    pub const ALIASED_POINT_SIZE_RANGE: u32 = 33901u64 as u32;
}
impl WebGlRenderingContext {
    pub const ALIASED_LINE_WIDTH_RANGE: u32 = 33902u64 as u32;
}
impl WebGlRenderingContext {
    pub const CULL_FACE_MODE: u32 = 2885u64 as u32;
}
impl WebGlRenderingContext {
    pub const FRONT_FACE: u32 = 2886u64 as u32;
}
impl WebGlRenderingContext {
    pub const DEPTH_RANGE: u32 = 2928u64 as u32;
}
impl WebGlRenderingContext {
    pub const DEPTH_WRITEMASK: u32 = 2930u64 as u32;
}
impl WebGlRenderingContext {
    pub const DEPTH_CLEAR_VALUE: u32 = 2931u64 as u32;
}
impl WebGlRenderingContext {
    pub const DEPTH_FUNC: u32 = 2932u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_CLEAR_VALUE: u32 = 2961u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_FUNC: u32 = 2962u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_FAIL: u32 = 2964u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_PASS_DEPTH_FAIL: u32 = 2965u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_PASS_DEPTH_PASS: u32 = 2966u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_REF: u32 = 2967u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_VALUE_MASK: u32 = 2963u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_WRITEMASK: u32 = 2968u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_BACK_FUNC: u32 = 34816u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_BACK_FAIL: u32 = 34817u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_BACK_PASS_DEPTH_FAIL: u32 = 34818u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_BACK_PASS_DEPTH_PASS: u32 = 34819u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_BACK_REF: u32 = 36003u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_BACK_VALUE_MASK: u32 = 36004u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_BACK_WRITEMASK: u32 = 36005u64 as u32;
}
impl WebGlRenderingContext {
    pub const VIEWPORT: u32 = 2978u64 as u32;
}
impl WebGlRenderingContext {
    pub const SCISSOR_BOX: u32 = 3088u64 as u32;
}
impl WebGlRenderingContext {
    pub const COLOR_CLEAR_VALUE: u32 = 3106u64 as u32;
}
impl WebGlRenderingContext {
    pub const COLOR_WRITEMASK: u32 = 3107u64 as u32;
}
impl WebGlRenderingContext {
    pub const UNPACK_ALIGNMENT: u32 = 3317u64 as u32;
}
impl WebGlRenderingContext {
    pub const PACK_ALIGNMENT: u32 = 3333u64 as u32;
}
impl WebGlRenderingContext {
    pub const MAX_TEXTURE_SIZE: u32 = 3379u64 as u32;
}
impl WebGlRenderingContext {
    pub const MAX_VIEWPORT_DIMS: u32 = 3386u64 as u32;
}
impl WebGlRenderingContext {
    pub const SUBPIXEL_BITS: u32 = 3408u64 as u32;
}
impl WebGlRenderingContext {
    pub const RED_BITS: u32 = 3410u64 as u32;
}
impl WebGlRenderingContext {
    pub const GREEN_BITS: u32 = 3411u64 as u32;
}
impl WebGlRenderingContext {
    pub const BLUE_BITS: u32 = 3412u64 as u32;
}
impl WebGlRenderingContext {
    pub const ALPHA_BITS: u32 = 3413u64 as u32;
}
impl WebGlRenderingContext {
    pub const DEPTH_BITS: u32 = 3414u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_BITS: u32 = 3415u64 as u32;
}
impl WebGlRenderingContext {
    pub const POLYGON_OFFSET_UNITS: u32 = 10752u64 as u32;
}
impl WebGlRenderingContext {
    pub const POLYGON_OFFSET_FACTOR: u32 = 32824u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE_BINDING_2D: u32 = 32873u64 as u32;
}
impl WebGlRenderingContext {
    pub const SAMPLE_BUFFERS: u32 = 32936u64 as u32;
}
impl WebGlRenderingContext {
    pub const SAMPLES: u32 = 32937u64 as u32;
}
impl WebGlRenderingContext {
    pub const SAMPLE_COVERAGE_VALUE: u32 = 32938u64 as u32;
}
impl WebGlRenderingContext {
    pub const SAMPLE_COVERAGE_INVERT: u32 = 32939u64 as u32;
}
impl WebGlRenderingContext {
    pub const COMPRESSED_TEXTURE_FORMATS: u32 = 34467u64 as u32;
}
impl WebGlRenderingContext {
    pub const DONT_CARE: u32 = 4352u64 as u32;
}
impl WebGlRenderingContext {
    pub const FASTEST: u32 = 4353u64 as u32;
}
impl WebGlRenderingContext {
    pub const NICEST: u32 = 4354u64 as u32;
}
impl WebGlRenderingContext {
    pub const GENERATE_MIPMAP_HINT: u32 = 33170u64 as u32;
}
impl WebGlRenderingContext {
    pub const BYTE: u32 = 5120u64 as u32;
}
impl WebGlRenderingContext {
    pub const UNSIGNED_BYTE: u32 = 5121u64 as u32;
}
impl WebGlRenderingContext {
    pub const SHORT: u32 = 5122u64 as u32;
}
impl WebGlRenderingContext {
    pub const UNSIGNED_SHORT: u32 = 5123u64 as u32;
}
impl WebGlRenderingContext {
    pub const INT: u32 = 5124u64 as u32;
}
impl WebGlRenderingContext {
    pub const UNSIGNED_INT: u32 = 5125u64 as u32;
}
impl WebGlRenderingContext {
    pub const FLOAT: u32 = 5126u64 as u32;
}
impl WebGlRenderingContext {
    pub const DEPTH_COMPONENT: u32 = 6402u64 as u32;
}
impl WebGlRenderingContext {
    pub const ALPHA: u32 = 6406u64 as u32;
}
impl WebGlRenderingContext {
    pub const RGB: u32 = 6407u64 as u32;
}
impl WebGlRenderingContext {
    pub const RGBA: u32 = 6408u64 as u32;
}
impl WebGlRenderingContext {
    pub const LUMINANCE: u32 = 6409u64 as u32;
}
impl WebGlRenderingContext {
    pub const LUMINANCE_ALPHA: u32 = 6410u64 as u32;
}
impl WebGlRenderingContext {
    pub const UNSIGNED_SHORT_4_4_4_4: u32 = 32819u64 as u32;
}
impl WebGlRenderingContext {
    pub const UNSIGNED_SHORT_5_5_5_1: u32 = 32820u64 as u32;
}
impl WebGlRenderingContext {
    pub const UNSIGNED_SHORT_5_6_5: u32 = 33635u64 as u32;
}
impl WebGlRenderingContext {
    pub const FRAGMENT_SHADER: u32 = 35632u64 as u32;
}
impl WebGlRenderingContext {
    pub const VERTEX_SHADER: u32 = 35633u64 as u32;
}
impl WebGlRenderingContext {
    pub const MAX_VERTEX_ATTRIBS: u32 = 34921u64 as u32;
}
impl WebGlRenderingContext {
    pub const MAX_VERTEX_UNIFORM_VECTORS: u32 = 36347u64 as u32;
}
impl WebGlRenderingContext {
    pub const MAX_VARYING_VECTORS: u32 = 36348u64 as u32;
}
impl WebGlRenderingContext {
    pub const MAX_COMBINED_TEXTURE_IMAGE_UNITS: u32 = 35661u64 as u32;
}
impl WebGlRenderingContext {
    pub const MAX_VERTEX_TEXTURE_IMAGE_UNITS: u32 = 35660u64 as u32;
}
impl WebGlRenderingContext {
    pub const MAX_TEXTURE_IMAGE_UNITS: u32 = 34930u64 as u32;
}
impl WebGlRenderingContext {
    pub const MAX_FRAGMENT_UNIFORM_VECTORS: u32 = 36349u64 as u32;
}
impl WebGlRenderingContext {
    pub const SHADER_TYPE: u32 = 35663u64 as u32;
}
impl WebGlRenderingContext {
    pub const DELETE_STATUS: u32 = 35712u64 as u32;
}
impl WebGlRenderingContext {
    pub const LINK_STATUS: u32 = 35714u64 as u32;
}
impl WebGlRenderingContext {
    pub const VALIDATE_STATUS: u32 = 35715u64 as u32;
}
impl WebGlRenderingContext {
    pub const ATTACHED_SHADERS: u32 = 35717u64 as u32;
}
impl WebGlRenderingContext {
    pub const ACTIVE_UNIFORMS: u32 = 35718u64 as u32;
}
impl WebGlRenderingContext {
    pub const ACTIVE_ATTRIBUTES: u32 = 35721u64 as u32;
}
impl WebGlRenderingContext {
    pub const SHADING_LANGUAGE_VERSION: u32 = 35724u64 as u32;
}
impl WebGlRenderingContext {
    pub const CURRENT_PROGRAM: u32 = 35725u64 as u32;
}
impl WebGlRenderingContext {
    pub const NEVER: u32 = 512u64 as u32;
}
impl WebGlRenderingContext {
    pub const LESS: u32 = 513u64 as u32;
}
impl WebGlRenderingContext {
    pub const EQUAL: u32 = 514u64 as u32;
}
impl WebGlRenderingContext {
    pub const LEQUAL: u32 = 515u64 as u32;
}
impl WebGlRenderingContext {
    pub const GREATER: u32 = 516u64 as u32;
}
impl WebGlRenderingContext {
    pub const NOTEQUAL: u32 = 517u64 as u32;
}
impl WebGlRenderingContext {
    pub const GEQUAL: u32 = 518u64 as u32;
}
impl WebGlRenderingContext {
    pub const ALWAYS: u32 = 519u64 as u32;
}
impl WebGlRenderingContext {
    pub const KEEP: u32 = 7680u64 as u32;
}
impl WebGlRenderingContext {
    pub const REPLACE: u32 = 7681u64 as u32;
}
impl WebGlRenderingContext {
    pub const INCR: u32 = 7682u64 as u32;
}
impl WebGlRenderingContext {
    pub const DECR: u32 = 7683u64 as u32;
}
impl WebGlRenderingContext {
    pub const INVERT: u32 = 5386u64 as u32;
}
impl WebGlRenderingContext {
    pub const INCR_WRAP: u32 = 34055u64 as u32;
}
impl WebGlRenderingContext {
    pub const DECR_WRAP: u32 = 34056u64 as u32;
}
impl WebGlRenderingContext {
    pub const VENDOR: u32 = 7936u64 as u32;
}
impl WebGlRenderingContext {
    pub const RENDERER: u32 = 7937u64 as u32;
}
impl WebGlRenderingContext {
    pub const VERSION: u32 = 7938u64 as u32;
}
impl WebGlRenderingContext {
    pub const NEAREST: u32 = 9728u64 as u32;
}
impl WebGlRenderingContext {
    pub const LINEAR: u32 = 9729u64 as u32;
}
impl WebGlRenderingContext {
    pub const NEAREST_MIPMAP_NEAREST: u32 = 9984u64 as u32;
}
impl WebGlRenderingContext {
    pub const LINEAR_MIPMAP_NEAREST: u32 = 9985u64 as u32;
}
impl WebGlRenderingContext {
    pub const NEAREST_MIPMAP_LINEAR: u32 = 9986u64 as u32;
}
impl WebGlRenderingContext {
    pub const LINEAR_MIPMAP_LINEAR: u32 = 9987u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE_MAG_FILTER: u32 = 10240u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE_MIN_FILTER: u32 = 10241u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE_WRAP_S: u32 = 10242u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE_WRAP_T: u32 = 10243u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE_2D: u32 = 3553u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE: u32 = 5890u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE_CUBE_MAP: u32 = 34067u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE_BINDING_CUBE_MAP: u32 = 34068u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE_CUBE_MAP_POSITIVE_X: u32 = 34069u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE_CUBE_MAP_NEGATIVE_X: u32 = 34070u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE_CUBE_MAP_POSITIVE_Y: u32 = 34071u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE_CUBE_MAP_NEGATIVE_Y: u32 = 34072u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE_CUBE_MAP_POSITIVE_Z: u32 = 34073u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE_CUBE_MAP_NEGATIVE_Z: u32 = 34074u64 as u32;
}
impl WebGlRenderingContext {
    pub const MAX_CUBE_MAP_TEXTURE_SIZE: u32 = 34076u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE0: u32 = 33984u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE1: u32 = 33985u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE2: u32 = 33986u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE3: u32 = 33987u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE4: u32 = 33988u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE5: u32 = 33989u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE6: u32 = 33990u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE7: u32 = 33991u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE8: u32 = 33992u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE9: u32 = 33993u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE10: u32 = 33994u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE11: u32 = 33995u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE12: u32 = 33996u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE13: u32 = 33997u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE14: u32 = 33998u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE15: u32 = 33999u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE16: u32 = 34000u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE17: u32 = 34001u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE18: u32 = 34002u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE19: u32 = 34003u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE20: u32 = 34004u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE21: u32 = 34005u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE22: u32 = 34006u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE23: u32 = 34007u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE24: u32 = 34008u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE25: u32 = 34009u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE26: u32 = 34010u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE27: u32 = 34011u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE28: u32 = 34012u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE29: u32 = 34013u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE30: u32 = 34014u64 as u32;
}
impl WebGlRenderingContext {
    pub const TEXTURE31: u32 = 34015u64 as u32;
}
impl WebGlRenderingContext {
    pub const ACTIVE_TEXTURE: u32 = 34016u64 as u32;
}
impl WebGlRenderingContext {
    pub const REPEAT: u32 = 10497u64 as u32;
}
impl WebGlRenderingContext {
    pub const CLAMP_TO_EDGE: u32 = 33071u64 as u32;
}
impl WebGlRenderingContext {
    pub const MIRRORED_REPEAT: u32 = 33648u64 as u32;
}
impl WebGlRenderingContext {
    pub const FLOAT_VEC2: u32 = 35664u64 as u32;
}
impl WebGlRenderingContext {
    pub const FLOAT_VEC3: u32 = 35665u64 as u32;
}
impl WebGlRenderingContext {
    pub const FLOAT_VEC4: u32 = 35666u64 as u32;
}
impl WebGlRenderingContext {
    pub const INT_VEC2: u32 = 35667u64 as u32;
}
impl WebGlRenderingContext {
    pub const INT_VEC3: u32 = 35668u64 as u32;
}
impl WebGlRenderingContext {
    pub const INT_VEC4: u32 = 35669u64 as u32;
}
impl WebGlRenderingContext {
    pub const BOOL: u32 = 35670u64 as u32;
}
impl WebGlRenderingContext {
    pub const BOOL_VEC2: u32 = 35671u64 as u32;
}
impl WebGlRenderingContext {
    pub const BOOL_VEC3: u32 = 35672u64 as u32;
}
impl WebGlRenderingContext {
    pub const BOOL_VEC4: u32 = 35673u64 as u32;
}
impl WebGlRenderingContext {
    pub const FLOAT_MAT2: u32 = 35674u64 as u32;
}
impl WebGlRenderingContext {
    pub const FLOAT_MAT3: u32 = 35675u64 as u32;
}
impl WebGlRenderingContext {
    pub const FLOAT_MAT4: u32 = 35676u64 as u32;
}
impl WebGlRenderingContext {
    pub const SAMPLER_2D: u32 = 35678u64 as u32;
}
impl WebGlRenderingContext {
    pub const SAMPLER_CUBE: u32 = 35680u64 as u32;
}
impl WebGlRenderingContext {
    pub const VERTEX_ATTRIB_ARRAY_ENABLED: u32 = 34338u64 as u32;
}
impl WebGlRenderingContext {
    pub const VERTEX_ATTRIB_ARRAY_SIZE: u32 = 34339u64 as u32;
}
impl WebGlRenderingContext {
    pub const VERTEX_ATTRIB_ARRAY_STRIDE: u32 = 34340u64 as u32;
}
impl WebGlRenderingContext {
    pub const VERTEX_ATTRIB_ARRAY_TYPE: u32 = 34341u64 as u32;
}
impl WebGlRenderingContext {
    pub const VERTEX_ATTRIB_ARRAY_NORMALIZED: u32 = 34922u64 as u32;
}
impl WebGlRenderingContext {
    pub const VERTEX_ATTRIB_ARRAY_POINTER: u32 = 34373u64 as u32;
}
impl WebGlRenderingContext {
    pub const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: u32 = 34975u64 as u32;
}
impl WebGlRenderingContext {
    pub const IMPLEMENTATION_COLOR_READ_TYPE: u32 = 35738u64 as u32;
}
impl WebGlRenderingContext {
    pub const IMPLEMENTATION_COLOR_READ_FORMAT: u32 = 35739u64 as u32;
}
impl WebGlRenderingContext {
    pub const COMPILE_STATUS: u32 = 35713u64 as u32;
}
impl WebGlRenderingContext {
    pub const LOW_FLOAT: u32 = 36336u64 as u32;
}
impl WebGlRenderingContext {
    pub const MEDIUM_FLOAT: u32 = 36337u64 as u32;
}
impl WebGlRenderingContext {
    pub const HIGH_FLOAT: u32 = 36338u64 as u32;
}
impl WebGlRenderingContext {
    pub const LOW_INT: u32 = 36339u64 as u32;
}
impl WebGlRenderingContext {
    pub const MEDIUM_INT: u32 = 36340u64 as u32;
}
impl WebGlRenderingContext {
    pub const HIGH_INT: u32 = 36341u64 as u32;
}
impl WebGlRenderingContext {
    pub const FRAMEBUFFER: u32 = 36160u64 as u32;
}
impl WebGlRenderingContext {
    pub const RENDERBUFFER: u32 = 36161u64 as u32;
}
impl WebGlRenderingContext {
    pub const RGBA4: u32 = 32854u64 as u32;
}
impl WebGlRenderingContext {
    pub const RGB5_A1: u32 = 32855u64 as u32;
}
impl WebGlRenderingContext {
    pub const RGB565: u32 = 36194u64 as u32;
}
impl WebGlRenderingContext {
    pub const DEPTH_COMPONENT16: u32 = 33189u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_INDEX8: u32 = 36168u64 as u32;
}
impl WebGlRenderingContext {
    pub const DEPTH_STENCIL: u32 = 34041u64 as u32;
}
impl WebGlRenderingContext {
    pub const RENDERBUFFER_WIDTH: u32 = 36162u64 as u32;
}
impl WebGlRenderingContext {
    pub const RENDERBUFFER_HEIGHT: u32 = 36163u64 as u32;
}
impl WebGlRenderingContext {
    pub const RENDERBUFFER_INTERNAL_FORMAT: u32 = 36164u64 as u32;
}
impl WebGlRenderingContext {
    pub const RENDERBUFFER_RED_SIZE: u32 = 36176u64 as u32;
}
impl WebGlRenderingContext {
    pub const RENDERBUFFER_GREEN_SIZE: u32 = 36177u64 as u32;
}
impl WebGlRenderingContext {
    pub const RENDERBUFFER_BLUE_SIZE: u32 = 36178u64 as u32;
}
impl WebGlRenderingContext {
    pub const RENDERBUFFER_ALPHA_SIZE: u32 = 36179u64 as u32;
}
impl WebGlRenderingContext {
    pub const RENDERBUFFER_DEPTH_SIZE: u32 = 36180u64 as u32;
}
impl WebGlRenderingContext {
    pub const RENDERBUFFER_STENCIL_SIZE: u32 = 36181u64 as u32;
}
impl WebGlRenderingContext {
    pub const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: u32 = 36048u64 as u32;
}
impl WebGlRenderingContext {
    pub const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: u32 = 36049u64 as u32;
}
impl WebGlRenderingContext {
    pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: u32 = 36050u64 as u32;
}
impl WebGlRenderingContext {
    pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: u32 = 36051u64 as u32;
}
impl WebGlRenderingContext {
    pub const COLOR_ATTACHMENT0: u32 = 36064u64 as u32;
}
impl WebGlRenderingContext {
    pub const DEPTH_ATTACHMENT: u32 = 36096u64 as u32;
}
impl WebGlRenderingContext {
    pub const STENCIL_ATTACHMENT: u32 = 36128u64 as u32;
}
impl WebGlRenderingContext {
    pub const DEPTH_STENCIL_ATTACHMENT: u32 = 33306u64 as u32;
}
impl WebGlRenderingContext {
    pub const NONE: u32 = 0i64 as u32;
}
impl WebGlRenderingContext {
    pub const FRAMEBUFFER_COMPLETE: u32 = 36053u64 as u32;
}
impl WebGlRenderingContext {
    pub const FRAMEBUFFER_INCOMPLETE_ATTACHMENT: u32 = 36054u64 as u32;
}
impl WebGlRenderingContext {
    pub const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: u32 = 36055u64 as u32;
}
impl WebGlRenderingContext {
    pub const FRAMEBUFFER_INCOMPLETE_DIMENSIONS: u32 = 36057u64 as u32;
}
impl WebGlRenderingContext {
    pub const FRAMEBUFFER_UNSUPPORTED: u32 = 36061u64 as u32;
}
impl WebGlRenderingContext {
    pub const FRAMEBUFFER_BINDING: u32 = 36006u64 as u32;
}
impl WebGlRenderingContext {
    pub const RENDERBUFFER_BINDING: u32 = 36007u64 as u32;
}
impl WebGlRenderingContext {
    pub const MAX_RENDERBUFFER_SIZE: u32 = 34024u64 as u32;
}
impl WebGlRenderingContext {
    pub const INVALID_FRAMEBUFFER_OPERATION: u32 = 1286u64 as u32;
}
impl WebGlRenderingContext {
    pub const UNPACK_FLIP_Y_WEBGL: u32 = 37440u64 as u32;
}
impl WebGlRenderingContext {
    pub const UNPACK_PREMULTIPLY_ALPHA_WEBGL: u32 = 37441u64 as u32;
}
impl WebGlRenderingContext {
    pub const CONTEXT_LOST_WEBGL: u32 = 37442u64 as u32;
}
impl WebGlRenderingContext {
    pub const UNPACK_COLORSPACE_CONVERSION_WEBGL: u32 = 37443u64 as u32;
}
impl WebGlRenderingContext {
    pub const BROWSER_DEFAULT_WEBGL: u32 = 37444u64 as u32;
}
#[allow(non_upper_case_globals)]
#[cfg(target_arch = "wasm32")]
#[link_section = "__wasm_bindgen_unstable"]
#[doc(hidden)]
#[allow(clippy::all)]
pub static __WASM_BINDGEN_GENERATED_14bf07b037243da7: [u8; 103958usize] = {
    static _INCLUDED_FILES: &[&str] = &[];
    * b".\0\0\0{\"schema_version\":\"0.2.58\",\"version\":\"0.2.58\"}\xE0\x95\x01\0\0\0\xB4\x08\0\0\x02\x0BAudioBuffer\x1D__widl_instanceof_AudioBuffer\0\0\0\0&__widl_f_copy_from_channel_AudioBuffer\x01\0\0\x01\x0BAudioBuffer\x01\0\0\x01\x03\x05self_\x0Bdestination\x0Echannel_number\x0FcopyFromChannel\0\0\0<__widl_f_copy_from_channel_with_start_in_channel_AudioBuffer\x01\0\0\x01\x0BAudioBuffer\x01\0\0\x01\x04\x05self_\x0Bdestination\x0Echannel_number\x10start_in_channel\x0FcopyFromChannel\0\0\0$__widl_f_copy_to_channel_AudioBuffer\x01\0\0\x01\x0BAudioBuffer\x01\0\0\x01\x03\x05self_\x06source\x0Echannel_number\rcopyToChannel\0\0\0:__widl_f_copy_to_channel_with_start_in_channel_AudioBuffer\x01\0\0\x01\x0BAudioBuffer\x01\0\0\x01\x04\x05self_\x06source\x0Echannel_number\x10start_in_channel\rcopyToChannel\0\0\0%__widl_f_get_channel_data_AudioBuffer\x01\0\0\x01\x0BAudioBuffer\x01\0\0\x01\x02\x05self_\x07channel\x0EgetChannelData\0\0\0 __widl_f_sample_rate_AudioBuffer\0\0\0\x01\x0BAudioBuffer\x01\0\x01\nsampleRate\x01\x01\x05self_\nsampleRate\0\0\0\x1B__widl_f_length_AudioBuffer\0\0\0\x01\x0BAudioBuffer\x01\0\x01\x06length\x01\x01\x05self_\x06length\0\0\0\x1D__widl_f_duration_AudioBuffer\0\0\0\x01\x0BAudioBuffer\x01\0\x01\x08duration\x01\x01\x05self_\x08duration\0\0\0'__widl_f_number_of_channels_AudioBuffer\0\0\0\x01\x0BAudioBuffer\x01\0\x01\x10numberOfChannels\x01\x01\x05self_\x10numberOfChannels\0\0\x02\x15AudioBufferSourceNode'__widl_instanceof_AudioBufferSourceNode\0\0\0\0$__widl_f_start_AudioBufferSourceNode\x01\0\0\x01\x15AudioBufferSourceNode\x01\0\0\x01\x01\x05self_\x05start\0\0\0.__widl_f_start_with_when_AudioBufferSourceNode\x01\0\0\x01\x15AudioBufferSourceNode\x01\0\0\x01\x02\x05self_\x04when\x05start\0\0\0?__widl_f_start_with_when_and_grain_offset_AudioBufferSourceNode\x01\0\0\x01\x15AudioBufferSourceNode\x01\0\0\x01\x03\x05self_\x04when\x0Cgrain_offset\x05start\0\0\0R__widl_f_start_with_when_and_grain_offset_and_grain_duration_AudioBufferSourceNode\x01\0\0\x01\x15AudioBufferSourceNode\x01\0\0\x01\x04\x05self_\x04when\x0Cgrain_offset\x0Egrain_duration\x05start\0\0\0#__widl_f_stop_AudioBufferSourceNode\x01\0\0\x01\x15AudioBufferSourceNode\x01\0\0\x01\x01\x05self_\x04stop\0\0\0-__widl_f_stop_with_when_AudioBufferSourceNode\x01\0\0\x01\x15AudioBufferSourceNode\x01\0\0\x01\x02\x05self_\x04when\x04stop\0\0\0%__widl_f_buffer_AudioBufferSourceNode\0\0\0\x01\x15AudioBufferSourceNode\x01\0\x01\x06buffer\x01\x01\x05self_\x06buffer\0\0\0)__widl_f_set_buffer_AudioBufferSourceNode\0\0\0\x01\x15AudioBufferSourceNode\x01\0\x02\x06buffer\x01\x02\x05self_\x06buffer\x06buffer\0\0\0#__widl_f_loop_AudioBufferSourceNode\0\0\0\x01\x15AudioBufferSourceNode\x01\0\x01\x04loop\x01\x01\x05self_\x04loop\0\0\0'__widl_f_set_loop_AudioBufferSourceNode\0\0\0\x01\x15AudioBufferSourceNode\x01\0\x02\x04loop\x01\x02\x05self_\x05loop_\x04loop\0\0\0)__widl_f_loop_start_AudioBufferSourceNode\0\0\0\x01\x15AudioBufferSourceNode\x01\0\x01\tloopStart\x01\x01\x05self_\tloopStart\0\0\0-__widl_f_set_loop_start_AudioBufferSourceNode\0\0\0\x01\x15AudioBufferSourceNode\x01\0\x02\tloopStart\x01\x02\x05self_\nloop_start\tloopStart\0\0\0'__widl_f_loop_end_AudioBufferSourceNode\0\0\0\x01\x15AudioBufferSourceNode\x01\0\x01\x07loopEnd\x01\x01\x05self_\x07loopEnd\0\0\0+__widl_f_set_loop_end_AudioBufferSourceNode\0\0\0\x01\x15AudioBufferSourceNode\x01\0\x02\x07loopEnd\x01\x02\x05self_\x08loop_end\x07loopEnd\0\0\0&__widl_f_onended_AudioBufferSourceNode\0\0\0\x01\x15AudioBufferSourceNode\x01\0\x01\x07onended\x01\x01\x05self_\x07onended\0\0\0*__widl_f_set_onended_AudioBufferSourceNode\0\0\0\x01\x15AudioBufferSourceNode\x01\0\x02\x07onended\x01\x02\x05self_\x07onended\x07onended\0\0\x02\x0CAudioContext\x1E__widl_instanceof_AudioContext\x01\x06webkit\0\0\0\x19__widl_f_new_AudioContext\x01\0\0\x01\x0CAudioContext\0\x01\0\x03new\0\0\0\x1B__widl_f_close_AudioContext\x01\0\0\x01\x0CAudioContext\x01\0\0\x01\x01\x05self_\x05close\0\0\0\x1D__widl_f_suspend_AudioContext\x01\0\0\x01\x0CAudioContext\x01\0\0\x01\x01\x05self_\x07suspend\0\0\0#__widl_f_create_buffer_AudioContext\x01\0\0\x01\x0CAudioContext\x01\0\0\x01\x04\x05self_\x12number_of_channels\x06length\x0Bsample_rate\x0CcreateBuffer\0\0\0*__widl_f_create_buffer_source_AudioContext\x01\0\0\x01\x0CAudioContext\x01\0\0\x01\x01\x05self_\x12createBufferSource\0\0\0'__widl_f_decode_audio_data_AudioContext\x01\0\0\x01\x0CAudioContext\x01\0\0\x01\x02\x05self_\naudio_data\x0FdecodeAudioData\0\0\0=__widl_f_decode_audio_data_with_success_callback_AudioContext\x01\0\0\x01\x0CAudioContext\x01\0\0\x01\x03\x05self_\naudio_data\x10success_callback\x0FdecodeAudioData\0\0\0P__widl_f_decode_audio_data_with_success_callback_and_error_callback_AudioContext\x01\0\0\x01\x0CAudioContext\x01\0\0\x01\x04\x05self_\naudio_data\x10success_callback\x0Eerror_callback\x0FdecodeAudioData\0\0\0\x1C__widl_f_resume_AudioContext\x01\0\0\x01\x0CAudioContext\x01\0\0\x01\x01\x05self_\x06resume\0\0\0!__widl_f_destination_AudioContext\0\0\0\x01\x0CAudioContext\x01\0\x01\x0Bdestination\x01\x01\x05self_\x0Bdestination\0\0\0!__widl_f_sample_rate_AudioContext\0\0\0\x01\x0CAudioContext\x01\0\x01\nsampleRate\x01\x01\x05self_\nsampleRate\0\0\0\"__widl_f_current_time_AudioContext\0\0\0\x01\x0CAudioContext\x01\0\x01\x0BcurrentTime\x01\x01\x05self_\x0BcurrentTime\0\0\0#__widl_f_onstatechange_AudioContext\0\0\0\x01\x0CAudioContext\x01\0\x01\ronstatechange\x01\x01\x05self_\ronstatechange\0\0\0'__widl_f_set_onstatechange_AudioContext\0\0\0\x01\x0CAudioContext\x01\0\x02\ronstatechange\x01\x02\x05self_\ronstatechange\ronstatechange\0\0\x02\x14AudioDestinationNode&__widl_instanceof_AudioDestinationNode\0\0\0\0/__widl_f_max_channel_count_AudioDestinationNode\0\0\0\x01\x14AudioDestinationNode\x01\0\x01\x0FmaxChannelCount\x01\x01\x05self_\x0FmaxChannelCount\0\0\x02\tAudioNode\x1B__widl_instanceof_AudioNode\0\0\0\0*__widl_f_connect_with_audio_node_AudioNode\x01\0\0\x01\tAudioNode\x01\0\0\x01\x02\x05self_\x0Bdestination\x07connect\0\0\05__widl_f_connect_with_audio_node_and_output_AudioNode\x01\0\0\x01\tAudioNode\x01\0\0\x01\x03\x05self_\x0Bdestination\x06output\x07connect\0\0\0?__widl_f_connect_with_audio_node_and_output_and_input_AudioNode\x01\0\0\x01\tAudioNode\x01\0\0\x01\x04\x05self_\x0Bdestination\x06output\x05input\x07connect\0\0\0\x1D__widl_f_disconnect_AudioNode\x01\0\0\x01\tAudioNode\x01\0\0\x01\x01\x05self_\ndisconnect\0\0\0)__widl_f_disconnect_with_output_AudioNode\x01\0\0\x01\tAudioNode\x01\0\0\x01\x02\x05self_\x06output\ndisconnect\0\0\0-__widl_f_disconnect_with_audio_node_AudioNode\x01\0\0\x01\tAudioNode\x01\0\0\x01\x02\x05self_\x0Bdestination\ndisconnect\0\0\08__widl_f_disconnect_with_audio_node_and_output_AudioNode\x01\0\0\x01\tAudioNode\x01\0\0\x01\x03\x05self_\x0Bdestination\x06output\ndisconnect\0\0\0B__widl_f_disconnect_with_audio_node_and_output_and_input_AudioNode\x01\0\0\x01\tAudioNode\x01\0\0\x01\x04\x05self_\x0Bdestination\x06output\x05input\ndisconnect\0\0\0#__widl_f_number_of_inputs_AudioNode\0\0\0\x01\tAudioNode\x01\0\x01\x0EnumberOfInputs\x01\x01\x05self_\x0EnumberOfInputs\0\0\0$__widl_f_number_of_outputs_AudioNode\0\0\0\x01\tAudioNode\x01\0\x01\x0FnumberOfOutputs\x01\x01\x05self_\x0FnumberOfOutputs\0\0\0 __widl_f_channel_count_AudioNode\0\0\0\x01\tAudioNode\x01\0\x01\x0CchannelCount\x01\x01\x05self_\x0CchannelCount\0\0\0$__widl_f_set_channel_count_AudioNode\0\0\0\x01\tAudioNode\x01\0\x02\x0CchannelCount\x01\x02\x05self_\rchannel_count\x0CchannelCount\0\0\x02\x08Document\x1A__widl_instanceof_Document\0\0\0\0\x15__widl_f_new_Document\x01\0\0\x01\x08Document\0\x01\0\x03new\0\0\0\x1C__widl_f_adopt_node_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x02\x05self_\x04node\tadoptNode\0\0\0 __widl_f_create_element_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x02\x05self_\nlocal_name\rcreateElement\0\0\0)__widl_f_create_element_with_str_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x03\x05self_\nlocal_name\x07options\rcreateElement\0\0\0#__widl_f_create_element_ns_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x03\x05self_\tnamespace\x0Equalified_name\x0FcreateElementNS\0\0\0,__widl_f_create_element_ns_with_str_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x04\x05self_\tnamespace\x0Equalified_name\x07options\x0FcreateElementNS\0\0\0-__widl_f_enable_style_sheets_for_set_Document\0\0\0\x01\x08Document\x01\0\0\x01\x02\x05self_\x04name\x17enableStyleSheetsForSet\0\0\0!__widl_f_exit_fullscreen_Document\0\0\0\x01\x08Document\x01\0\0\x01\x01\x05self_\x0EexitFullscreen\0\0\0#__widl_f_exit_pointer_lock_Document\0\0\0\x01\x08Document\x01\0\0\x01\x01\x05self_\x0FexitPointerLock\0\0\0 __widl_f_get_animations_Document\0\0\0\x01\x08Document\x01\0\0\x01\x01\x05self_\rgetAnimations\0\0\0#__widl_f_get_element_by_id_Document\0\0\0\x01\x08Document\x01\0\0\x01\x02\x05self_\nelement_id\x0EgetElementById\0\0\0\x1B__widl_f_has_focus_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x01\x05self_\x08hasFocus\0\0\0\x1D__widl_f_import_node_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x02\x05self_\x04node\nimportNode\0\0\0'__widl_f_import_node_with_deep_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x03\x05self_\x04node\x04deep\nimportNode\0\0\0 __widl_f_query_selector_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x02\x05self_\tselectors\rquerySelector\0\0\0!__widl_f_release_capture_Document\0\0\0\x01\x08Document\x01\0\0\x01\x01\x05self_\x0EreleaseCapture\0\0\0\x15__widl_f_url_Document\x01\0\0\x01\x08Document\x01\0\x01\x03URL\x01\x01\x05self_\x03URL\0\0\0\x1E__widl_f_document_uri_Document\x01\0\0\x01\x08Document\x01\0\x01\x0BdocumentURI\x01\x01\x05self_\x0BdocumentURI\0\0\0\x1D__widl_f_compat_mode_Document\0\0\0\x01\x08Document\x01\0\x01\ncompatMode\x01\x01\x05self_\ncompatMode\0\0\0\x1F__widl_f_character_set_Document\0\0\0\x01\x08Document\x01\0\x01\x0CcharacterSet\x01\x01\x05self_\x0CcharacterSet\0\0\0\x19__widl_f_charset_Document\0\0\0\x01\x08Document\x01\0\x01\x07charset\x01\x01\x05self_\x07charset\0\0\0 __widl_f_input_encoding_Document\0\0\0\x01\x08Document\x01\0\x01\rinputEncoding\x01\x01\x05self_\rinputEncoding\0\0\0\x1E__widl_f_content_type_Document\0\0\0\x01\x08Document\x01\0\x01\x0BcontentType\x01\x01\x05self_\x0BcontentType\0\0\0\"__widl_f_document_element_Document\0\0\0\x01\x08Document\x01\0\x01\x0FdocumentElement\x01\x01\x05self_\x0FdocumentElement\0\0\0\x1A__widl_f_referrer_Document\0\0\0\x01\x08Document\x01\0\x01\x08referrer\x01\x01\x05self_\x08referrer\0\0\0\x1F__widl_f_last_modified_Document\0\0\0\x01\x08Document\x01\0\x01\x0ClastModified\x01\x01\x05self_\x0ClastModified\0\0\0\x1D__widl_f_ready_state_Document\0\0\0\x01\x08Document\x01\0\x01\nreadyState\x01\x01\x05self_\nreadyState\0\0\0\x17__widl_f_title_Document\0\0\0\x01\x08Document\x01\0\x01\x05title\x01\x01\x05self_\x05title\0\0\0\x1B__widl_f_set_title_Document\0\0\0\x01\x08Document\x01\0\x02\x05title\x01\x02\x05self_\x05title\x05title\0\0\0\x15__widl_f_dir_Document\0\0\0\x01\x08Document\x01\0\x01\x03dir\x01\x01\x05self_\x03dir\0\0\0\x19__widl_f_set_dir_Document\0\0\0\x01\x08Document\x01\0\x02\x03dir\x01\x02\x05self_\x03dir\x03dir\0\0\0\x1E__widl_f_default_view_Document\0\0\0\x01\x08Document\x01\0\x01\x0BdefaultView\x01\x01\x05self_\x0BdefaultView\0\0\0$__widl_f_onreadystatechange_Document\0\0\0\x01\x08Document\x01\0\x01\x12onreadystatechange\x01\x01\x05self_\x12onreadystatechange\0\0\0(__widl_f_set_onreadystatechange_Document\0\0\0\x01\x08Document\x01\0\x02\x12onreadystatechange\x01\x02\x05self_\x12onreadystatechange\x12onreadystatechange\0\0\0'__widl_f_onbeforescriptexecute_Document\0\0\0\x01\x08Document\x01\0\x01\x15onbeforescriptexecute\x01\x01\x05self_\x15onbeforescriptexecute\0\0\0+__widl_f_set_onbeforescriptexecute_Document\0\0\0\x01\x08Document\x01\0\x02\x15onbeforescriptexecute\x01\x02\x05self_\x15onbeforescriptexecute\x15onbeforescriptexecute\0\0\0&__widl_f_onafterscriptexecute_Document\0\0\0\x01\x08Document\x01\0\x01\x14onafterscriptexecute\x01\x01\x05self_\x14onafterscriptexecute\0\0\0*__widl_f_set_onafterscriptexecute_Document\0\0\0\x01\x08Document\x01\0\x02\x14onafterscriptexecute\x01\x02\x05self_\x14onafterscriptexecute\x14onafterscriptexecute\0\0\0#__widl_f_onselectionchange_Document\0\0\0\x01\x08Document\x01\0\x01\x11onselectionchange\x01\x01\x05self_\x11onselectionchange\0\0\0'__widl_f_set_onselectionchange_Document\0\0\0\x01\x08Document\x01\0\x02\x11onselectionchange\x01\x02\x05self_\x11onselectionchange\x11onselectionchange\0\0\0 __widl_f_current_script_Document\0\0\0\x01\x08Document\x01\0\x01\rcurrentScript\x01\x01\x05self_\rcurrentScript\0\0\0\x1C__widl_f_fullscreen_Document\0\0\0\x01\x08Document\x01\0\x01\nfullscreen\x01\x01\x05self_\nfullscreen\0\0\0$__widl_f_fullscreen_enabled_Document\0\0\0\x01\x08Document\x01\0\x01\x11fullscreenEnabled\x01\x01\x05self_\x11fullscreenEnabled\0\0\0$__widl_f_onfullscreenchange_Document\0\0\0\x01\x08Document\x01\0\x01\x12onfullscreenchange\x01\x01\x05self_\x12onfullscreenchange\0\0\0(__widl_f_set_onfullscreenchange_Document\0\0\0\x01\x08Document\x01\0\x02\x12onfullscreenchange\x01\x02\x05self_\x12onfullscreenchange\x12onfullscreenchange\0\0\0#__widl_f_onfullscreenerror_Document\0\0\0\x01\x08Document\x01\0\x01\x11onfullscreenerror\x01\x01\x05self_\x11onfullscreenerror\0\0\0'__widl_f_set_onfullscreenerror_Document\0\0\0\x01\x08Document\x01\0\x02\x11onfullscreenerror\x01\x02\x05self_\x11onfullscreenerror\x11onfullscreenerror\0\0\0%__widl_f_onpointerlockchange_Document\0\0\0\x01\x08Document\x01\0\x01\x13onpointerlockchange\x01\x01\x05self_\x13onpointerlockchange\0\0\0)__widl_f_set_onpointerlockchange_Document\0\0\0\x01\x08Document\x01\0\x02\x13onpointerlockchange\x01\x02\x05self_\x13onpointerlockchange\x13onpointerlockchange\0\0\0$__widl_f_onpointerlockerror_Document\0\0\0\x01\x08Document\x01\0\x01\x12onpointerlockerror\x01\x01\x05self_\x12onpointerlockerror\0\0\0(__widl_f_set_onpointerlockerror_Document\0\0\0\x01\x08Document\x01\0\x02\x12onpointerlockerror\x01\x02\x05self_\x12onpointerlockerror\x12onpointerlockerror\0\0\0\x18__widl_f_hidden_Document\0\0\0\x01\x08Document\x01\0\x01\x06hidden\x01\x01\x05self_\x06hidden\0\0\0$__widl_f_onvisibilitychange_Document\0\0\0\x01\x08Document\x01\0\x01\x12onvisibilitychange\x01\x01\x05self_\x12onvisibilitychange\0\0\0(__widl_f_set_onvisibilitychange_Document\0\0\0\x01\x08Document\x01\0\x02\x12onvisibilitychange\x01\x02\x05self_\x12onvisibilitychange\x12onvisibilitychange\0\0\0*__widl_f_selected_style_sheet_set_Document\0\0\0\x01\x08Document\x01\0\x01\x15selectedStyleSheetSet\x01\x01\x05self_\x15selectedStyleSheetSet\0\0\0.__widl_f_set_selected_style_sheet_set_Document\0\0\0\x01\x08Document\x01\0\x02\x15selectedStyleSheetSet\x01\x02\x05self_\x18selected_style_sheet_set\x15selectedStyleSheetSet\0\0\0&__widl_f_last_style_sheet_set_Document\0\0\0\x01\x08Document\x01\0\x01\x11lastStyleSheetSet\x01\x01\x05self_\x11lastStyleSheetSet\0\0\0+__widl_f_preferred_style_sheet_set_Document\0\0\0\x01\x08Document\x01\0\x01\x16preferredStyleSheetSet\x01\x01\x05self_\x16preferredStyleSheetSet\0\0\0#__widl_f_scrolling_element_Document\0\0\0\x01\x08Document\x01\0\x01\x10scrollingElement\x01\x01\x05self_\x10scrollingElement\0\0\0\x18__widl_f_oncopy_Document\0\0\0\x01\x08Document\x01\0\x01\x06oncopy\x01\x01\x05self_\x06oncopy\0\0\0\x1C__widl_f_set_oncopy_Document\0\0\0\x01\x08Document\x01\0\x02\x06oncopy\x01\x02\x05self_\x06oncopy\x06oncopy\0\0\0\x17__widl_f_oncut_Document\0\0\0\x01\x08Document\x01\0\x01\x05oncut\x01\x01\x05self_\x05oncut\0\0\0\x1B__widl_f_set_oncut_Document\0\0\0\x01\x08Document\x01\0\x02\x05oncut\x01\x02\x05self_\x05oncut\x05oncut\0\0\0\x19__widl_f_onpaste_Document\0\0\0\x01\x08Document\x01\0\x01\x07onpaste\x01\x01\x05self_\x07onpaste\0\0\0\x1D__widl_f_set_onpaste_Document\0\0\0\x01\x08Document\x01\0\x02\x07onpaste\x01\x02\x05self_\x07onpaste\x07onpaste\0\0\0$__widl_f_element_from_point_Document\0\0\0\x01\x08Document\x01\0\0\x01\x03\x05self_\x01x\x01y\x10elementFromPoint\0\0\0%__widl_f_elements_from_point_Document\0\0\0\x01\x08Document\x01\0\0\x01\x03\x05self_\x01x\x01y\x11elementsFromPoint\0\0\0 __widl_f_active_element_Document\0\0\0\x01\x08Document\x01\0\x01\ractiveElement\x01\x01\x05self_\ractiveElement\0\0\0&__widl_f_pointer_lock_element_Document\0\0\0\x01\x08Document\x01\0\x01\x12pointerLockElement\x01\x01\x05self_\x12pointerLockElement\0\0\0$__widl_f_fullscreen_element_Document\0\0\0\x01\x08Document\x01\0\x01\x11fullscreenElement\x01\x01\x05self_\x11fullscreenElement\0\0\0\x1F__widl_f_get_box_quads_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x01\x05self_\x0BgetBoxQuads\0\0\0\x19__widl_f_onabort_Document\0\0\0\x01\x08Document\x01\0\x01\x07onabort\x01\x01\x05self_\x07onabort\0\0\0\x1D__widl_f_set_onabort_Document\0\0\0\x01\x08Document\x01\0\x02\x07onabort\x01\x02\x05self_\x07onabort\x07onabort\0\0\0\x18__widl_f_onblur_Document\0\0\0\x01\x08Document\x01\0\x01\x06onblur\x01\x01\x05self_\x06onblur\0\0\0\x1C__widl_f_set_onblur_Document\0\0\0\x01\x08Document\x01\0\x02\x06onblur\x01\x02\x05self_\x06onblur\x06onblur\0\0\0\x19__widl_f_onfocus_Document\0\0\0\x01\x08Document\x01\0\x01\x07onfocus\x01\x01\x05self_\x07onfocus\0\0\0\x1D__widl_f_set_onfocus_Document\0\0\0\x01\x08Document\x01\0\x02\x07onfocus\x01\x02\x05self_\x07onfocus\x07onfocus\0\0\0\x1C__widl_f_onauxclick_Document\0\0\0\x01\x08Document\x01\0\x01\nonauxclick\x01\x01\x05self_\nonauxclick\0\0\0 __widl_f_set_onauxclick_Document\0\0\0\x01\x08Document\x01\0\x02\nonauxclick\x01\x02\x05self_\nonauxclick\nonauxclick\0\0\0\x1B__widl_f_oncanplay_Document\0\0\0\x01\x08Document\x01\0\x01\toncanplay\x01\x01\x05self_\toncanplay\0\0\0\x1F__widl_f_set_oncanplay_Document\0\0\0\x01\x08Document\x01\0\x02\toncanplay\x01\x02\x05self_\toncanplay\toncanplay\0\0\0\"__widl_f_oncanplaythrough_Document\0\0\0\x01\x08Document\x01\0\x01\x10oncanplaythrough\x01\x01\x05self_\x10oncanplaythrough\0\0\0&__widl_f_set_oncanplaythrough_Document\0\0\0\x01\x08Document\x01\0\x02\x10oncanplaythrough\x01\x02\x05self_\x10oncanplaythrough\x10oncanplaythrough\0\0\0\x1A__widl_f_onchange_Document\0\0\0\x01\x08Document\x01\0\x01\x08onchange\x01\x01\x05self_\x08onchange\0\0\0\x1E__widl_f_set_onchange_Document\0\0\0\x01\x08Document\x01\0\x02\x08onchange\x01\x02\x05self_\x08onchange\x08onchange\0\0\0\x19__widl_f_onclick_Document\0\0\0\x01\x08Document\x01\0\x01\x07onclick\x01\x01\x05self_\x07onclick\0\0\0\x1D__widl_f_set_onclick_Document\0\0\0\x01\x08Document\x01\0\x02\x07onclick\x01\x02\x05self_\x07onclick\x07onclick\0\0\0\x19__widl_f_onclose_Document\0\0\0\x01\x08Document\x01\0\x01\x07onclose\x01\x01\x05self_\x07onclose\0\0\0\x1D__widl_f_set_onclose_Document\0\0\0\x01\x08Document\x01\0\x02\x07onclose\x01\x02\x05self_\x07onclose\x07onclose\0\0\0\x1F__widl_f_oncontextmenu_Document\0\0\0\x01\x08Document\x01\0\x01\roncontextmenu\x01\x01\x05self_\roncontextmenu\0\0\0#__widl_f_set_oncontextmenu_Document\0\0\0\x01\x08Document\x01\0\x02\roncontextmenu\x01\x02\x05self_\roncontextmenu\roncontextmenu\0\0\0\x1C__widl_f_ondblclick_Document\0\0\0\x01\x08Document\x01\0\x01\nondblclick\x01\x01\x05self_\nondblclick\0\0\0 __widl_f_set_ondblclick_Document\0\0\0\x01\x08Document\x01\0\x02\nondblclick\x01\x02\x05self_\nondblclick\nondblclick\0\0\0\x18__widl_f_ondrag_Document\0\0\0\x01\x08Document\x01\0\x01\x06ondrag\x01\x01\x05self_\x06ondrag\0\0\0\x1C__widl_f_set_ondrag_Document\0\0\0\x01\x08Document\x01\0\x02\x06ondrag\x01\x02\x05self_\x06ondrag\x06ondrag\0\0\0\x1B__widl_f_ondragend_Document\0\0\0\x01\x08Document\x01\0\x01\tondragend\x01\x01\x05self_\tondragend\0\0\0\x1F__widl_f_set_ondragend_Document\0\0\0\x01\x08Document\x01\0\x02\tondragend\x01\x02\x05self_\tondragend\tondragend\0\0\0\x1D__widl_f_ondragenter_Document\0\0\0\x01\x08Document\x01\0\x01\x0Bondragenter\x01\x01\x05self_\x0Bondragenter\0\0\0!__widl_f_set_ondragenter_Document\0\0\0\x01\x08Document\x01\0\x02\x0Bondragenter\x01\x02\x05self_\x0Bondragenter\x0Bondragenter\0\0\0\x1C__widl_f_ondragexit_Document\0\0\0\x01\x08Document\x01\0\x01\nondragexit\x01\x01\x05self_\nondragexit\0\0\0 __widl_f_set_ondragexit_Document\0\0\0\x01\x08Document\x01\0\x02\nondragexit\x01\x02\x05self_\nondragexit\nondragexit\0\0\0\x1D__widl_f_ondragleave_Document\0\0\0\x01\x08Document\x01\0\x01\x0Bondragleave\x01\x01\x05self_\x0Bondragleave\0\0\0!__widl_f_set_ondragleave_Document\0\0\0\x01\x08Document\x01\0\x02\x0Bondragleave\x01\x02\x05self_\x0Bondragleave\x0Bondragleave\0\0\0\x1C__widl_f_ondragover_Document\0\0\0\x01\x08Document\x01\0\x01\nondragover\x01\x01\x05self_\nondragover\0\0\0 __widl_f_set_ondragover_Document\0\0\0\x01\x08Document\x01\0\x02\nondragover\x01\x02\x05self_\nondragover\nondragover\0\0\0\x1D__widl_f_ondragstart_Document\0\0\0\x01\x08Document\x01\0\x01\x0Bondragstart\x01\x01\x05self_\x0Bondragstart\0\0\0!__widl_f_set_ondragstart_Document\0\0\0\x01\x08Document\x01\0\x02\x0Bondragstart\x01\x02\x05self_\x0Bondragstart\x0Bondragstart\0\0\0\x18__widl_f_ondrop_Document\0\0\0\x01\x08Document\x01\0\x01\x06ondrop\x01\x01\x05self_\x06ondrop\0\0\0\x1C__widl_f_set_ondrop_Document\0\0\0\x01\x08Document\x01\0\x02\x06ondrop\x01\x02\x05self_\x06ondrop\x06ondrop\0\0\0\"__widl_f_ondurationchange_Document\0\0\0\x01\x08Document\x01\0\x01\x10ondurationchange\x01\x01\x05self_\x10ondurationchange\0\0\0&__widl_f_set_ondurationchange_Document\0\0\0\x01\x08Document\x01\0\x02\x10ondurationchange\x01\x02\x05self_\x10ondurationchange\x10ondurationchange\0\0\0\x1B__widl_f_onemptied_Document\0\0\0\x01\x08Document\x01\0\x01\tonemptied\x01\x01\x05self_\tonemptied\0\0\0\x1F__widl_f_set_onemptied_Document\0\0\0\x01\x08Document\x01\0\x02\tonemptied\x01\x02\x05self_\tonemptied\tonemptied\0\0\0\x19__widl_f_onended_Document\0\0\0\x01\x08Document\x01\0\x01\x07onended\x01\x01\x05self_\x07onended\0\0\0\x1D__widl_f_set_onended_Document\0\0\0\x01\x08Document\x01\0\x02\x07onended\x01\x02\x05self_\x07onended\x07onended\0\0\0\x19__widl_f_oninput_Document\0\0\0\x01\x08Document\x01\0\x01\x07oninput\x01\x01\x05self_\x07oninput\0\0\0\x1D__widl_f_set_oninput_Document\0\0\0\x01\x08Document\x01\0\x02\x07oninput\x01\x02\x05self_\x07oninput\x07oninput\0\0\0\x1B__widl_f_oninvalid_Document\0\0\0\x01\x08Document\x01\0\x01\toninvalid\x01\x01\x05self_\toninvalid\0\0\0\x1F__widl_f_set_oninvalid_Document\0\0\0\x01\x08Document\x01\0\x02\toninvalid\x01\x02\x05self_\toninvalid\toninvalid\0\0\0\x1B__widl_f_onkeydown_Document\0\0\0\x01\x08Document\x01\0\x01\tonkeydown\x01\x01\x05self_\tonkeydown\0\0\0\x1F__widl_f_set_onkeydown_Document\0\0\0\x01\x08Document\x01\0\x02\tonkeydown\x01\x02\x05self_\tonkeydown\tonkeydown\0\0\0\x1C__widl_f_onkeypress_Document\0\0\0\x01\x08Document\x01\0\x01\nonkeypress\x01\x01\x05self_\nonkeypress\0\0\0 __widl_f_set_onkeypress_Document\0\0\0\x01\x08Document\x01\0\x02\nonkeypress\x01\x02\x05self_\nonkeypress\nonkeypress\0\0\0\x19__widl_f_onkeyup_Document\0\0\0\x01\x08Document\x01\0\x01\x07onkeyup\x01\x01\x05self_\x07onkeyup\0\0\0\x1D__widl_f_set_onkeyup_Document\0\0\0\x01\x08Document\x01\0\x02\x07onkeyup\x01\x02\x05self_\x07onkeyup\x07onkeyup\0\0\0\x18__widl_f_onload_Document\0\0\0\x01\x08Document\x01\0\x01\x06onload\x01\x01\x05self_\x06onload\0\0\0\x1C__widl_f_set_onload_Document\0\0\0\x01\x08Document\x01\0\x02\x06onload\x01\x02\x05self_\x06onload\x06onload\0\0\0\x1E__widl_f_onloadeddata_Document\0\0\0\x01\x08Document\x01\0\x01\x0Conloadeddata\x01\x01\x05self_\x0Conloadeddata\0\0\0\"__widl_f_set_onloadeddata_Document\0\0\0\x01\x08Document\x01\0\x02\x0Conloadeddata\x01\x02\x05self_\x0Conloadeddata\x0Conloadeddata\0\0\0\"__widl_f_onloadedmetadata_Document\0\0\0\x01\x08Document\x01\0\x01\x10onloadedmetadata\x01\x01\x05self_\x10onloadedmetadata\0\0\0&__widl_f_set_onloadedmetadata_Document\0\0\0\x01\x08Document\x01\0\x02\x10onloadedmetadata\x01\x02\x05self_\x10onloadedmetadata\x10onloadedmetadata\0\0\0\x1B__widl_f_onloadend_Document\0\0\0\x01\x08Document\x01\0\x01\tonloadend\x01\x01\x05self_\tonloadend\0\0\0\x1F__widl_f_set_onloadend_Document\0\0\0\x01\x08Document\x01\0\x02\tonloadend\x01\x02\x05self_\tonloadend\tonloadend\0\0\0\x1D__widl_f_onloadstart_Document\0\0\0\x01\x08Document\x01\0\x01\x0Bonloadstart\x01\x01\x05self_\x0Bonloadstart\0\0\0!__widl_f_set_onloadstart_Document\0\0\0\x01\x08Document\x01\0\x02\x0Bonloadstart\x01\x02\x05self_\x0Bonloadstart\x0Bonloadstart\0\0\0\x1D__widl_f_onmousedown_Document\0\0\0\x01\x08Document\x01\0\x01\x0Bonmousedown\x01\x01\x05self_\x0Bonmousedown\0\0\0!__widl_f_set_onmousedown_Document\0\0\0\x01\x08Document\x01\0\x02\x0Bonmousedown\x01\x02\x05self_\x0Bonmousedown\x0Bonmousedown\0\0\0\x1E__widl_f_onmouseenter_Document\0\0\0\x01\x08Document\x01\0\x01\x0Conmouseenter\x01\x01\x05self_\x0Conmouseenter\0\0\0\"__widl_f_set_onmouseenter_Document\0\0\0\x01\x08Document\x01\0\x02\x0Conmouseenter\x01\x02\x05self_\x0Conmouseenter\x0Conmouseenter\0\0\0\x1E__widl_f_onmouseleave_Document\0\0\0\x01\x08Document\x01\0\x01\x0Conmouseleave\x01\x01\x05self_\x0Conmouseleave\0\0\0\"__widl_f_set_onmouseleave_Document\0\0\0\x01\x08Document\x01\0\x02\x0Conmouseleave\x01\x02\x05self_\x0Conmouseleave\x0Conmouseleave\0\0\0\x1D__widl_f_onmousemove_Document\0\0\0\x01\x08Document\x01\0\x01\x0Bonmousemove\x01\x01\x05self_\x0Bonmousemove\0\0\0!__widl_f_set_onmousemove_Document\0\0\0\x01\x08Document\x01\0\x02\x0Bonmousemove\x01\x02\x05self_\x0Bonmousemove\x0Bonmousemove\0\0\0\x1C__widl_f_onmouseout_Document\0\0\0\x01\x08Document\x01\0\x01\nonmouseout\x01\x01\x05self_\nonmouseout\0\0\0 __widl_f_set_onmouseout_Document\0\0\0\x01\x08Document\x01\0\x02\nonmouseout\x01\x02\x05self_\nonmouseout\nonmouseout\0\0\0\x1D__widl_f_onmouseover_Document\0\0\0\x01\x08Document\x01\0\x01\x0Bonmouseover\x01\x01\x05self_\x0Bonmouseover\0\0\0!__widl_f_set_onmouseover_Document\0\0\0\x01\x08Document\x01\0\x02\x0Bonmouseover\x01\x02\x05self_\x0Bonmouseover\x0Bonmouseover\0\0\0\x1B__widl_f_onmouseup_Document\0\0\0\x01\x08Document\x01\0\x01\tonmouseup\x01\x01\x05self_\tonmouseup\0\0\0\x1F__widl_f_set_onmouseup_Document\0\0\0\x01\x08Document\x01\0\x02\tonmouseup\x01\x02\x05self_\tonmouseup\tonmouseup\0\0\0\x19__widl_f_onwheel_Document\0\0\0\x01\x08Document\x01\0\x01\x07onwheel\x01\x01\x05self_\x07onwheel\0\0\0\x1D__widl_f_set_onwheel_Document\0\0\0\x01\x08Document\x01\0\x02\x07onwheel\x01\x02\x05self_\x07onwheel\x07onwheel\0\0\0\x19__widl_f_onpause_Document\0\0\0\x01\x08Document\x01\0\x01\x07onpause\x01\x01\x05self_\x07onpause\0\0\0\x1D__widl_f_set_onpause_Document\0\0\0\x01\x08Document\x01\0\x02\x07onpause\x01\x02\x05self_\x07onpause\x07onpause\0\0\0\x18__widl_f_onplay_Document\0\0\0\x01\x08Document\x01\0\x01\x06onplay\x01\x01\x05self_\x06onplay\0\0\0\x1C__widl_f_set_onplay_Document\0\0\0\x01\x08Document\x01\0\x02\x06onplay\x01\x02\x05self_\x06onplay\x06onplay\0\0\0\x1B__widl_f_onplaying_Document\0\0\0\x01\x08Document\x01\0\x01\tonplaying\x01\x01\x05self_\tonplaying\0\0\0\x1F__widl_f_set_onplaying_Document\0\0\0\x01\x08Document\x01\0\x02\tonplaying\x01\x02\x05self_\tonplaying\tonplaying\0\0\0\x1C__widl_f_onprogress_Document\0\0\0\x01\x08Document\x01\0\x01\nonprogress\x01\x01\x05self_\nonprogress\0\0\0 __widl_f_set_onprogress_Document\0\0\0\x01\x08Document\x01\0\x02\nonprogress\x01\x02\x05self_\nonprogress\nonprogress\0\0\0\x1E__widl_f_onratechange_Document\0\0\0\x01\x08Document\x01\0\x01\x0Conratechange\x01\x01\x05self_\x0Conratechange\0\0\0\"__widl_f_set_onratechange_Document\0\0\0\x01\x08Document\x01\0\x02\x0Conratechange\x01\x02\x05self_\x0Conratechange\x0Conratechange\0\0\0\x19__widl_f_onreset_Document\0\0\0\x01\x08Document\x01\0\x01\x07onreset\x01\x01\x05self_\x07onreset\0\0\0\x1D__widl_f_set_onreset_Document\0\0\0\x01\x08Document\x01\0\x02\x07onreset\x01\x02\x05self_\x07onreset\x07onreset\0\0\0\x1A__widl_f_onresize_Document\0\0\0\x01\x08Document\x01\0\x01\x08onresize\x01\x01\x05self_\x08onresize\0\0\0\x1E__widl_f_set_onresize_Document\0\0\0\x01\x08Document\x01\0\x02\x08onresize\x01\x02\x05self_\x08onresize\x08onresize\0\0\0\x1A__widl_f_onscroll_Document\0\0\0\x01\x08Document\x01\0\x01\x08onscroll\x01\x01\x05self_\x08onscroll\0\0\0\x1E__widl_f_set_onscroll_Document\0\0\0\x01\x08Document\x01\0\x02\x08onscroll\x01\x02\x05self_\x08onscroll\x08onscroll\0\0\0\x1A__widl_f_onseeked_Document\0\0\0\x01\x08Document\x01\0\x01\x08onseeked\x01\x01\x05self_\x08onseeked\0\0\0\x1E__widl_f_set_onseeked_Document\0\0\0\x01\x08Document\x01\0\x02\x08onseeked\x01\x02\x05self_\x08onseeked\x08onseeked\0\0\0\x1B__widl_f_onseeking_Document\0\0\0\x01\x08Document\x01\0\x01\tonseeking\x01\x01\x05self_\tonseeking\0\0\0\x1F__widl_f_set_onseeking_Document\0\0\0\x01\x08Document\x01\0\x02\tonseeking\x01\x02\x05self_\tonseeking\tonseeking\0\0\0\x1A__widl_f_onselect_Document\0\0\0\x01\x08Document\x01\0\x01\x08onselect\x01\x01\x05self_\x08onselect\0\0\0\x1E__widl_f_set_onselect_Document\0\0\0\x01\x08Document\x01\0\x02\x08onselect\x01\x02\x05self_\x08onselect\x08onselect\0\0\0\x18__widl_f_onshow_Document\0\0\0\x01\x08Document\x01\0\x01\x06onshow\x01\x01\x05self_\x06onshow\0\0\0\x1C__widl_f_set_onshow_Document\0\0\0\x01\x08Document\x01\0\x02\x06onshow\x01\x02\x05self_\x06onshow\x06onshow\0\0\0\x1B__widl_f_onstalled_Document\0\0\0\x01\x08Document\x01\0\x01\tonstalled\x01\x01\x05self_\tonstalled\0\0\0\x1F__widl_f_set_onstalled_Document\0\0\0\x01\x08Document\x01\0\x02\tonstalled\x01\x02\x05self_\tonstalled\tonstalled\0\0\0\x1A__widl_f_onsubmit_Document\0\0\0\x01\x08Document\x01\0\x01\x08onsubmit\x01\x01\x05self_\x08onsubmit\0\0\0\x1E__widl_f_set_onsubmit_Document\0\0\0\x01\x08Document\x01\0\x02\x08onsubmit\x01\x02\x05self_\x08onsubmit\x08onsubmit\0\0\0\x1B__widl_f_onsuspend_Document\0\0\0\x01\x08Document\x01\0\x01\tonsuspend\x01\x01\x05self_\tonsuspend\0\0\0\x1F__widl_f_set_onsuspend_Document\0\0\0\x01\x08Document\x01\0\x02\tonsuspend\x01\x02\x05self_\tonsuspend\tonsuspend\0\0\0\x1E__widl_f_ontimeupdate_Document\0\0\0\x01\x08Document\x01\0\x01\x0Contimeupdate\x01\x01\x05self_\x0Contimeupdate\0\0\0\"__widl_f_set_ontimeupdate_Document\0\0\0\x01\x08Document\x01\0\x02\x0Contimeupdate\x01\x02\x05self_\x0Contimeupdate\x0Contimeupdate\0\0\0 __widl_f_onvolumechange_Document\0\0\0\x01\x08Document\x01\0\x01\x0Eonvolumechange\x01\x01\x05self_\x0Eonvolumechange\0\0\0$__widl_f_set_onvolumechange_Document\0\0\0\x01\x08Document\x01\0\x02\x0Eonvolumechange\x01\x02\x05self_\x0Eonvolumechange\x0Eonvolumechange\0\0\0\x1B__widl_f_onwaiting_Document\0\0\0\x01\x08Document\x01\0\x01\tonwaiting\x01\x01\x05self_\tonwaiting\0\0\0\x1F__widl_f_set_onwaiting_Document\0\0\0\x01\x08Document\x01\0\x02\tonwaiting\x01\x02\x05self_\tonwaiting\tonwaiting\0\0\0\x1F__widl_f_onselectstart_Document\0\0\0\x01\x08Document\x01\0\x01\ronselectstart\x01\x01\x05self_\ronselectstart\0\0\0#__widl_f_set_onselectstart_Document\0\0\0\x01\x08Document\x01\0\x02\ronselectstart\x01\x02\x05self_\ronselectstart\ronselectstart\0\0\0\x1A__widl_f_ontoggle_Document\0\0\0\x01\x08Document\x01\0\x01\x08ontoggle\x01\x01\x05self_\x08ontoggle\0\0\0\x1E__widl_f_set_ontoggle_Document\0\0\0\x01\x08Document\x01\0\x02\x08ontoggle\x01\x02\x05self_\x08ontoggle\x08ontoggle\0\0\0!__widl_f_onpointercancel_Document\0\0\0\x01\x08Document\x01\0\x01\x0Fonpointercancel\x01\x01\x05self_\x0Fonpointercancel\0\0\0%__widl_f_set_onpointercancel_Document\0\0\0\x01\x08Document\x01\0\x02\x0Fonpointercancel\x01\x02\x05self_\x0Fonpointercancel\x0Fonpointercancel\0\0\0\x1F__widl_f_onpointerdown_Document\0\0\0\x01\x08Document\x01\0\x01\ronpointerdown\x01\x01\x05self_\ronpointerdown\0\0\0#__widl_f_set_onpointerdown_Document\0\0\0\x01\x08Document\x01\0\x02\ronpointerdown\x01\x02\x05self_\ronpointerdown\ronpointerdown\0\0\0\x1D__widl_f_onpointerup_Document\0\0\0\x01\x08Document\x01\0\x01\x0Bonpointerup\x01\x01\x05self_\x0Bonpointerup\0\0\0!__widl_f_set_onpointerup_Document\0\0\0\x01\x08Document\x01\0\x02\x0Bonpointerup\x01\x02\x05self_\x0Bonpointerup\x0Bonpointerup\0\0\0\x1F__widl_f_onpointermove_Document\0\0\0\x01\x08Document\x01\0\x01\ronpointermove\x01\x01\x05self_\ronpointermove\0\0\0#__widl_f_set_onpointermove_Document\0\0\0\x01\x08Document\x01\0\x02\ronpointermove\x01\x02\x05self_\ronpointermove\ronpointermove\0\0\0\x1E__widl_f_onpointerout_Document\0\0\0\x01\x08Document\x01\0\x01\x0Conpointerout\x01\x01\x05self_\x0Conpointerout\0\0\0\"__widl_f_set_onpointerout_Document\0\0\0\x01\x08Document\x01\0\x02\x0Conpointerout\x01\x02\x05self_\x0Conpointerout\x0Conpointerout\0\0\0\x1F__widl_f_onpointerover_Document\0\0\0\x01\x08Document\x01\0\x01\ronpointerover\x01\x01\x05self_\ronpointerover\0\0\0#__widl_f_set_onpointerover_Document\0\0\0\x01\x08Document\x01\0\x02\ronpointerover\x01\x02\x05self_\ronpointerover\ronpointerover\0\0\0 __widl_f_onpointerenter_Document\0\0\0\x01\x08Document\x01\0\x01\x0Eonpointerenter\x01\x01\x05self_\x0Eonpointerenter\0\0\0$__widl_f_set_onpointerenter_Document\0\0\0\x01\x08Document\x01\0\x02\x0Eonpointerenter\x01\x02\x05self_\x0Eonpointerenter\x0Eonpointerenter\0\0\0 __widl_f_onpointerleave_Document\0\0\0\x01\x08Document\x01\0\x01\x0Eonpointerleave\x01\x01\x05self_\x0Eonpointerleave\0\0\0$__widl_f_set_onpointerleave_Document\0\0\0\x01\x08Document\x01\0\x02\x0Eonpointerleave\x01\x02\x05self_\x0Eonpointerleave\x0Eonpointerleave\0\0\0%__widl_f_ongotpointercapture_Document\0\0\0\x01\x08Document\x01\0\x01\x13ongotpointercapture\x01\x01\x05self_\x13ongotpointercapture\0\0\0)__widl_f_set_ongotpointercapture_Document\0\0\0\x01\x08Document\x01\0\x02\x13ongotpointercapture\x01\x02\x05self_\x13ongotpointercapture\x13ongotpointercapture\0\0\0&__widl_f_onlostpointercapture_Document\0\0\0\x01\x08Document\x01\0\x01\x14onlostpointercapture\x01\x01\x05self_\x14onlostpointercapture\0\0\0*__widl_f_set_onlostpointercapture_Document\0\0\0\x01\x08Document\x01\0\x02\x14onlostpointercapture\x01\x02\x05self_\x14onlostpointercapture\x14onlostpointercapture\0\0\0#__widl_f_onanimationcancel_Document\0\0\0\x01\x08Document\x01\0\x01\x11onanimationcancel\x01\x01\x05self_\x11onanimationcancel\0\0\0'__widl_f_set_onanimationcancel_Document\0\0\0\x01\x08Document\x01\0\x02\x11onanimationcancel\x01\x02\x05self_\x11onanimationcancel\x11onanimationcancel\0\0\0 __widl_f_onanimationend_Document\0\0\0\x01\x08Document\x01\0\x01\x0Eonanimationend\x01\x01\x05self_\x0Eonanimationend\0\0\0$__widl_f_set_onanimationend_Document\0\0\0\x01\x08Document\x01\0\x02\x0Eonanimationend\x01\x02\x05self_\x0Eonanimationend\x0Eonanimationend\0\0\0&__widl_f_onanimationiteration_Document\0\0\0\x01\x08Document\x01\0\x01\x14onanimationiteration\x01\x01\x05self_\x14onanimationiteration\0\0\0*__widl_f_set_onanimationiteration_Document\0\0\0\x01\x08Document\x01\0\x02\x14onanimationiteration\x01\x02\x05self_\x14onanimationiteration\x14onanimationiteration\0\0\0\"__widl_f_onanimationstart_Document\0\0\0\x01\x08Document\x01\0\x01\x10onanimationstart\x01\x01\x05self_\x10onanimationstart\0\0\0&__widl_f_set_onanimationstart_Document\0\0\0\x01\x08Document\x01\0\x02\x10onanimationstart\x01\x02\x05self_\x10onanimationstart\x10onanimationstart\0\0\0$__widl_f_ontransitioncancel_Document\0\0\0\x01\x08Document\x01\0\x01\x12ontransitioncancel\x01\x01\x05self_\x12ontransitioncancel\0\0\0(__widl_f_set_ontransitioncancel_Document\0\0\0\x01\x08Document\x01\0\x02\x12ontransitioncancel\x01\x02\x05self_\x12ontransitioncancel\x12ontransitioncancel\0\0\0!__widl_f_ontransitionend_Document\0\0\0\x01\x08Document\x01\0\x01\x0Fontransitionend\x01\x01\x05self_\x0Fontransitionend\0\0\0%__widl_f_set_ontransitionend_Document\0\0\0\x01\x08Document\x01\0\x02\x0Fontransitionend\x01\x02\x05self_\x0Fontransitionend\x0Fontransitionend\0\0\0!__widl_f_ontransitionrun_Document\0\0\0\x01\x08Document\x01\0\x01\x0Fontransitionrun\x01\x01\x05self_\x0Fontransitionrun\0\0\0%__widl_f_set_ontransitionrun_Document\0\0\0\x01\x08Document\x01\0\x02\x0Fontransitionrun\x01\x02\x05self_\x0Fontransitionrun\x0Fontransitionrun\0\0\0#__widl_f_ontransitionstart_Document\0\0\0\x01\x08Document\x01\0\x01\x11ontransitionstart\x01\x01\x05self_\x11ontransitionstart\0\0\0'__widl_f_set_ontransitionstart_Document\0\0\0\x01\x08Document\x01\0\x02\x11ontransitionstart\x01\x02\x05self_\x11ontransitionstart\x11ontransitionstart\0\0\0&__widl_f_onwebkitanimationend_Document\0\0\0\x01\x08Document\x01\0\x01\x14onwebkitanimationend\x01\x01\x05self_\x14onwebkitanimationend\0\0\0*__widl_f_set_onwebkitanimationend_Document\0\0\0\x01\x08Document\x01\0\x02\x14onwebkitanimationend\x01\x02\x05self_\x14onwebkitanimationend\x14onwebkitanimationend\0\0\0,__widl_f_onwebkitanimationiteration_Document\0\0\0\x01\x08Document\x01\0\x01\x1Aonwebkitanimationiteration\x01\x01\x05self_\x1Aonwebkitanimationiteration\0\0\00__widl_f_set_onwebkitanimationiteration_Document\0\0\0\x01\x08Document\x01\0\x02\x1Aonwebkitanimationiteration\x01\x02\x05self_\x1Aonwebkitanimationiteration\x1Aonwebkitanimationiteration\0\0\0(__widl_f_onwebkitanimationstart_Document\0\0\0\x01\x08Document\x01\0\x01\x16onwebkitanimationstart\x01\x01\x05self_\x16onwebkitanimationstart\0\0\0,__widl_f_set_onwebkitanimationstart_Document\0\0\0\x01\x08Document\x01\0\x02\x16onwebkitanimationstart\x01\x02\x05self_\x16onwebkitanimationstart\x16onwebkitanimationstart\0\0\0'__widl_f_onwebkittransitionend_Document\0\0\0\x01\x08Document\x01\0\x01\x15onwebkittransitionend\x01\x01\x05self_\x15onwebkittransitionend\0\0\0+__widl_f_set_onwebkittransitionend_Document\0\0\0\x01\x08Document\x01\0\x02\x15onwebkittransitionend\x01\x02\x05self_\x15onwebkittransitionend\x15onwebkittransitionend\0\0\0\x19__widl_f_onerror_Document\0\0\0\x01\x08Document\x01\0\x01\x07onerror\x01\x01\x05self_\x07onerror\0\0\0\x1D__widl_f_set_onerror_Document\0\0\0\x01\x08Document\x01\0\x02\x07onerror\x01\x02\x05self_\x07onerror\x07onerror\0\0\0\"__widl_f_append_with_node_Document\x01\x01\0\x01\x08Document\x01\0\0\x01\x02\x05self_\x05nodes\x06append\0\0\0$__widl_f_append_with_node_0_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x01\x05self_\x06append\0\0\0$__widl_f_append_with_node_1_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x02\x05self_\x07nodes_1\x06append\0\0\0$__widl_f_append_with_node_2_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x03\x05self_\x07nodes_1\x07nodes_2\x06append\0\0\0$__widl_f_append_with_node_3_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x04\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x06append\0\0\0$__widl_f_append_with_node_4_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x05\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x06append\0\0\0$__widl_f_append_with_node_5_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x06\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x06append\0\0\0$__widl_f_append_with_node_6_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x07\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x06append\0\0\0$__widl_f_append_with_node_7_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x08\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x06append\0\0\0!__widl_f_append_with_str_Document\x01\x01\0\x01\x08Document\x01\0\0\x01\x02\x05self_\x05nodes\x06append\0\0\0#__widl_f_append_with_str_0_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x01\x05self_\x06append\0\0\0#__widl_f_append_with_str_1_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x02\x05self_\x07nodes_1\x06append\0\0\0#__widl_f_append_with_str_2_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x03\x05self_\x07nodes_1\x07nodes_2\x06append\0\0\0#__widl_f_append_with_str_3_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x04\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x06append\0\0\0#__widl_f_append_with_str_4_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x05\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x06append\0\0\0#__widl_f_append_with_str_5_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x06\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x06append\0\0\0#__widl_f_append_with_str_6_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x07\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x06append\0\0\0#__widl_f_append_with_str_7_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x08\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x06append\0\0\0#__widl_f_prepend_with_node_Document\x01\x01\0\x01\x08Document\x01\0\0\x01\x02\x05self_\x05nodes\x07prepend\0\0\0%__widl_f_prepend_with_node_0_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x01\x05self_\x07prepend\0\0\0%__widl_f_prepend_with_node_1_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x02\x05self_\x07nodes_1\x07prepend\0\0\0%__widl_f_prepend_with_node_2_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x03\x05self_\x07nodes_1\x07nodes_2\x07prepend\0\0\0%__widl_f_prepend_with_node_3_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x04\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07prepend\0\0\0%__widl_f_prepend_with_node_4_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x05\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07prepend\0\0\0%__widl_f_prepend_with_node_5_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x06\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07prepend\0\0\0%__widl_f_prepend_with_node_6_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x07\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07prepend\0\0\0%__widl_f_prepend_with_node_7_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x08\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x07prepend\0\0\0\"__widl_f_prepend_with_str_Document\x01\x01\0\x01\x08Document\x01\0\0\x01\x02\x05self_\x05nodes\x07prepend\0\0\0$__widl_f_prepend_with_str_0_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x01\x05self_\x07prepend\0\0\0$__widl_f_prepend_with_str_1_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x02\x05self_\x07nodes_1\x07prepend\0\0\0$__widl_f_prepend_with_str_2_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x03\x05self_\x07nodes_1\x07nodes_2\x07prepend\0\0\0$__widl_f_prepend_with_str_3_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x04\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07prepend\0\0\0$__widl_f_prepend_with_str_4_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x05\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07prepend\0\0\0$__widl_f_prepend_with_str_5_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x06\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07prepend\0\0\0$__widl_f_prepend_with_str_6_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x07\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07prepend\0\0\0$__widl_f_prepend_with_str_7_Document\x01\0\0\x01\x08Document\x01\0\0\x01\x08\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x07prepend\0\0\0%__widl_f_first_element_child_Document\0\0\0\x01\x08Document\x01\0\x01\x11firstElementChild\x01\x01\x05self_\x11firstElementChild\0\0\0$__widl_f_last_element_child_Document\0\0\0\x01\x08Document\x01\0\x01\x10lastElementChild\x01\x01\x05self_\x10lastElementChild\0\0\0%__widl_f_child_element_count_Document\0\0\0\x01\x08Document\x01\0\x01\x11childElementCount\x01\x01\x05self_\x11childElementCount\0\0\0\x1E__widl_f_ontouchstart_Document\0\0\0\x01\x08Document\x01\0\x01\x0Contouchstart\x01\x01\x05self_\x0Contouchstart\0\0\0\"__widl_f_set_ontouchstart_Document\0\0\0\x01\x08Document\x01\0\x02\x0Contouchstart\x01\x02\x05self_\x0Contouchstart\x0Contouchstart\0\0\0\x1C__widl_f_ontouchend_Document\0\0\0\x01\x08Document\x01\0\x01\nontouchend\x01\x01\x05self_\nontouchend\0\0\0 __widl_f_set_ontouchend_Document\0\0\0\x01\x08Document\x01\0\x02\nontouchend\x01\x02\x05self_\nontouchend\nontouchend\0\0\0\x1D__widl_f_ontouchmove_Document\0\0\0\x01\x08Document\x01\0\x01\x0Bontouchmove\x01\x01\x05self_\x0Bontouchmove\0\0\0!__widl_f_set_ontouchmove_Document\0\0\0\x01\x08Document\x01\0\x02\x0Bontouchmove\x01\x02\x05self_\x0Bontouchmove\x0Bontouchmove\0\0\0\x1F__widl_f_ontouchcancel_Document\0\0\0\x01\x08Document\x01\0\x01\rontouchcancel\x01\x01\x05self_\rontouchcancel\0\0\0#__widl_f_set_ontouchcancel_Document\0\0\0\x01\x08Document\x01\0\x02\rontouchcancel\x01\x02\x05self_\rontouchcancel\rontouchcancel\0\0\0$__widl_f_create_ns_resolver_Document\0\0\0\x01\x08Document\x01\0\0\x01\x02\x05self_\rnode_resolver\x10createNSResolver\0\0\x02\x07Element\x19__widl_instanceof_Element\0\0\0\0\x18__widl_f_closest_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x08selector\x07closest\0\0\0\x1E__widl_f_get_attribute_Element\0\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x04name\x0CgetAttribute\0\0\0!__widl_f_get_attribute_ns_Element\0\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\tnamespace\nlocal_name\x0EgetAttributeNS\0\0\0$__widl_f_get_attribute_names_Element\0\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x11getAttributeNames\0\0\0\x1E__widl_f_has_attribute_Element\0\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x04name\x0ChasAttribute\0\0\0!__widl_f_has_attribute_ns_Element\0\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\tnamespace\nlocal_name\x0EhasAttributeNS\0\0\0\x1F__widl_f_has_attributes_Element\0\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\rhasAttributes\0\0\0$__widl_f_has_pointer_capture_Element\0\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\npointer_id\x11hasPointerCapture\0\0\0(__widl_f_insert_adjacent_element_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x06where_\x07element\x15insertAdjacentElement\0\0\0%__widl_f_insert_adjacent_html_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x08position\x04text\x12insertAdjacentHTML\0\0\0%__widl_f_insert_adjacent_text_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x06where_\x04data\x12insertAdjacentText\0\0\0\x18__widl_f_matches_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x08selector\x07matches\0\0\0\x1F__widl_f_query_selector_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\tselectors\rquerySelector\0\0\0 __widl_f_release_capture_Element\0\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x0EreleaseCapture\0\0\0(__widl_f_release_pointer_capture_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\npointer_id\x15releasePointerCapture\0\0\0!__widl_f_remove_attribute_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x04name\x0FremoveAttribute\0\0\0$__widl_f_remove_attribute_ns_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\tnamespace\nlocal_name\x11removeAttributeNS\0\0\0#__widl_f_request_fullscreen_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x11requestFullscreen\0\0\0%__widl_f_request_pointer_lock_Element\0\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x12requestPointerLock\0\0\0$__widl_f_scroll_with_x_and_y_Element\0\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x01x\x01y\x06scroll\0\0\0\x17__widl_f_scroll_Element\0\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x06scroll\0\0\0'__widl_f_scroll_by_with_x_and_y_Element\0\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x01x\x01y\x08scrollBy\0\0\0\x1A__widl_f_scroll_by_Element\0\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x08scrollBy\0\0\0!__widl_f_scroll_into_view_Element\0\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x0EscrollIntoView\0\0\0+__widl_f_scroll_into_view_with_bool_Element\0\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x03arg\x0EscrollIntoView\0\0\0'__widl_f_scroll_to_with_x_and_y_Element\0\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x01x\x01y\x08scrollTo\0\0\0\x1A__widl_f_scroll_to_Element\0\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x08scrollTo\0\0\0\x1E__widl_f_set_attribute_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x04name\x05value\x0CsetAttribute\0\0\0!__widl_f_set_attribute_ns_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x04\x05self_\tnamespace\x04name\x05value\x0EsetAttributeNS\0\0\0\x1C__widl_f_set_capture_Element\0\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\nsetCapture\0\0\05__widl_f_set_capture_with_retarget_to_element_Element\0\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x13retarget_to_element\nsetCapture\0\0\0$__widl_f_set_pointer_capture_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\npointer_id\x11setPointerCapture\0\0\0!__widl_f_toggle_attribute_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x04name\x0FtoggleAttribute\0\0\0,__widl_f_toggle_attribute_with_force_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x04name\x05force\x0FtoggleAttribute\0\0\0(__widl_f_webkit_matches_selector_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x08selector\x15webkitMatchesSelector\0\0\0\x1E__widl_f_namespace_uri_Element\0\0\0\x01\x07Element\x01\0\x01\x0CnamespaceURI\x01\x01\x05self_\x0CnamespaceURI\0\0\0\x17__widl_f_prefix_Element\0\0\0\x01\x07Element\x01\0\x01\x06prefix\x01\x01\x05self_\x06prefix\0\0\0\x1B__widl_f_local_name_Element\0\0\0\x01\x07Element\x01\0\x01\tlocalName\x01\x01\x05self_\tlocalName\0\0\0\x19__widl_f_tag_name_Element\0\0\0\x01\x07Element\x01\0\x01\x07tagName\x01\x01\x05self_\x07tagName\0\0\0\x13__widl_f_id_Element\0\0\0\x01\x07Element\x01\0\x01\x02id\x01\x01\x05self_\x02id\0\0\0\x17__widl_f_set_id_Element\0\0\0\x01\x07Element\x01\0\x02\x02id\x01\x02\x05self_\x02id\x02id\0\0\0\x1B__widl_f_class_name_Element\0\0\0\x01\x07Element\x01\0\x01\tclassName\x01\x01\x05self_\tclassName\0\0\0\x1F__widl_f_set_class_name_Element\0\0\0\x01\x07Element\x01\0\x02\tclassName\x01\x02\x05self_\nclass_name\tclassName\0\0\0\x1B__widl_f_scroll_top_Element\0\0\0\x01\x07Element\x01\0\x01\tscrollTop\x01\x01\x05self_\tscrollTop\0\0\0\x1F__widl_f_set_scroll_top_Element\0\0\0\x01\x07Element\x01\0\x02\tscrollTop\x01\x02\x05self_\nscroll_top\tscrollTop\0\0\0\x1C__widl_f_scroll_left_Element\0\0\0\x01\x07Element\x01\0\x01\nscrollLeft\x01\x01\x05self_\nscrollLeft\0\0\0 __widl_f_set_scroll_left_Element\0\0\0\x01\x07Element\x01\0\x02\nscrollLeft\x01\x02\x05self_\x0Bscroll_left\nscrollLeft\0\0\0\x1D__widl_f_scroll_width_Element\0\0\0\x01\x07Element\x01\0\x01\x0BscrollWidth\x01\x01\x05self_\x0BscrollWidth\0\0\0\x1E__widl_f_scroll_height_Element\0\0\0\x01\x07Element\x01\0\x01\x0CscrollHeight\x01\x01\x05self_\x0CscrollHeight\0\0\0\x1B__widl_f_client_top_Element\0\0\0\x01\x07Element\x01\0\x01\tclientTop\x01\x01\x05self_\tclientTop\0\0\0\x1C__widl_f_client_left_Element\0\0\0\x01\x07Element\x01\0\x01\nclientLeft\x01\x01\x05self_\nclientLeft\0\0\0\x1D__widl_f_client_width_Element\0\0\0\x01\x07Element\x01\0\x01\x0BclientWidth\x01\x01\x05self_\x0BclientWidth\0\0\0\x1E__widl_f_client_height_Element\0\0\0\x01\x07Element\x01\0\x01\x0CclientHeight\x01\x01\x05self_\x0CclientHeight\0\0\0\x1B__widl_f_inner_html_Element\0\0\0\x01\x07Element\x01\0\x01\tinnerHTML\x01\x01\x05self_\tinnerHTML\0\0\0\x1F__widl_f_set_inner_html_Element\0\0\0\x01\x07Element\x01\0\x02\tinnerHTML\x01\x02\x05self_\ninner_html\tinnerHTML\0\0\0\x1B__widl_f_outer_html_Element\0\0\0\x01\x07Element\x01\0\x01\touterHTML\x01\x01\x05self_\touterHTML\0\0\0\x1F__widl_f_set_outer_html_Element\0\0\0\x01\x07Element\x01\0\x02\touterHTML\x01\x02\x05self_\nouter_html\touterHTML\0\0\0\x15__widl_f_slot_Element\0\0\0\x01\x07Element\x01\0\x01\x04slot\x01\x01\x05self_\x04slot\0\0\0\x19__widl_f_set_slot_Element\0\0\0\x01\x07Element\x01\0\x02\x04slot\x01\x02\x05self_\x04slot\x04slot\0\0\0 __widl_f_after_with_node_Element\x01\x01\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x05nodes\x05after\0\0\0\"__widl_f_after_with_node_0_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x05after\0\0\0\"__widl_f_after_with_node_1_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x07nodes_1\x05after\0\0\0\"__widl_f_after_with_node_2_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x07nodes_1\x07nodes_2\x05after\0\0\0\"__widl_f_after_with_node_3_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x04\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x05after\0\0\0\"__widl_f_after_with_node_4_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x05\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x05after\0\0\0\"__widl_f_after_with_node_5_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x06\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x05after\0\0\0\"__widl_f_after_with_node_6_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x07\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x05after\0\0\0\"__widl_f_after_with_node_7_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x08\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x05after\0\0\0\x1F__widl_f_after_with_str_Element\x01\x01\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x05nodes\x05after\0\0\0!__widl_f_after_with_str_0_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x05after\0\0\0!__widl_f_after_with_str_1_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x07nodes_1\x05after\0\0\0!__widl_f_after_with_str_2_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x07nodes_1\x07nodes_2\x05after\0\0\0!__widl_f_after_with_str_3_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x04\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x05after\0\0\0!__widl_f_after_with_str_4_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x05\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x05after\0\0\0!__widl_f_after_with_str_5_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x06\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x05after\0\0\0!__widl_f_after_with_str_6_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x07\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x05after\0\0\0!__widl_f_after_with_str_7_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x08\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x05after\0\0\0!__widl_f_before_with_node_Element\x01\x01\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x05nodes\x06before\0\0\0#__widl_f_before_with_node_0_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x06before\0\0\0#__widl_f_before_with_node_1_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x07nodes_1\x06before\0\0\0#__widl_f_before_with_node_2_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x07nodes_1\x07nodes_2\x06before\0\0\0#__widl_f_before_with_node_3_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x04\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x06before\0\0\0#__widl_f_before_with_node_4_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x05\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x06before\0\0\0#__widl_f_before_with_node_5_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x06\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x06before\0\0\0#__widl_f_before_with_node_6_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x07\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x06before\0\0\0#__widl_f_before_with_node_7_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x08\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x06before\0\0\0 __widl_f_before_with_str_Element\x01\x01\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x05nodes\x06before\0\0\0\"__widl_f_before_with_str_0_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x06before\0\0\0\"__widl_f_before_with_str_1_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x07nodes_1\x06before\0\0\0\"__widl_f_before_with_str_2_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x07nodes_1\x07nodes_2\x06before\0\0\0\"__widl_f_before_with_str_3_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x04\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x06before\0\0\0\"__widl_f_before_with_str_4_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x05\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x06before\0\0\0\"__widl_f_before_with_str_5_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x06\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x06before\0\0\0\"__widl_f_before_with_str_6_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x07\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x06before\0\0\0\"__widl_f_before_with_str_7_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x08\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x06before\0\0\0\x17__widl_f_remove_Element\0\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x06remove\0\0\0'__widl_f_replace_with_with_node_Element\x01\x01\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x05nodes\x0BreplaceWith\0\0\0)__widl_f_replace_with_with_node_0_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x0BreplaceWith\0\0\0)__widl_f_replace_with_with_node_1_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x07nodes_1\x0BreplaceWith\0\0\0)__widl_f_replace_with_with_node_2_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x07nodes_1\x07nodes_2\x0BreplaceWith\0\0\0)__widl_f_replace_with_with_node_3_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x04\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x0BreplaceWith\0\0\0)__widl_f_replace_with_with_node_4_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x05\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x0BreplaceWith\0\0\0)__widl_f_replace_with_with_node_5_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x06\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x0BreplaceWith\0\0\0)__widl_f_replace_with_with_node_6_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x07\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x0BreplaceWith\0\0\0)__widl_f_replace_with_with_node_7_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x08\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x0BreplaceWith\0\0\0&__widl_f_replace_with_with_str_Element\x01\x01\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x05nodes\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_0_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_1_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x07nodes_1\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_2_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x07nodes_1\x07nodes_2\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_3_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x04\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_4_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x05\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_5_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x06\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_6_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x07\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_7_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x08\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x0BreplaceWith\0\0\0\x1E__widl_f_get_box_quads_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x0BgetBoxQuads\0\0\0)__widl_f_previous_element_sibling_Element\0\0\0\x01\x07Element\x01\0\x01\x16previousElementSibling\x01\x01\x05self_\x16previousElementSibling\0\0\0%__widl_f_next_element_sibling_Element\0\0\0\x01\x07Element\x01\0\x01\x12nextElementSibling\x01\x01\x05self_\x12nextElementSibling\0\0\0!__widl_f_append_with_node_Element\x01\x01\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x05nodes\x06append\0\0\0#__widl_f_append_with_node_0_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x06append\0\0\0#__widl_f_append_with_node_1_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x07nodes_1\x06append\0\0\0#__widl_f_append_with_node_2_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x07nodes_1\x07nodes_2\x06append\0\0\0#__widl_f_append_with_node_3_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x04\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x06append\0\0\0#__widl_f_append_with_node_4_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x05\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x06append\0\0\0#__widl_f_append_with_node_5_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x06\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x06append\0\0\0#__widl_f_append_with_node_6_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x07\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x06append\0\0\0#__widl_f_append_with_node_7_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x08\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x06append\0\0\0 __widl_f_append_with_str_Element\x01\x01\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x05nodes\x06append\0\0\0\"__widl_f_append_with_str_0_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x06append\0\0\0\"__widl_f_append_with_str_1_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x07nodes_1\x06append\0\0\0\"__widl_f_append_with_str_2_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x07nodes_1\x07nodes_2\x06append\0\0\0\"__widl_f_append_with_str_3_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x04\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x06append\0\0\0\"__widl_f_append_with_str_4_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x05\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x06append\0\0\0\"__widl_f_append_with_str_5_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x06\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x06append\0\0\0\"__widl_f_append_with_str_6_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x07\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x06append\0\0\0\"__widl_f_append_with_str_7_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x08\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x06append\0\0\0\"__widl_f_prepend_with_node_Element\x01\x01\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x05nodes\x07prepend\0\0\0$__widl_f_prepend_with_node_0_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x07prepend\0\0\0$__widl_f_prepend_with_node_1_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x07nodes_1\x07prepend\0\0\0$__widl_f_prepend_with_node_2_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x07nodes_1\x07nodes_2\x07prepend\0\0\0$__widl_f_prepend_with_node_3_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x04\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07prepend\0\0\0$__widl_f_prepend_with_node_4_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x05\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07prepend\0\0\0$__widl_f_prepend_with_node_5_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x06\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07prepend\0\0\0$__widl_f_prepend_with_node_6_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x07\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07prepend\0\0\0$__widl_f_prepend_with_node_7_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x08\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x07prepend\0\0\0!__widl_f_prepend_with_str_Element\x01\x01\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x05nodes\x07prepend\0\0\0#__widl_f_prepend_with_str_0_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x01\x05self_\x07prepend\0\0\0#__widl_f_prepend_with_str_1_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x02\x05self_\x07nodes_1\x07prepend\0\0\0#__widl_f_prepend_with_str_2_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x03\x05self_\x07nodes_1\x07nodes_2\x07prepend\0\0\0#__widl_f_prepend_with_str_3_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x04\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07prepend\0\0\0#__widl_f_prepend_with_str_4_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x05\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07prepend\0\0\0#__widl_f_prepend_with_str_5_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x06\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07prepend\0\0\0#__widl_f_prepend_with_str_6_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x07\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07prepend\0\0\0#__widl_f_prepend_with_str_7_Element\x01\0\0\x01\x07Element\x01\0\0\x01\x08\x05self_\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x07prepend\0\0\0$__widl_f_first_element_child_Element\0\0\0\x01\x07Element\x01\0\x01\x11firstElementChild\x01\x01\x05self_\x11firstElementChild\0\0\0#__widl_f_last_element_child_Element\0\0\0\x01\x07Element\x01\0\x01\x10lastElementChild\x01\x01\x05self_\x10lastElementChild\0\0\0$__widl_f_child_element_count_Element\0\0\0\x01\x07Element\x01\0\x01\x11childElementCount\x01\x01\x05self_\x11childElementCount\0\0\x02\x11HTMLCanvasElement#__widl_instanceof_HTMLCanvasElement\0\0\0\0&__widl_f_get_context_HTMLCanvasElement\x01\0\0\x01\x11HTMLCanvasElement\x01\0\0\x01\x02\x05self_\ncontext_id\ngetContext\0\0\0;__widl_f_get_context_with_context_options_HTMLCanvasElement\x01\0\0\x01\x11HTMLCanvasElement\x01\0\0\x01\x03\x05self_\ncontext_id\x0Fcontext_options\ngetContext\0\0\0\"__widl_f_to_blob_HTMLCanvasElement\x01\0\0\x01\x11HTMLCanvasElement\x01\0\0\x01\x02\x05self_\x08callback\x06toBlob\0\0\0,__widl_f_to_blob_with_type_HTMLCanvasElement\x01\0\0\x01\x11HTMLCanvasElement\x01\0\0\x01\x03\x05self_\x08callback\x05type_\x06toBlob\0\0\0@__widl_f_to_blob_with_type_and_encoder_options_HTMLCanvasElement\x01\0\0\x01\x11HTMLCanvasElement\x01\0\0\x01\x04\x05self_\x08callback\x05type_\x0Fencoder_options\x06toBlob\0\0\0&__widl_f_to_data_url_HTMLCanvasElement\x01\0\0\x01\x11HTMLCanvasElement\x01\0\0\x01\x01\x05self_\ttoDataURL\0\0\00__widl_f_to_data_url_with_type_HTMLCanvasElement\x01\0\0\x01\x11HTMLCanvasElement\x01\0\0\x01\x02\x05self_\x05type_\ttoDataURL\0\0\0D__widl_f_to_data_url_with_type_and_encoder_options_HTMLCanvasElement\x01\0\0\x01\x11HTMLCanvasElement\x01\0\0\x01\x03\x05self_\x05type_\x0Fencoder_options\ttoDataURL\0\0\0 __widl_f_width_HTMLCanvasElement\0\0\0\x01\x11HTMLCanvasElement\x01\0\x01\x05width\x01\x01\x05self_\x05width\0\0\0$__widl_f_set_width_HTMLCanvasElement\0\0\0\x01\x11HTMLCanvasElement\x01\0\x02\x05width\x01\x02\x05self_\x05width\x05width\0\0\0!__widl_f_height_HTMLCanvasElement\0\0\0\x01\x11HTMLCanvasElement\x01\0\x01\x06height\x01\x01\x05self_\x06height\0\0\0%__widl_f_set_height_HTMLCanvasElement\0\0\0\x01\x11HTMLCanvasElement\x01\0\x02\x06height\x01\x02\x05self_\x06height\x06height\0\0\x02\rKeyboardEvent\x1F__widl_instanceof_KeyboardEvent\0\0\0\0\x1A__widl_f_new_KeyboardEvent\x01\0\0\x01\rKeyboardEvent\0\x01\x01\x08type_arg\x03new\0\0\0)__widl_f_get_modifier_state_KeyboardEvent\0\0\0\x01\rKeyboardEvent\x01\0\0\x01\x02\x05self_\x03key\x10getModifierState\0\0\0*__widl_f_init_keyboard_event_KeyboardEvent\x01\0\0\x01\rKeyboardEvent\x01\0\0\x01\x02\x05self_\x08type_arg\x11initKeyboardEvent\0\0\0;__widl_f_init_keyboard_event_with_bubbles_arg_KeyboardEvent\x01\0\0\x01\rKeyboardEvent\x01\0\0\x01\x03\x05self_\x08type_arg\x0Bbubbles_arg\x11initKeyboardEvent\0\0\0N__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_KeyboardEvent\x01\0\0\x01\rKeyboardEvent\x01\0\0\x01\x04\x05self_\x08type_arg\x0Bbubbles_arg\x0Ecancelable_arg\x11initKeyboardEvent\0\0\0[__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_KeyboardEvent\x01\0\0\x01\rKeyboardEvent\x01\0\0\x01\x05\x05self_\x08type_arg\x0Bbubbles_arg\x0Ecancelable_arg\x08view_arg\x11initKeyboardEvent\0\0\0g__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_KeyboardEvent\x01\0\0\x01\rKeyboardEvent\x01\0\0\x01\x06\x05self_\x08type_arg\x0Bbubbles_arg\x0Ecancelable_arg\x08view_arg\x07key_arg\x11initKeyboardEvent\0\0\0x__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_KeyboardEvent\x01\0\0\x01\rKeyboardEvent\x01\0\0\x01\x07\x05self_\x08type_arg\x0Bbubbles_arg\x0Ecancelable_arg\x08view_arg\x07key_arg\x0Clocation_arg\x11initKeyboardEvent\0\0\0\x85\x01__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_KeyboardEvent\x01\0\0\x01\rKeyboardEvent\x01\0\0\x01\x08\x05self_\x08type_arg\x0Bbubbles_arg\x0Ecancelable_arg\x08view_arg\x07key_arg\x0Clocation_arg\x08ctrl_key\x11initKeyboardEvent\0\0\0\x91\x01__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_KeyboardEvent\x01\0\0\x01\rKeyboardEvent\x01\0\0\x01\t\x05self_\x08type_arg\x0Bbubbles_arg\x0Ecancelable_arg\x08view_arg\x07key_arg\x0Clocation_arg\x08ctrl_key\x07alt_key\x11initKeyboardEvent\0\0\0\x9F\x01__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_KeyboardEvent\x01\0\0\x01\rKeyboardEvent\x01\0\0\x01\n\x05self_\x08type_arg\x0Bbubbles_arg\x0Ecancelable_arg\x08view_arg\x07key_arg\x0Clocation_arg\x08ctrl_key\x07alt_key\tshift_key\x11initKeyboardEvent\0\0\0\xAC\x01__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_and_meta_key_KeyboardEvent\x01\0\0\x01\rKeyboardEvent\x01\0\0\x01\x0B\x05self_\x08type_arg\x0Bbubbles_arg\x0Ecancelable_arg\x08view_arg\x07key_arg\x0Clocation_arg\x08ctrl_key\x07alt_key\tshift_key\x08meta_key\x11initKeyboardEvent\0\0\0 __widl_f_char_code_KeyboardEvent\0\0\0\x01\rKeyboardEvent\x01\0\x01\x08charCode\x01\x01\x05self_\x08charCode\0\0\0\x1F__widl_f_key_code_KeyboardEvent\0\0\0\x01\rKeyboardEvent\x01\0\x01\x07keyCode\x01\x01\x05self_\x07keyCode\0\0\0\x1E__widl_f_alt_key_KeyboardEvent\0\0\0\x01\rKeyboardEvent\x01\0\x01\x06altKey\x01\x01\x05self_\x06altKey\0\0\0\x1F__widl_f_ctrl_key_KeyboardEvent\0\0\0\x01\rKeyboardEvent\x01\0\x01\x07ctrlKey\x01\x01\x05self_\x07ctrlKey\0\0\0 __widl_f_shift_key_KeyboardEvent\0\0\0\x01\rKeyboardEvent\x01\0\x01\x08shiftKey\x01\x01\x05self_\x08shiftKey\0\0\0\x1F__widl_f_meta_key_KeyboardEvent\0\0\0\x01\rKeyboardEvent\x01\0\x01\x07metaKey\x01\x01\x05self_\x07metaKey\0\0\0\x1F__widl_f_location_KeyboardEvent\0\0\0\x01\rKeyboardEvent\x01\0\x01\x08location\x01\x01\x05self_\x08location\0\0\0\x1D__widl_f_repeat_KeyboardEvent\0\0\0\x01\rKeyboardEvent\x01\0\x01\x06repeat\x01\x01\x05self_\x06repeat\0\0\0#__widl_f_is_composing_KeyboardEvent\0\0\0\x01\rKeyboardEvent\x01\0\x01\x0BisComposing\x01\x01\x05self_\x0BisComposing\0\0\0\x1A__widl_f_key_KeyboardEvent\0\0\0\x01\rKeyboardEvent\x01\0\x01\x03key\x01\x01\x05self_\x03key\0\0\0\x1B__widl_f_code_KeyboardEvent\0\0\0\x01\rKeyboardEvent\x01\0\x01\x04code\x01\x01\x05self_\x04code\0\0\x02\x04Node\x16__widl_instanceof_Node\0\0\0\0\x1A__widl_f_append_child_Node\x01\0\0\x01\x04Node\x01\0\0\x01\x02\x05self_\x04node\x0BappendChild\0\0\0\x18__widl_f_clone_node_Node\x01\0\0\x01\x04Node\x01\0\0\x01\x01\x05self_\tcloneNode\0\0\0\"__widl_f_clone_node_with_deep_Node\x01\0\0\x01\x04Node\x01\0\0\x01\x02\x05self_\x04deep\tcloneNode\0\0\0'__widl_f_compare_document_position_Node\0\0\0\x01\x04Node\x01\0\0\x01\x02\x05self_\x05other\x17compareDocumentPosition\0\0\0\x16__widl_f_contains_Node\0\0\0\x01\x04Node\x01\0\0\x01\x02\x05self_\x05other\x08contains\0\0\0\x1B__widl_f_get_root_node_Node\0\0\0\x01\x04Node\x01\0\0\x01\x01\x05self_\x0BgetRootNode\0\0\0\x1D__widl_f_has_child_nodes_Node\0\0\0\x01\x04Node\x01\0\0\x01\x01\x05self_\rhasChildNodes\0\0\0\x1B__widl_f_insert_before_Node\x01\0\0\x01\x04Node\x01\0\0\x01\x03\x05self_\x04node\x05child\x0CinsertBefore\0\0\0\"__widl_f_is_default_namespace_Node\0\0\0\x01\x04Node\x01\0\0\x01\x02\x05self_\tnamespace\x12isDefaultNamespace\0\0\0\x1B__widl_f_is_equal_node_Node\0\0\0\x01\x04Node\x01\0\0\x01\x02\x05self_\x04node\x0BisEqualNode\0\0\0\x1A__widl_f_is_same_node_Node\0\0\0\x01\x04Node\x01\0\0\x01\x02\x05self_\x04node\nisSameNode\0\0\0\"__widl_f_lookup_namespace_uri_Node\0\0\0\x01\x04Node\x01\0\0\x01\x02\x05self_\x06prefix\x12lookupNamespaceURI\0\0\0\x1B__widl_f_lookup_prefix_Node\0\0\0\x01\x04Node\x01\0\0\x01\x02\x05self_\tnamespace\x0ClookupPrefix\0\0\0\x17__widl_f_normalize_Node\0\0\0\x01\x04Node\x01\0\0\x01\x01\x05self_\tnormalize\0\0\0\x1A__widl_f_remove_child_Node\x01\0\0\x01\x04Node\x01\0\0\x01\x02\x05self_\x05child\x0BremoveChild\0\0\0\x1B__widl_f_replace_child_Node\x01\0\0\x01\x04Node\x01\0\0\x01\x03\x05self_\x04node\x05child\x0CreplaceChild\0\0\0\x17__widl_f_node_type_Node\0\0\0\x01\x04Node\x01\0\x01\x08nodeType\x01\x01\x05self_\x08nodeType\0\0\0\x17__widl_f_node_name_Node\0\0\0\x01\x04Node\x01\0\x01\x08nodeName\x01\x01\x05self_\x08nodeName\0\0\0\x16__widl_f_base_uri_Node\x01\0\0\x01\x04Node\x01\0\x01\x07baseURI\x01\x01\x05self_\x07baseURI\0\0\0\x1A__widl_f_is_connected_Node\0\0\0\x01\x04Node\x01\0\x01\x0BisConnected\x01\x01\x05self_\x0BisConnected\0\0\0\x1C__widl_f_owner_document_Node\0\0\0\x01\x04Node\x01\0\x01\rownerDocument\x01\x01\x05self_\rownerDocument\0\0\0\x19__widl_f_parent_node_Node\0\0\0\x01\x04Node\x01\0\x01\nparentNode\x01\x01\x05self_\nparentNode\0\0\0\x1C__widl_f_parent_element_Node\0\0\0\x01\x04Node\x01\0\x01\rparentElement\x01\x01\x05self_\rparentElement\0\0\0\x19__widl_f_first_child_Node\0\0\0\x01\x04Node\x01\0\x01\nfirstChild\x01\x01\x05self_\nfirstChild\0\0\0\x18__widl_f_last_child_Node\0\0\0\x01\x04Node\x01\0\x01\tlastChild\x01\x01\x05self_\tlastChild\0\0\0\x1E__widl_f_previous_sibling_Node\0\0\0\x01\x04Node\x01\0\x01\x0FpreviousSibling\x01\x01\x05self_\x0FpreviousSibling\0\0\0\x1A__widl_f_next_sibling_Node\0\0\0\x01\x04Node\x01\0\x01\x0BnextSibling\x01\x01\x05self_\x0BnextSibling\0\0\0\x18__widl_f_node_value_Node\0\0\0\x01\x04Node\x01\0\x01\tnodeValue\x01\x01\x05self_\tnodeValue\0\0\0\x1C__widl_f_set_node_value_Node\0\0\0\x01\x04Node\x01\0\x02\tnodeValue\x01\x02\x05self_\nnode_value\tnodeValue\0\0\0\x1A__widl_f_text_content_Node\0\0\0\x01\x04Node\x01\0\x01\x0BtextContent\x01\x01\x05self_\x0BtextContent\0\0\0\x1E__widl_f_set_text_content_Node\0\0\0\x01\x04Node\x01\0\x02\x0BtextContent\x01\x02\x05self_\x0Ctext_content\x0BtextContent\0\0\x02\x0BWebGLBuffer\x1D__widl_instanceof_WebGLBuffer\0\0\0\x02\x0CWebGLProgram\x1E__widl_instanceof_WebGLProgram\0\0\0\x02\x15WebGLRenderingContext'__widl_instanceof_WebGLRenderingContext\0\0\0\03__widl_f_buffer_data_with_i32_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x06target\x04size\x05usage\nbufferData\0\0\03__widl_f_buffer_data_with_f64_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x06target\x04size\x05usage\nbufferData\0\0\0@__widl_f_buffer_data_with_opt_array_buffer_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x06target\x04data\x05usage\nbufferData\0\0\0A__widl_f_buffer_data_with_array_buffer_view_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x06target\x04data\x05usage\nbufferData\0\0\08__widl_f_buffer_data_with_u8_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x06target\x04data\x05usage\nbufferData\0\0\0H__widl_f_buffer_sub_data_with_i32_and_array_buffer_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x06target\x06offset\x04data\rbufferSubData\0\0\0H__widl_f_buffer_sub_data_with_f64_and_array_buffer_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x06target\x06offset\x04data\rbufferSubData\0\0\0M__widl_f_buffer_sub_data_with_i32_and_array_buffer_view_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x06target\x06offset\x04data\rbufferSubData\0\0\0M__widl_f_buffer_sub_data_with_f64_and_array_buffer_view_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x06target\x06offset\x04data\rbufferSubData\0\0\0D__widl_f_buffer_sub_data_with_i32_and_u8_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x06target\x06offset\x04data\rbufferSubData\0\0\0D__widl_f_buffer_sub_data_with_f64_and_u8_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x06target\x06offset\x04data\rbufferSubData\0\0\0%__widl_f_commit_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x01\x05self_\x06commit\0\0\0M__widl_f_compressed_tex_image_2d_with_array_buffer_view_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x08\x05self_\x06target\x05level\x0Einternalformat\x05width\x06height\x06border\x04data\x14compressedTexImage2D\0\0\0D__widl_f_compressed_tex_image_2d_with_u8_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x08\x05self_\x06target\x05level\x0Einternalformat\x05width\x06height\x06border\x04data\x14compressedTexImage2D\0\0\0Q__widl_f_compressed_tex_sub_image_2d_with_array_buffer_view_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\t\x05self_\x06target\x05level\x07xoffset\x07yoffset\x05width\x06height\x06format\x04data\x17compressedTexSubImage2D\0\0\0H__widl_f_compressed_tex_sub_image_2d_with_u8_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\t\x05self_\x06target\x05level\x07xoffset\x07yoffset\x05width\x06height\x06format\x04data\x17compressedTexSubImage2D\0\0\0E__widl_f_read_pixels_with_opt_array_buffer_view_WebGLRenderingContext\x01\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x08\x05self_\x01x\x01y\x05width\x06height\x06format\x05type_\x06pixels\nreadPixels\0\0\0<__widl_f_read_pixels_with_opt_u8_array_WebGLRenderingContext\x01\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x08\x05self_\x01x\x01y\x05width\x06height\x06format\x05type_\x06pixels\nreadPixels\0\0\0r__widl_f_tex_image_2d_with_i32_and_i32_and_i32_and_format_and_type_and_opt_array_buffer_view_WebGLRenderingContext\x01\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\n\x05self_\x06target\x05level\x0Einternalformat\x05width\x06height\x06border\x06format\x05type_\x06pixels\ntexImage2D\0\0\0i__widl_f_tex_image_2d_with_i32_and_i32_and_i32_and_format_and_type_and_opt_u8_array_WebGLRenderingContext\x01\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\n\x05self_\x06target\x05level\x0Einternalformat\x05width\x06height\x06border\x06format\x05type_\x06pixels\ntexImage2D\0\0\0G__widl_f_tex_image_2d_with_u32_and_u32_and_canvas_WebGLRenderingContext\x01\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x07\x05self_\x06target\x05level\x0Einternalformat\x06format\x05type_\x06canvas\ntexImage2D\0\0\0k__widl_f_tex_sub_image_2d_with_i32_and_i32_and_u32_and_type_and_opt_array_buffer_view_WebGLRenderingContext\x01\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\n\x05self_\x06target\x05level\x07xoffset\x07yoffset\x05width\x06height\x06format\x05type_\x06pixels\rtexSubImage2D\0\0\0b__widl_f_tex_sub_image_2d_with_i32_and_i32_and_u32_and_type_and_opt_u8_array_WebGLRenderingContext\x01\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\n\x05self_\x06target\x05level\x07xoffset\x07yoffset\x05width\x06height\x06format\x05type_\x06pixels\rtexSubImage2D\0\0\0K__widl_f_tex_sub_image_2d_with_u32_and_u32_and_canvas_WebGLRenderingContext\x01\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x08\x05self_\x06target\x05level\x07xoffset\x07yoffset\x06format\x05type_\x06canvas\rtexSubImage2D\0\0\08__widl_f_uniform1fv_with_f32_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform1fv\0\0\0;__widl_f_uniform1fv_with_f32_sequence_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform1fv\0\0\08__widl_f_uniform1iv_with_i32_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform1iv\0\0\0;__widl_f_uniform1iv_with_i32_sequence_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform1iv\0\0\08__widl_f_uniform2fv_with_f32_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform2fv\0\0\0;__widl_f_uniform2fv_with_f32_sequence_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform2fv\0\0\08__widl_f_uniform2iv_with_i32_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform2iv\0\0\0;__widl_f_uniform2iv_with_i32_sequence_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform2iv\0\0\08__widl_f_uniform3fv_with_f32_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform3fv\0\0\0;__widl_f_uniform3fv_with_f32_sequence_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform3fv\0\0\08__widl_f_uniform3iv_with_i32_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform3iv\0\0\0;__widl_f_uniform3iv_with_i32_sequence_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform3iv\0\0\08__widl_f_uniform4fv_with_f32_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform4fv\0\0\0;__widl_f_uniform4fv_with_f32_sequence_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform4fv\0\0\08__widl_f_uniform4iv_with_i32_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform4iv\0\0\0;__widl_f_uniform4iv_with_i32_sequence_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x04data\nuniform4iv\0\0\0?__widl_f_uniform_matrix2fv_with_f32_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x08location\ttranspose\x04data\x10uniformMatrix2fv\0\0\0B__widl_f_uniform_matrix2fv_with_f32_sequence_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x08location\ttranspose\x04data\x10uniformMatrix2fv\0\0\0?__widl_f_uniform_matrix3fv_with_f32_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x08location\ttranspose\x04data\x10uniformMatrix3fv\0\0\0B__widl_f_uniform_matrix3fv_with_f32_sequence_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x08location\ttranspose\x04data\x10uniformMatrix3fv\0\0\0?__widl_f_uniform_matrix4fv_with_f32_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x08location\ttranspose\x04data\x10uniformMatrix4fv\0\0\0B__widl_f_uniform_matrix4fv_with_f32_sequence_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x08location\ttranspose\x04data\x10uniformMatrix4fv\0\0\0-__widl_f_active_texture_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x07texture\ractiveTexture\0\0\0,__widl_f_attach_shader_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x07program\x06shader\x0CattachShader\0\0\03__widl_f_bind_attrib_location_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x07program\x05index\x04name\x12bindAttribLocation\0\0\0*__widl_f_bind_buffer_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x06target\x06buffer\nbindBuffer\0\0\0+__widl_f_bind_texture_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x06target\x07texture\x0BbindTexture\0\0\0*__widl_f_blend_color_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x05\x05self_\x03red\x05green\x04blue\x05alpha\nblendColor\0\0\0-__widl_f_blend_equation_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x04mode\rblendEquation\0\0\06__widl_f_blend_equation_separate_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08mode_rgb\nmode_alpha\x15blendEquationSeparate\0\0\0)__widl_f_blend_func_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x07sfactor\x07dfactor\tblendFunc\0\0\02__widl_f_blend_func_separate_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x05\x05self_\x07src_rgb\x07dst_rgb\tsrc_alpha\tdst_alpha\x11blendFuncSeparate\0\0\07__widl_f_check_framebuffer_status_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x06target\x16checkFramebufferStatus\0\0\0$__widl_f_clear_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x04mask\x05clear\0\0\0*__widl_f_clear_color_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x05\x05self_\x03red\x05green\x04blue\x05alpha\nclearColor\0\0\0*__widl_f_clear_depth_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x05depth\nclearDepth\0\0\0,__widl_f_clear_stencil_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x01s\x0CclearStencil\0\0\0)__widl_f_color_mask_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x05\x05self_\x03red\x05green\x04blue\x05alpha\tcolorMask\0\0\0-__widl_f_compile_shader_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x06shader\rcompileShader\0\0\00__widl_f_copy_tex_image_2d_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\t\x05self_\x06target\x05level\x0Einternalformat\x01x\x01y\x05width\x06height\x06border\x0EcopyTexImage2D\0\0\04__widl_f_copy_tex_sub_image_2d_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\t\x05self_\x06target\x05level\x07xoffset\x07yoffset\x01x\x01y\x05width\x06height\x11copyTexSubImage2D\0\0\0,__widl_f_create_buffer_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x01\x05self_\x0CcreateBuffer\0\0\0-__widl_f_create_program_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x01\x05self_\rcreateProgram\0\0\0,__widl_f_create_shader_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x05type_\x0CcreateShader\0\0\0-__widl_f_create_texture_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x01\x05self_\rcreateTexture\0\0\0(__widl_f_cull_face_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x04mode\x08cullFace\0\0\0,__widl_f_delete_buffer_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x06buffer\x0CdeleteBuffer\0\0\0-__widl_f_delete_program_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x07program\rdeleteProgram\0\0\0,__widl_f_delete_shader_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x06shader\x0CdeleteShader\0\0\0-__widl_f_delete_texture_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x07texture\rdeleteTexture\0\0\0)__widl_f_depth_func_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x04func\tdepthFunc\0\0\0)__widl_f_depth_mask_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x04flag\tdepthMask\0\0\0*__widl_f_depth_range_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x06z_near\x05z_far\ndepthRange\0\0\0,__widl_f_detach_shader_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x07program\x06shader\x0CdetachShader\0\0\0&__widl_f_disable_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x03cap\x07disable\0\0\0:__widl_f_disable_vertex_attrib_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x05index\x18disableVertexAttribArray\0\0\0*__widl_f_draw_arrays_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x04mode\x05first\x05count\ndrawArrays\0\0\05__widl_f_draw_elements_with_i32_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x05\x05self_\x04mode\x05count\x05type_\x06offset\x0CdrawElements\0\0\05__widl_f_draw_elements_with_f64_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x05\x05self_\x04mode\x05count\x05type_\x06offset\x0CdrawElements\0\0\0%__widl_f_enable_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x03cap\x06enable\0\0\09__widl_f_enable_vertex_attrib_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x05index\x17enableVertexAttribArray\0\0\0%__widl_f_finish_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x01\x05self_\x06finish\0\0\0$__widl_f_flush_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x01\x05self_\x05flush\0\0\05__widl_f_framebuffer_texture_2d_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x06\x05self_\x06target\nattachment\ttextarget\x07texture\x05level\x14framebufferTexture2D\0\0\0)__widl_f_front_face_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x04mode\tfrontFace\0\0\0.__widl_f_generate_mipmap_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x06target\x0EgenerateMipmap\0\0\03__widl_f_get_attached_shaders_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x07program\x12getAttachedShaders\0\0\02__widl_f_get_attrib_location_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x07program\x04name\x11getAttribLocation\0\0\03__widl_f_get_buffer_parameter_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x06target\x05pname\x12getBufferParameter\0\0\0(__widl_f_get_error_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x01\x05self_\x08getError\0\0\0,__widl_f_get_extension_WebGLRenderingContext\x01\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x04name\x0CgetExtension\0\0\0C__widl_f_get_framebuffer_attachment_parameter_WebGLRenderingContext\x01\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x06target\nattachment\x05pname!getFramebufferAttachmentParameter\0\0\0,__widl_f_get_parameter_WebGLRenderingContext\x01\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x05pname\x0CgetParameter\0\0\03__widl_f_get_program_info_log_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x07program\x11getProgramInfoLog\0\0\04__widl_f_get_program_parameter_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x07program\x05pname\x13getProgramParameter\0\0\09__widl_f_get_renderbuffer_parameter_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x06target\x05pname\x18getRenderbufferParameter\0\0\02__widl_f_get_shader_info_log_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x06shader\x10getShaderInfoLog\0\0\03__widl_f_get_shader_parameter_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x06shader\x05pname\x12getShaderParameter\0\0\00__widl_f_get_shader_source_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x06shader\x0FgetShaderSource\0\0\07__widl_f_get_supported_extensions_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x01\x05self_\x16getSupportedExtensions\0\0\00__widl_f_get_tex_parameter_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x06target\x05pname\x0FgetTexParameter\0\0\0*__widl_f_get_uniform_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x07program\x08location\ngetUniform\0\0\03__widl_f_get_uniform_location_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x07program\x04name\x12getUniformLocation\0\0\00__widl_f_get_vertex_attrib_WebGLRenderingContext\x01\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x05index\x05pname\x0FgetVertexAttrib\0\0\07__widl_f_get_vertex_attrib_offset_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x05index\x05pname\x15getVertexAttribOffset\0\0\0#__widl_f_hint_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x06target\x04mode\x04hint\0\0\0(__widl_f_is_buffer_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x06buffer\x08isBuffer\0\0\0.__widl_f_is_context_lost_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x01\x05self_\risContextLost\0\0\0)__widl_f_is_enabled_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x03cap\tisEnabled\0\0\0)__widl_f_is_program_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x07program\tisProgram\0\0\0(__widl_f_is_shader_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x06shader\x08isShader\0\0\0)__widl_f_is_texture_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x07texture\tisTexture\0\0\0)__widl_f_line_width_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x05width\tlineWidth\0\0\0+__widl_f_link_program_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x07program\x0BlinkProgram\0\0\0+__widl_f_pixel_storei_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x05pname\x05param\x0BpixelStorei\0\0\0-__widl_f_polygon_offset_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x06factor\x05units\rpolygonOffset\0\0\03__widl_f_renderbuffer_storage_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x05\x05self_\x06target\x0Einternalformat\x05width\x06height\x13renderbufferStorage\0\0\0.__widl_f_sample_coverage_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x05value\x06invert\x0EsampleCoverage\0\0\0&__widl_f_scissor_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x05\x05self_\x01x\x01y\x05width\x06height\x07scissor\0\0\0,__widl_f_shader_source_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x06shader\x06source\x0CshaderSource\0\0\0+__widl_f_stencil_func_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x04func\x04ref_\x04mask\x0BstencilFunc\0\0\04__widl_f_stencil_func_separate_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x05\x05self_\x04face\x04func\x04ref_\x04mask\x13stencilFuncSeparate\0\0\0+__widl_f_stencil_mask_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x04mask\x0BstencilMask\0\0\04__widl_f_stencil_mask_separate_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x04face\x04mask\x13stencilMaskSeparate\0\0\0)__widl_f_stencil_op_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x04fail\x05zfail\x05zpass\tstencilOp\0\0\02__widl_f_stencil_op_separate_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x05\x05self_\x04face\x04fail\x05zfail\x05zpass\x11stencilOpSeparate\0\0\0-__widl_f_tex_parameterf_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x06target\x05pname\x05param\rtexParameterf\0\0\0-__widl_f_tex_parameteri_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x06target\x05pname\x05param\rtexParameteri\0\0\0(__widl_f_uniform1f_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x01x\tuniform1f\0\0\0(__widl_f_uniform1i_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x08location\x01x\tuniform1i\0\0\0(__widl_f_uniform2f_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x08location\x01x\x01y\tuniform2f\0\0\0(__widl_f_uniform2i_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x08location\x01x\x01y\tuniform2i\0\0\0(__widl_f_uniform3f_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x05\x05self_\x08location\x01x\x01y\x01z\tuniform3f\0\0\0(__widl_f_uniform3i_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x05\x05self_\x08location\x01x\x01y\x01z\tuniform3i\0\0\0(__widl_f_uniform4f_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x06\x05self_\x08location\x01x\x01y\x01z\x01w\tuniform4f\0\0\0(__widl_f_uniform4i_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x06\x05self_\x08location\x01x\x01y\x01z\x01w\tuniform4i\0\0\0*__widl_f_use_program_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x07program\nuseProgram\0\0\0/__widl_f_validate_program_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x02\x05self_\x07program\x0FvalidateProgram\0\0\0.__widl_f_vertex_attrib1f_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x04indx\x01x\x0EvertexAttrib1f\0\0\0>__widl_f_vertex_attrib1fv_with_f32_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x04indx\x06values\x0FvertexAttrib1fv\0\0\0A__widl_f_vertex_attrib1fv_with_f32_sequence_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x04indx\x06values\x0FvertexAttrib1fv\0\0\0.__widl_f_vertex_attrib2f_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x04\x05self_\x04indx\x01x\x01y\x0EvertexAttrib2f\0\0\0>__widl_f_vertex_attrib2fv_with_f32_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x04indx\x06values\x0FvertexAttrib2fv\0\0\0A__widl_f_vertex_attrib2fv_with_f32_sequence_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x04indx\x06values\x0FvertexAttrib2fv\0\0\0.__widl_f_vertex_attrib3f_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x05\x05self_\x04indx\x01x\x01y\x01z\x0EvertexAttrib3f\0\0\0>__widl_f_vertex_attrib3fv_with_f32_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x04indx\x06values\x0FvertexAttrib3fv\0\0\0A__widl_f_vertex_attrib3fv_with_f32_sequence_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x04indx\x06values\x0FvertexAttrib3fv\0\0\0.__widl_f_vertex_attrib4f_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x06\x05self_\x04indx\x01x\x01y\x01z\x01w\x0EvertexAttrib4f\0\0\0>__widl_f_vertex_attrib4fv_with_f32_array_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x04indx\x06values\x0FvertexAttrib4fv\0\0\0A__widl_f_vertex_attrib4fv_with_f32_sequence_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x03\x05self_\x04indx\x06values\x0FvertexAttrib4fv\0\0\0=__widl_f_vertex_attrib_pointer_with_i32_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x07\x05self_\x04indx\x04size\x05type_\nnormalized\x06stride\x06offset\x13vertexAttribPointer\0\0\0=__widl_f_vertex_attrib_pointer_with_f64_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x07\x05self_\x04indx\x04size\x05type_\nnormalized\x06stride\x06offset\x13vertexAttribPointer\0\0\0'__widl_f_viewport_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\0\x01\x05\x05self_\x01x\x01y\x05width\x06height\x08viewport\0\0\0%__widl_f_canvas_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\x01\x06canvas\x01\x01\x05self_\x06canvas\0\0\03__widl_f_drawing_buffer_width_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\x01\x12drawingBufferWidth\x01\x01\x05self_\x12drawingBufferWidth\0\0\04__widl_f_drawing_buffer_height_WebGLRenderingContext\0\0\0\x01\x15WebGLRenderingContext\x01\0\x01\x13drawingBufferHeight\x01\x01\x05self_\x13drawingBufferHeight\0\0\x02\x0BWebGLShader\x1D__widl_instanceof_WebGLShader\0\0\0\x02\x0CWebGLTexture\x1E__widl_instanceof_WebGLTexture\0\0\0\x02\x14WebGLUniformLocation&__widl_instanceof_WebGLUniformLocation\0\0\0\x02\x06Window\x18__widl_instanceof_Window\0\0\0\0\x15__widl_f_alert_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x05alert\0\0\0\"__widl_f_alert_with_message_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07message\x05alert\0\0\0\x14__widl_f_blur_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x04blur\0\0\0&__widl_f_cancel_animation_frame_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x06handle\x14cancelAnimationFrame\0\0\0$__widl_f_cancel_idle_callback_Window\0\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x06handle\x12cancelIdleCallback\0\0\0\x1E__widl_f_capture_events_Window\0\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\rcaptureEvents\0\0\0\x15__widl_f_close_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x05close\0\0\0\x17__widl_f_confirm_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x07confirm\0\0\0$__widl_f_confirm_with_message_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07message\x07confirm\0\0\0\x15__widl_f_focus_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x05focus\0\0\0\x17__widl_f_move_by_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x06moveBy\0\0\0\x17__widl_f_move_to_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x06moveTo\0\0\0\x14__widl_f_open_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x04open\0\0\0\x1D__widl_f_open_with_url_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x03url\x04open\0\0\0(__widl_f_open_with_url_and_target_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x03url\x06target\x04open\0\0\05__widl_f_open_with_url_and_target_and_features_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x03url\x06target\x08features\x04open\0\0\0\x1C__widl_f_post_message_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07message\rtarget_origin\x0BpostMessage\0\0\0*__widl_f_post_message_with_transfer_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07message\rtarget_origin\x08transfer\x0BpostMessage\0\0\0\x15__widl_f_print_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x05print\0\0\0\x16__widl_f_prompt_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x06prompt\0\0\0#__widl_f_prompt_with_message_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07message\x06prompt\0\0\0/__widl_f_prompt_with_message_and_default_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07message\x07default\x06prompt\0\0\0\x1E__widl_f_release_events_Window\0\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\rreleaseEvents\0\0\0'__widl_f_request_animation_frame_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x08callback\x15requestAnimationFrame\0\0\0%__widl_f_request_idle_callback_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x08callback\x13requestIdleCallback\0\0\0\x19__widl_f_resize_by_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x08resizeBy\0\0\0\x19__widl_f_resize_to_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x08resizeTo\0\0\0#__widl_f_scroll_with_x_and_y_Window\0\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x06scroll\0\0\0\x16__widl_f_scroll_Window\0\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x06scroll\0\0\0&__widl_f_scroll_by_with_x_and_y_Window\0\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x08scrollBy\0\0\0\x19__widl_f_scroll_by_Window\0\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x08scrollBy\0\0\0&__widl_f_scroll_to_with_x_and_y_Window\0\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x08scrollTo\0\0\0\x19__widl_f_scroll_to_Window\0\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x08scrollTo\0\0\0\x14__widl_f_stop_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x04stop\0\0\0\x13__widl_f_get_Window\0\0\0\x01\x06Window\x01\0\x03\x01\x02\x05self_\x04name\x03get\0\0\0\x16__widl_f_window_Window\0\0\0\x01\x06Window\x01\0\x01\x06window\x01\x01\x05self_\x06window\0\0\0\x14__widl_f_self_Window\0\0\0\x01\x06Window\x01\0\x01\x04self\x01\x01\x05self_\x04self\0\0\0\x18__widl_f_document_Window\0\0\0\x01\x06Window\x01\0\x01\x08document\x01\x01\x05self_\x08document\0\0\0\x14__widl_f_name_Window\x01\0\0\x01\x06Window\x01\0\x01\x04name\x01\x01\x05self_\x04name\0\0\0\x18__widl_f_set_name_Window\x01\0\0\x01\x06Window\x01\0\x02\x04name\x01\x02\x05self_\x04name\x04name\0\0\0\x16__widl_f_status_Window\x01\0\0\x01\x06Window\x01\0\x01\x06status\x01\x01\x05self_\x06status\0\0\0\x1A__widl_f_set_status_Window\x01\0\0\x01\x06Window\x01\0\x02\x06status\x01\x02\x05self_\x06status\x06status\0\0\0\x16__widl_f_closed_Window\x01\0\0\x01\x06Window\x01\0\x01\x06closed\x01\x01\x05self_\x06closed\0\0\0\x15__widl_f_event_Window\0\0\0\x01\x06Window\x01\0\x01\x05event\x01\x01\x05self_\x05event\0\0\0\x16__widl_f_frames_Window\x01\0\0\x01\x06Window\x01\0\x01\x06frames\x01\x01\x05self_\x06frames\0\0\0\x16__widl_f_length_Window\0\0\0\x01\x06Window\x01\0\x01\x06length\x01\x01\x05self_\x06length\0\0\0\x13__widl_f_top_Window\x01\0\0\x01\x06Window\x01\0\x01\x03top\x01\x01\x05self_\x03top\0\0\0\x16__widl_f_opener_Window\x01\0\0\x01\x06Window\x01\0\x01\x06opener\x01\x01\x05self_\x06opener\0\0\0\x1A__widl_f_set_opener_Window\x01\0\0\x01\x06Window\x01\0\x02\x06opener\x01\x02\x05self_\x06opener\x06opener\0\0\0\x16__widl_f_parent_Window\x01\0\0\x01\x06Window\x01\0\x01\x06parent\x01\x01\x05self_\x06parent\0\0\0\x1D__widl_f_frame_element_Window\x01\0\0\x01\x06Window\x01\0\x01\x0CframeElement\x01\x01\x05self_\x0CframeElement\0\0\0\x1E__widl_f_onappinstalled_Window\0\0\0\x01\x06Window\x01\0\x01\x0Eonappinstalled\x01\x01\x05self_\x0Eonappinstalled\0\0\0\"__widl_f_set_onappinstalled_Window\0\0\0\x01\x06Window\x01\0\x02\x0Eonappinstalled\x01\x02\x05self_\x0Eonappinstalled\x0Eonappinstalled\0\0\0\x1B__widl_f_inner_width_Window\x01\0\0\x01\x06Window\x01\0\x01\ninnerWidth\x01\x01\x05self_\ninnerWidth\0\0\0\x1F__widl_f_set_inner_width_Window\x01\0\0\x01\x06Window\x01\0\x02\ninnerWidth\x01\x02\x05self_\x0Binner_width\ninnerWidth\0\0\0\x1C__widl_f_inner_height_Window\x01\0\0\x01\x06Window\x01\0\x01\x0BinnerHeight\x01\x01\x05self_\x0BinnerHeight\0\0\0 __widl_f_set_inner_height_Window\x01\0\0\x01\x06Window\x01\0\x02\x0BinnerHeight\x01\x02\x05self_\x0Cinner_height\x0BinnerHeight\0\0\0\x18__widl_f_scroll_x_Window\x01\0\0\x01\x06Window\x01\0\x01\x07scrollX\x01\x01\x05self_\x07scrollX\0\0\0\x1D__widl_f_page_x_offset_Window\x01\0\0\x01\x06Window\x01\0\x01\x0BpageXOffset\x01\x01\x05self_\x0BpageXOffset\0\0\0\x18__widl_f_scroll_y_Window\x01\0\0\x01\x06Window\x01\0\x01\x07scrollY\x01\x01\x05self_\x07scrollY\0\0\0\x1D__widl_f_page_y_offset_Window\x01\0\0\x01\x06Window\x01\0\x01\x0BpageYOffset\x01\x01\x05self_\x0BpageYOffset\0\0\0\x18__widl_f_screen_x_Window\x01\0\0\x01\x06Window\x01\0\x01\x07screenX\x01\x01\x05self_\x07screenX\0\0\0\x1C__widl_f_set_screen_x_Window\x01\0\0\x01\x06Window\x01\0\x02\x07screenX\x01\x02\x05self_\x08screen_x\x07screenX\0\0\0\x18__widl_f_screen_y_Window\x01\0\0\x01\x06Window\x01\0\x01\x07screenY\x01\x01\x05self_\x07screenY\0\0\0\x1C__widl_f_set_screen_y_Window\x01\0\0\x01\x06Window\x01\0\x02\x07screenY\x01\x02\x05self_\x08screen_y\x07screenY\0\0\0\x1B__widl_f_outer_width_Window\x01\0\0\x01\x06Window\x01\0\x01\nouterWidth\x01\x01\x05self_\nouterWidth\0\0\0\x1F__widl_f_set_outer_width_Window\x01\0\0\x01\x06Window\x01\0\x02\nouterWidth\x01\x02\x05self_\x0Bouter_width\nouterWidth\0\0\0\x1C__widl_f_outer_height_Window\x01\0\0\x01\x06Window\x01\0\x01\x0BouterHeight\x01\x01\x05self_\x0BouterHeight\0\0\0 __widl_f_set_outer_height_Window\x01\0\0\x01\x06Window\x01\0\x02\x0BouterHeight\x01\x02\x05self_\x0Couter_height\x0BouterHeight\0\0\0\"__widl_f_device_pixel_ratio_Window\0\0\0\x01\x06Window\x01\0\x01\x10devicePixelRatio\x01\x01\x05self_\x10devicePixelRatio\0\0\0\x1B__widl_f_orientation_Window\0\0\0\x01\x06Window\x01\0\x01\x0Borientation\x01\x01\x05self_\x0Borientation\0\0\0#__widl_f_onorientationchange_Window\0\0\0\x01\x06Window\x01\0\x01\x13onorientationchange\x01\x01\x05self_\x13onorientationchange\0\0\0'__widl_f_set_onorientationchange_Window\0\0\0\x01\x06Window\x01\0\x02\x13onorientationchange\x01\x02\x05self_\x13onorientationchange\x13onorientationchange\0\0\0\"__widl_f_onvrdisplayconnect_Window\0\0\0\x01\x06Window\x01\0\x01\x12onvrdisplayconnect\x01\x01\x05self_\x12onvrdisplayconnect\0\0\0&__widl_f_set_onvrdisplayconnect_Window\0\0\0\x01\x06Window\x01\0\x02\x12onvrdisplayconnect\x01\x02\x05self_\x12onvrdisplayconnect\x12onvrdisplayconnect\0\0\0%__widl_f_onvrdisplaydisconnect_Window\0\0\0\x01\x06Window\x01\0\x01\x15onvrdisplaydisconnect\x01\x01\x05self_\x15onvrdisplaydisconnect\0\0\0)__widl_f_set_onvrdisplaydisconnect_Window\0\0\0\x01\x06Window\x01\0\x02\x15onvrdisplaydisconnect\x01\x02\x05self_\x15onvrdisplaydisconnect\x15onvrdisplaydisconnect\0\0\0#__widl_f_onvrdisplayactivate_Window\0\0\0\x01\x06Window\x01\0\x01\x13onvrdisplayactivate\x01\x01\x05self_\x13onvrdisplayactivate\0\0\0'__widl_f_set_onvrdisplayactivate_Window\0\0\0\x01\x06Window\x01\0\x02\x13onvrdisplayactivate\x01\x02\x05self_\x13onvrdisplayactivate\x13onvrdisplayactivate\0\0\0%__widl_f_onvrdisplaydeactivate_Window\0\0\0\x01\x06Window\x01\0\x01\x15onvrdisplaydeactivate\x01\x01\x05self_\x15onvrdisplaydeactivate\0\0\0)__widl_f_set_onvrdisplaydeactivate_Window\0\0\0\x01\x06Window\x01\0\x02\x15onvrdisplaydeactivate\x01\x02\x05self_\x15onvrdisplaydeactivate\x15onvrdisplaydeactivate\0\0\0(__widl_f_onvrdisplaypresentchange_Window\0\0\0\x01\x06Window\x01\0\x01\x18onvrdisplaypresentchange\x01\x01\x05self_\x18onvrdisplaypresentchange\0\0\0,__widl_f_set_onvrdisplaypresentchange_Window\0\0\0\x01\x06Window\x01\0\x02\x18onvrdisplaypresentchange\x01\x02\x05self_\x18onvrdisplaypresentchange\x18onvrdisplaypresentchange\0\0\0\x17__widl_f_onabort_Window\0\0\0\x01\x06Window\x01\0\x01\x07onabort\x01\x01\x05self_\x07onabort\0\0\0\x1B__widl_f_set_onabort_Window\0\0\0\x01\x06Window\x01\0\x02\x07onabort\x01\x02\x05self_\x07onabort\x07onabort\0\0\0\x16__widl_f_onblur_Window\0\0\0\x01\x06Window\x01\0\x01\x06onblur\x01\x01\x05self_\x06onblur\0\0\0\x1A__widl_f_set_onblur_Window\0\0\0\x01\x06Window\x01\0\x02\x06onblur\x01\x02\x05self_\x06onblur\x06onblur\0\0\0\x17__widl_f_onfocus_Window\0\0\0\x01\x06Window\x01\0\x01\x07onfocus\x01\x01\x05self_\x07onfocus\0\0\0\x1B__widl_f_set_onfocus_Window\0\0\0\x01\x06Window\x01\0\x02\x07onfocus\x01\x02\x05self_\x07onfocus\x07onfocus\0\0\0\x1A__widl_f_onauxclick_Window\0\0\0\x01\x06Window\x01\0\x01\nonauxclick\x01\x01\x05self_\nonauxclick\0\0\0\x1E__widl_f_set_onauxclick_Window\0\0\0\x01\x06Window\x01\0\x02\nonauxclick\x01\x02\x05self_\nonauxclick\nonauxclick\0\0\0\x19__widl_f_oncanplay_Window\0\0\0\x01\x06Window\x01\0\x01\toncanplay\x01\x01\x05self_\toncanplay\0\0\0\x1D__widl_f_set_oncanplay_Window\0\0\0\x01\x06Window\x01\0\x02\toncanplay\x01\x02\x05self_\toncanplay\toncanplay\0\0\0 __widl_f_oncanplaythrough_Window\0\0\0\x01\x06Window\x01\0\x01\x10oncanplaythrough\x01\x01\x05self_\x10oncanplaythrough\0\0\0$__widl_f_set_oncanplaythrough_Window\0\0\0\x01\x06Window\x01\0\x02\x10oncanplaythrough\x01\x02\x05self_\x10oncanplaythrough\x10oncanplaythrough\0\0\0\x18__widl_f_onchange_Window\0\0\0\x01\x06Window\x01\0\x01\x08onchange\x01\x01\x05self_\x08onchange\0\0\0\x1C__widl_f_set_onchange_Window\0\0\0\x01\x06Window\x01\0\x02\x08onchange\x01\x02\x05self_\x08onchange\x08onchange\0\0\0\x17__widl_f_onclick_Window\0\0\0\x01\x06Window\x01\0\x01\x07onclick\x01\x01\x05self_\x07onclick\0\0\0\x1B__widl_f_set_onclick_Window\0\0\0\x01\x06Window\x01\0\x02\x07onclick\x01\x02\x05self_\x07onclick\x07onclick\0\0\0\x17__widl_f_onclose_Window\0\0\0\x01\x06Window\x01\0\x01\x07onclose\x01\x01\x05self_\x07onclose\0\0\0\x1B__widl_f_set_onclose_Window\0\0\0\x01\x06Window\x01\0\x02\x07onclose\x01\x02\x05self_\x07onclose\x07onclose\0\0\0\x1D__widl_f_oncontextmenu_Window\0\0\0\x01\x06Window\x01\0\x01\roncontextmenu\x01\x01\x05self_\roncontextmenu\0\0\0!__widl_f_set_oncontextmenu_Window\0\0\0\x01\x06Window\x01\0\x02\roncontextmenu\x01\x02\x05self_\roncontextmenu\roncontextmenu\0\0\0\x1A__widl_f_ondblclick_Window\0\0\0\x01\x06Window\x01\0\x01\nondblclick\x01\x01\x05self_\nondblclick\0\0\0\x1E__widl_f_set_ondblclick_Window\0\0\0\x01\x06Window\x01\0\x02\nondblclick\x01\x02\x05self_\nondblclick\nondblclick\0\0\0\x16__widl_f_ondrag_Window\0\0\0\x01\x06Window\x01\0\x01\x06ondrag\x01\x01\x05self_\x06ondrag\0\0\0\x1A__widl_f_set_ondrag_Window\0\0\0\x01\x06Window\x01\0\x02\x06ondrag\x01\x02\x05self_\x06ondrag\x06ondrag\0\0\0\x19__widl_f_ondragend_Window\0\0\0\x01\x06Window\x01\0\x01\tondragend\x01\x01\x05self_\tondragend\0\0\0\x1D__widl_f_set_ondragend_Window\0\0\0\x01\x06Window\x01\0\x02\tondragend\x01\x02\x05self_\tondragend\tondragend\0\0\0\x1B__widl_f_ondragenter_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bondragenter\x01\x01\x05self_\x0Bondragenter\0\0\0\x1F__widl_f_set_ondragenter_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bondragenter\x01\x02\x05self_\x0Bondragenter\x0Bondragenter\0\0\0\x1A__widl_f_ondragexit_Window\0\0\0\x01\x06Window\x01\0\x01\nondragexit\x01\x01\x05self_\nondragexit\0\0\0\x1E__widl_f_set_ondragexit_Window\0\0\0\x01\x06Window\x01\0\x02\nondragexit\x01\x02\x05self_\nondragexit\nondragexit\0\0\0\x1B__widl_f_ondragleave_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bondragleave\x01\x01\x05self_\x0Bondragleave\0\0\0\x1F__widl_f_set_ondragleave_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bondragleave\x01\x02\x05self_\x0Bondragleave\x0Bondragleave\0\0\0\x1A__widl_f_ondragover_Window\0\0\0\x01\x06Window\x01\0\x01\nondragover\x01\x01\x05self_\nondragover\0\0\0\x1E__widl_f_set_ondragover_Window\0\0\0\x01\x06Window\x01\0\x02\nondragover\x01\x02\x05self_\nondragover\nondragover\0\0\0\x1B__widl_f_ondragstart_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bondragstart\x01\x01\x05self_\x0Bondragstart\0\0\0\x1F__widl_f_set_ondragstart_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bondragstart\x01\x02\x05self_\x0Bondragstart\x0Bondragstart\0\0\0\x16__widl_f_ondrop_Window\0\0\0\x01\x06Window\x01\0\x01\x06ondrop\x01\x01\x05self_\x06ondrop\0\0\0\x1A__widl_f_set_ondrop_Window\0\0\0\x01\x06Window\x01\0\x02\x06ondrop\x01\x02\x05self_\x06ondrop\x06ondrop\0\0\0 __widl_f_ondurationchange_Window\0\0\0\x01\x06Window\x01\0\x01\x10ondurationchange\x01\x01\x05self_\x10ondurationchange\0\0\0$__widl_f_set_ondurationchange_Window\0\0\0\x01\x06Window\x01\0\x02\x10ondurationchange\x01\x02\x05self_\x10ondurationchange\x10ondurationchange\0\0\0\x19__widl_f_onemptied_Window\0\0\0\x01\x06Window\x01\0\x01\tonemptied\x01\x01\x05self_\tonemptied\0\0\0\x1D__widl_f_set_onemptied_Window\0\0\0\x01\x06Window\x01\0\x02\tonemptied\x01\x02\x05self_\tonemptied\tonemptied\0\0\0\x17__widl_f_onended_Window\0\0\0\x01\x06Window\x01\0\x01\x07onended\x01\x01\x05self_\x07onended\0\0\0\x1B__widl_f_set_onended_Window\0\0\0\x01\x06Window\x01\0\x02\x07onended\x01\x02\x05self_\x07onended\x07onended\0\0\0\x17__widl_f_oninput_Window\0\0\0\x01\x06Window\x01\0\x01\x07oninput\x01\x01\x05self_\x07oninput\0\0\0\x1B__widl_f_set_oninput_Window\0\0\0\x01\x06Window\x01\0\x02\x07oninput\x01\x02\x05self_\x07oninput\x07oninput\0\0\0\x19__widl_f_oninvalid_Window\0\0\0\x01\x06Window\x01\0\x01\toninvalid\x01\x01\x05self_\toninvalid\0\0\0\x1D__widl_f_set_oninvalid_Window\0\0\0\x01\x06Window\x01\0\x02\toninvalid\x01\x02\x05self_\toninvalid\toninvalid\0\0\0\x19__widl_f_onkeydown_Window\0\0\0\x01\x06Window\x01\0\x01\tonkeydown\x01\x01\x05self_\tonkeydown\0\0\0\x1D__widl_f_set_onkeydown_Window\0\0\0\x01\x06Window\x01\0\x02\tonkeydown\x01\x02\x05self_\tonkeydown\tonkeydown\0\0\0\x1A__widl_f_onkeypress_Window\0\0\0\x01\x06Window\x01\0\x01\nonkeypress\x01\x01\x05self_\nonkeypress\0\0\0\x1E__widl_f_set_onkeypress_Window\0\0\0\x01\x06Window\x01\0\x02\nonkeypress\x01\x02\x05self_\nonkeypress\nonkeypress\0\0\0\x17__widl_f_onkeyup_Window\0\0\0\x01\x06Window\x01\0\x01\x07onkeyup\x01\x01\x05self_\x07onkeyup\0\0\0\x1B__widl_f_set_onkeyup_Window\0\0\0\x01\x06Window\x01\0\x02\x07onkeyup\x01\x02\x05self_\x07onkeyup\x07onkeyup\0\0\0\x16__widl_f_onload_Window\0\0\0\x01\x06Window\x01\0\x01\x06onload\x01\x01\x05self_\x06onload\0\0\0\x1A__widl_f_set_onload_Window\0\0\0\x01\x06Window\x01\0\x02\x06onload\x01\x02\x05self_\x06onload\x06onload\0\0\0\x1C__widl_f_onloadeddata_Window\0\0\0\x01\x06Window\x01\0\x01\x0Conloadeddata\x01\x01\x05self_\x0Conloadeddata\0\0\0 __widl_f_set_onloadeddata_Window\0\0\0\x01\x06Window\x01\0\x02\x0Conloadeddata\x01\x02\x05self_\x0Conloadeddata\x0Conloadeddata\0\0\0 __widl_f_onloadedmetadata_Window\0\0\0\x01\x06Window\x01\0\x01\x10onloadedmetadata\x01\x01\x05self_\x10onloadedmetadata\0\0\0$__widl_f_set_onloadedmetadata_Window\0\0\0\x01\x06Window\x01\0\x02\x10onloadedmetadata\x01\x02\x05self_\x10onloadedmetadata\x10onloadedmetadata\0\0\0\x19__widl_f_onloadend_Window\0\0\0\x01\x06Window\x01\0\x01\tonloadend\x01\x01\x05self_\tonloadend\0\0\0\x1D__widl_f_set_onloadend_Window\0\0\0\x01\x06Window\x01\0\x02\tonloadend\x01\x02\x05self_\tonloadend\tonloadend\0\0\0\x1B__widl_f_onloadstart_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bonloadstart\x01\x01\x05self_\x0Bonloadstart\0\0\0\x1F__widl_f_set_onloadstart_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bonloadstart\x01\x02\x05self_\x0Bonloadstart\x0Bonloadstart\0\0\0\x1B__widl_f_onmousedown_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bonmousedown\x01\x01\x05self_\x0Bonmousedown\0\0\0\x1F__widl_f_set_onmousedown_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bonmousedown\x01\x02\x05self_\x0Bonmousedown\x0Bonmousedown\0\0\0\x1C__widl_f_onmouseenter_Window\0\0\0\x01\x06Window\x01\0\x01\x0Conmouseenter\x01\x01\x05self_\x0Conmouseenter\0\0\0 __widl_f_set_onmouseenter_Window\0\0\0\x01\x06Window\x01\0\x02\x0Conmouseenter\x01\x02\x05self_\x0Conmouseenter\x0Conmouseenter\0\0\0\x1C__widl_f_onmouseleave_Window\0\0\0\x01\x06Window\x01\0\x01\x0Conmouseleave\x01\x01\x05self_\x0Conmouseleave\0\0\0 __widl_f_set_onmouseleave_Window\0\0\0\x01\x06Window\x01\0\x02\x0Conmouseleave\x01\x02\x05self_\x0Conmouseleave\x0Conmouseleave\0\0\0\x1B__widl_f_onmousemove_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bonmousemove\x01\x01\x05self_\x0Bonmousemove\0\0\0\x1F__widl_f_set_onmousemove_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bonmousemove\x01\x02\x05self_\x0Bonmousemove\x0Bonmousemove\0\0\0\x1A__widl_f_onmouseout_Window\0\0\0\x01\x06Window\x01\0\x01\nonmouseout\x01\x01\x05self_\nonmouseout\0\0\0\x1E__widl_f_set_onmouseout_Window\0\0\0\x01\x06Window\x01\0\x02\nonmouseout\x01\x02\x05self_\nonmouseout\nonmouseout\0\0\0\x1B__widl_f_onmouseover_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bonmouseover\x01\x01\x05self_\x0Bonmouseover\0\0\0\x1F__widl_f_set_onmouseover_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bonmouseover\x01\x02\x05self_\x0Bonmouseover\x0Bonmouseover\0\0\0\x19__widl_f_onmouseup_Window\0\0\0\x01\x06Window\x01\0\x01\tonmouseup\x01\x01\x05self_\tonmouseup\0\0\0\x1D__widl_f_set_onmouseup_Window\0\0\0\x01\x06Window\x01\0\x02\tonmouseup\x01\x02\x05self_\tonmouseup\tonmouseup\0\0\0\x17__widl_f_onwheel_Window\0\0\0\x01\x06Window\x01\0\x01\x07onwheel\x01\x01\x05self_\x07onwheel\0\0\0\x1B__widl_f_set_onwheel_Window\0\0\0\x01\x06Window\x01\0\x02\x07onwheel\x01\x02\x05self_\x07onwheel\x07onwheel\0\0\0\x17__widl_f_onpause_Window\0\0\0\x01\x06Window\x01\0\x01\x07onpause\x01\x01\x05self_\x07onpause\0\0\0\x1B__widl_f_set_onpause_Window\0\0\0\x01\x06Window\x01\0\x02\x07onpause\x01\x02\x05self_\x07onpause\x07onpause\0\0\0\x16__widl_f_onplay_Window\0\0\0\x01\x06Window\x01\0\x01\x06onplay\x01\x01\x05self_\x06onplay\0\0\0\x1A__widl_f_set_onplay_Window\0\0\0\x01\x06Window\x01\0\x02\x06onplay\x01\x02\x05self_\x06onplay\x06onplay\0\0\0\x19__widl_f_onplaying_Window\0\0\0\x01\x06Window\x01\0\x01\tonplaying\x01\x01\x05self_\tonplaying\0\0\0\x1D__widl_f_set_onplaying_Window\0\0\0\x01\x06Window\x01\0\x02\tonplaying\x01\x02\x05self_\tonplaying\tonplaying\0\0\0\x1A__widl_f_onprogress_Window\0\0\0\x01\x06Window\x01\0\x01\nonprogress\x01\x01\x05self_\nonprogress\0\0\0\x1E__widl_f_set_onprogress_Window\0\0\0\x01\x06Window\x01\0\x02\nonprogress\x01\x02\x05self_\nonprogress\nonprogress\0\0\0\x1C__widl_f_onratechange_Window\0\0\0\x01\x06Window\x01\0\x01\x0Conratechange\x01\x01\x05self_\x0Conratechange\0\0\0 __widl_f_set_onratechange_Window\0\0\0\x01\x06Window\x01\0\x02\x0Conratechange\x01\x02\x05self_\x0Conratechange\x0Conratechange\0\0\0\x17__widl_f_onreset_Window\0\0\0\x01\x06Window\x01\0\x01\x07onreset\x01\x01\x05self_\x07onreset\0\0\0\x1B__widl_f_set_onreset_Window\0\0\0\x01\x06Window\x01\0\x02\x07onreset\x01\x02\x05self_\x07onreset\x07onreset\0\0\0\x18__widl_f_onresize_Window\0\0\0\x01\x06Window\x01\0\x01\x08onresize\x01\x01\x05self_\x08onresize\0\0\0\x1C__widl_f_set_onresize_Window\0\0\0\x01\x06Window\x01\0\x02\x08onresize\x01\x02\x05self_\x08onresize\x08onresize\0\0\0\x18__widl_f_onscroll_Window\0\0\0\x01\x06Window\x01\0\x01\x08onscroll\x01\x01\x05self_\x08onscroll\0\0\0\x1C__widl_f_set_onscroll_Window\0\0\0\x01\x06Window\x01\0\x02\x08onscroll\x01\x02\x05self_\x08onscroll\x08onscroll\0\0\0\x18__widl_f_onseeked_Window\0\0\0\x01\x06Window\x01\0\x01\x08onseeked\x01\x01\x05self_\x08onseeked\0\0\0\x1C__widl_f_set_onseeked_Window\0\0\0\x01\x06Window\x01\0\x02\x08onseeked\x01\x02\x05self_\x08onseeked\x08onseeked\0\0\0\x19__widl_f_onseeking_Window\0\0\0\x01\x06Window\x01\0\x01\tonseeking\x01\x01\x05self_\tonseeking\0\0\0\x1D__widl_f_set_onseeking_Window\0\0\0\x01\x06Window\x01\0\x02\tonseeking\x01\x02\x05self_\tonseeking\tonseeking\0\0\0\x18__widl_f_onselect_Window\0\0\0\x01\x06Window\x01\0\x01\x08onselect\x01\x01\x05self_\x08onselect\0\0\0\x1C__widl_f_set_onselect_Window\0\0\0\x01\x06Window\x01\0\x02\x08onselect\x01\x02\x05self_\x08onselect\x08onselect\0\0\0\x16__widl_f_onshow_Window\0\0\0\x01\x06Window\x01\0\x01\x06onshow\x01\x01\x05self_\x06onshow\0\0\0\x1A__widl_f_set_onshow_Window\0\0\0\x01\x06Window\x01\0\x02\x06onshow\x01\x02\x05self_\x06onshow\x06onshow\0\0\0\x19__widl_f_onstalled_Window\0\0\0\x01\x06Window\x01\0\x01\tonstalled\x01\x01\x05self_\tonstalled\0\0\0\x1D__widl_f_set_onstalled_Window\0\0\0\x01\x06Window\x01\0\x02\tonstalled\x01\x02\x05self_\tonstalled\tonstalled\0\0\0\x18__widl_f_onsubmit_Window\0\0\0\x01\x06Window\x01\0\x01\x08onsubmit\x01\x01\x05self_\x08onsubmit\0\0\0\x1C__widl_f_set_onsubmit_Window\0\0\0\x01\x06Window\x01\0\x02\x08onsubmit\x01\x02\x05self_\x08onsubmit\x08onsubmit\0\0\0\x19__widl_f_onsuspend_Window\0\0\0\x01\x06Window\x01\0\x01\tonsuspend\x01\x01\x05self_\tonsuspend\0\0\0\x1D__widl_f_set_onsuspend_Window\0\0\0\x01\x06Window\x01\0\x02\tonsuspend\x01\x02\x05self_\tonsuspend\tonsuspend\0\0\0\x1C__widl_f_ontimeupdate_Window\0\0\0\x01\x06Window\x01\0\x01\x0Contimeupdate\x01\x01\x05self_\x0Contimeupdate\0\0\0 __widl_f_set_ontimeupdate_Window\0\0\0\x01\x06Window\x01\0\x02\x0Contimeupdate\x01\x02\x05self_\x0Contimeupdate\x0Contimeupdate\0\0\0\x1E__widl_f_onvolumechange_Window\0\0\0\x01\x06Window\x01\0\x01\x0Eonvolumechange\x01\x01\x05self_\x0Eonvolumechange\0\0\0\"__widl_f_set_onvolumechange_Window\0\0\0\x01\x06Window\x01\0\x02\x0Eonvolumechange\x01\x02\x05self_\x0Eonvolumechange\x0Eonvolumechange\0\0\0\x19__widl_f_onwaiting_Window\0\0\0\x01\x06Window\x01\0\x01\tonwaiting\x01\x01\x05self_\tonwaiting\0\0\0\x1D__widl_f_set_onwaiting_Window\0\0\0\x01\x06Window\x01\0\x02\tonwaiting\x01\x02\x05self_\tonwaiting\tonwaiting\0\0\0\x1D__widl_f_onselectstart_Window\0\0\0\x01\x06Window\x01\0\x01\ronselectstart\x01\x01\x05self_\ronselectstart\0\0\0!__widl_f_set_onselectstart_Window\0\0\0\x01\x06Window\x01\0\x02\ronselectstart\x01\x02\x05self_\ronselectstart\ronselectstart\0\0\0\x18__widl_f_ontoggle_Window\0\0\0\x01\x06Window\x01\0\x01\x08ontoggle\x01\x01\x05self_\x08ontoggle\0\0\0\x1C__widl_f_set_ontoggle_Window\0\0\0\x01\x06Window\x01\0\x02\x08ontoggle\x01\x02\x05self_\x08ontoggle\x08ontoggle\0\0\0\x1F__widl_f_onpointercancel_Window\0\0\0\x01\x06Window\x01\0\x01\x0Fonpointercancel\x01\x01\x05self_\x0Fonpointercancel\0\0\0#__widl_f_set_onpointercancel_Window\0\0\0\x01\x06Window\x01\0\x02\x0Fonpointercancel\x01\x02\x05self_\x0Fonpointercancel\x0Fonpointercancel\0\0\0\x1D__widl_f_onpointerdown_Window\0\0\0\x01\x06Window\x01\0\x01\ronpointerdown\x01\x01\x05self_\ronpointerdown\0\0\0!__widl_f_set_onpointerdown_Window\0\0\0\x01\x06Window\x01\0\x02\ronpointerdown\x01\x02\x05self_\ronpointerdown\ronpointerdown\0\0\0\x1B__widl_f_onpointerup_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bonpointerup\x01\x01\x05self_\x0Bonpointerup\0\0\0\x1F__widl_f_set_onpointerup_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bonpointerup\x01\x02\x05self_\x0Bonpointerup\x0Bonpointerup\0\0\0\x1D__widl_f_onpointermove_Window\0\0\0\x01\x06Window\x01\0\x01\ronpointermove\x01\x01\x05self_\ronpointermove\0\0\0!__widl_f_set_onpointermove_Window\0\0\0\x01\x06Window\x01\0\x02\ronpointermove\x01\x02\x05self_\ronpointermove\ronpointermove\0\0\0\x1C__widl_f_onpointerout_Window\0\0\0\x01\x06Window\x01\0\x01\x0Conpointerout\x01\x01\x05self_\x0Conpointerout\0\0\0 __widl_f_set_onpointerout_Window\0\0\0\x01\x06Window\x01\0\x02\x0Conpointerout\x01\x02\x05self_\x0Conpointerout\x0Conpointerout\0\0\0\x1D__widl_f_onpointerover_Window\0\0\0\x01\x06Window\x01\0\x01\ronpointerover\x01\x01\x05self_\ronpointerover\0\0\0!__widl_f_set_onpointerover_Window\0\0\0\x01\x06Window\x01\0\x02\ronpointerover\x01\x02\x05self_\ronpointerover\ronpointerover\0\0\0\x1E__widl_f_onpointerenter_Window\0\0\0\x01\x06Window\x01\0\x01\x0Eonpointerenter\x01\x01\x05self_\x0Eonpointerenter\0\0\0\"__widl_f_set_onpointerenter_Window\0\0\0\x01\x06Window\x01\0\x02\x0Eonpointerenter\x01\x02\x05self_\x0Eonpointerenter\x0Eonpointerenter\0\0\0\x1E__widl_f_onpointerleave_Window\0\0\0\x01\x06Window\x01\0\x01\x0Eonpointerleave\x01\x01\x05self_\x0Eonpointerleave\0\0\0\"__widl_f_set_onpointerleave_Window\0\0\0\x01\x06Window\x01\0\x02\x0Eonpointerleave\x01\x02\x05self_\x0Eonpointerleave\x0Eonpointerleave\0\0\0#__widl_f_ongotpointercapture_Window\0\0\0\x01\x06Window\x01\0\x01\x13ongotpointercapture\x01\x01\x05self_\x13ongotpointercapture\0\0\0'__widl_f_set_ongotpointercapture_Window\0\0\0\x01\x06Window\x01\0\x02\x13ongotpointercapture\x01\x02\x05self_\x13ongotpointercapture\x13ongotpointercapture\0\0\0$__widl_f_onlostpointercapture_Window\0\0\0\x01\x06Window\x01\0\x01\x14onlostpointercapture\x01\x01\x05self_\x14onlostpointercapture\0\0\0(__widl_f_set_onlostpointercapture_Window\0\0\0\x01\x06Window\x01\0\x02\x14onlostpointercapture\x01\x02\x05self_\x14onlostpointercapture\x14onlostpointercapture\0\0\0!__widl_f_onanimationcancel_Window\0\0\0\x01\x06Window\x01\0\x01\x11onanimationcancel\x01\x01\x05self_\x11onanimationcancel\0\0\0%__widl_f_set_onanimationcancel_Window\0\0\0\x01\x06Window\x01\0\x02\x11onanimationcancel\x01\x02\x05self_\x11onanimationcancel\x11onanimationcancel\0\0\0\x1E__widl_f_onanimationend_Window\0\0\0\x01\x06Window\x01\0\x01\x0Eonanimationend\x01\x01\x05self_\x0Eonanimationend\0\0\0\"__widl_f_set_onanimationend_Window\0\0\0\x01\x06Window\x01\0\x02\x0Eonanimationend\x01\x02\x05self_\x0Eonanimationend\x0Eonanimationend\0\0\0$__widl_f_onanimationiteration_Window\0\0\0\x01\x06Window\x01\0\x01\x14onanimationiteration\x01\x01\x05self_\x14onanimationiteration\0\0\0(__widl_f_set_onanimationiteration_Window\0\0\0\x01\x06Window\x01\0\x02\x14onanimationiteration\x01\x02\x05self_\x14onanimationiteration\x14onanimationiteration\0\0\0 __widl_f_onanimationstart_Window\0\0\0\x01\x06Window\x01\0\x01\x10onanimationstart\x01\x01\x05self_\x10onanimationstart\0\0\0$__widl_f_set_onanimationstart_Window\0\0\0\x01\x06Window\x01\0\x02\x10onanimationstart\x01\x02\x05self_\x10onanimationstart\x10onanimationstart\0\0\0\"__widl_f_ontransitioncancel_Window\0\0\0\x01\x06Window\x01\0\x01\x12ontransitioncancel\x01\x01\x05self_\x12ontransitioncancel\0\0\0&__widl_f_set_ontransitioncancel_Window\0\0\0\x01\x06Window\x01\0\x02\x12ontransitioncancel\x01\x02\x05self_\x12ontransitioncancel\x12ontransitioncancel\0\0\0\x1F__widl_f_ontransitionend_Window\0\0\0\x01\x06Window\x01\0\x01\x0Fontransitionend\x01\x01\x05self_\x0Fontransitionend\0\0\0#__widl_f_set_ontransitionend_Window\0\0\0\x01\x06Window\x01\0\x02\x0Fontransitionend\x01\x02\x05self_\x0Fontransitionend\x0Fontransitionend\0\0\0\x1F__widl_f_ontransitionrun_Window\0\0\0\x01\x06Window\x01\0\x01\x0Fontransitionrun\x01\x01\x05self_\x0Fontransitionrun\0\0\0#__widl_f_set_ontransitionrun_Window\0\0\0\x01\x06Window\x01\0\x02\x0Fontransitionrun\x01\x02\x05self_\x0Fontransitionrun\x0Fontransitionrun\0\0\0!__widl_f_ontransitionstart_Window\0\0\0\x01\x06Window\x01\0\x01\x11ontransitionstart\x01\x01\x05self_\x11ontransitionstart\0\0\0%__widl_f_set_ontransitionstart_Window\0\0\0\x01\x06Window\x01\0\x02\x11ontransitionstart\x01\x02\x05self_\x11ontransitionstart\x11ontransitionstart\0\0\0$__widl_f_onwebkitanimationend_Window\0\0\0\x01\x06Window\x01\0\x01\x14onwebkitanimationend\x01\x01\x05self_\x14onwebkitanimationend\0\0\0(__widl_f_set_onwebkitanimationend_Window\0\0\0\x01\x06Window\x01\0\x02\x14onwebkitanimationend\x01\x02\x05self_\x14onwebkitanimationend\x14onwebkitanimationend\0\0\0*__widl_f_onwebkitanimationiteration_Window\0\0\0\x01\x06Window\x01\0\x01\x1Aonwebkitanimationiteration\x01\x01\x05self_\x1Aonwebkitanimationiteration\0\0\0.__widl_f_set_onwebkitanimationiteration_Window\0\0\0\x01\x06Window\x01\0\x02\x1Aonwebkitanimationiteration\x01\x02\x05self_\x1Aonwebkitanimationiteration\x1Aonwebkitanimationiteration\0\0\0&__widl_f_onwebkitanimationstart_Window\0\0\0\x01\x06Window\x01\0\x01\x16onwebkitanimationstart\x01\x01\x05self_\x16onwebkitanimationstart\0\0\0*__widl_f_set_onwebkitanimationstart_Window\0\0\0\x01\x06Window\x01\0\x02\x16onwebkitanimationstart\x01\x02\x05self_\x16onwebkitanimationstart\x16onwebkitanimationstart\0\0\0%__widl_f_onwebkittransitionend_Window\0\0\0\x01\x06Window\x01\0\x01\x15onwebkittransitionend\x01\x01\x05self_\x15onwebkittransitionend\0\0\0)__widl_f_set_onwebkittransitionend_Window\0\0\0\x01\x06Window\x01\0\x02\x15onwebkittransitionend\x01\x02\x05self_\x15onwebkittransitionend\x15onwebkittransitionend\0\0\0\x17__widl_f_onerror_Window\0\0\0\x01\x06Window\x01\0\x01\x07onerror\x01\x01\x05self_\x07onerror\0\0\0\x1B__widl_f_set_onerror_Window\0\0\0\x01\x06Window\x01\0\x02\x07onerror\x01\x02\x05self_\x07onerror\x07onerror\0\0\0\x1C__widl_f_ontouchstart_Window\0\0\0\x01\x06Window\x01\0\x01\x0Contouchstart\x01\x01\x05self_\x0Contouchstart\0\0\0 __widl_f_set_ontouchstart_Window\0\0\0\x01\x06Window\x01\0\x02\x0Contouchstart\x01\x02\x05self_\x0Contouchstart\x0Contouchstart\0\0\0\x1A__widl_f_ontouchend_Window\0\0\0\x01\x06Window\x01\0\x01\nontouchend\x01\x01\x05self_\nontouchend\0\0\0\x1E__widl_f_set_ontouchend_Window\0\0\0\x01\x06Window\x01\0\x02\nontouchend\x01\x02\x05self_\nontouchend\nontouchend\0\0\0\x1B__widl_f_ontouchmove_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bontouchmove\x01\x01\x05self_\x0Bontouchmove\0\0\0\x1F__widl_f_set_ontouchmove_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bontouchmove\x01\x02\x05self_\x0Bontouchmove\x0Bontouchmove\0\0\0\x1D__widl_f_ontouchcancel_Window\0\0\0\x01\x06Window\x01\0\x01\rontouchcancel\x01\x01\x05self_\rontouchcancel\0\0\0!__widl_f_set_ontouchcancel_Window\0\0\0\x01\x06Window\x01\0\x02\rontouchcancel\x01\x02\x05self_\rontouchcancel\rontouchcancel\0\0\0\x1C__widl_f_onafterprint_Window\0\0\0\x01\x06Window\x01\0\x01\x0Conafterprint\x01\x01\x05self_\x0Conafterprint\0\0\0 __widl_f_set_onafterprint_Window\0\0\0\x01\x06Window\x01\0\x02\x0Conafterprint\x01\x02\x05self_\x0Conafterprint\x0Conafterprint\0\0\0\x1D__widl_f_onbeforeprint_Window\0\0\0\x01\x06Window\x01\0\x01\ronbeforeprint\x01\x01\x05self_\ronbeforeprint\0\0\0!__widl_f_set_onbeforeprint_Window\0\0\0\x01\x06Window\x01\0\x02\ronbeforeprint\x01\x02\x05self_\ronbeforeprint\ronbeforeprint\0\0\0\x1E__widl_f_onbeforeunload_Window\0\0\0\x01\x06Window\x01\0\x01\x0Eonbeforeunload\x01\x01\x05self_\x0Eonbeforeunload\0\0\0\"__widl_f_set_onbeforeunload_Window\0\0\0\x01\x06Window\x01\0\x02\x0Eonbeforeunload\x01\x02\x05self_\x0Eonbeforeunload\x0Eonbeforeunload\0\0\0\x1C__widl_f_onhashchange_Window\0\0\0\x01\x06Window\x01\0\x01\x0Conhashchange\x01\x01\x05self_\x0Conhashchange\0\0\0 __widl_f_set_onhashchange_Window\0\0\0\x01\x06Window\x01\0\x02\x0Conhashchange\x01\x02\x05self_\x0Conhashchange\x0Conhashchange\0\0\0 __widl_f_onlanguagechange_Window\0\0\0\x01\x06Window\x01\0\x01\x10onlanguagechange\x01\x01\x05self_\x10onlanguagechange\0\0\0$__widl_f_set_onlanguagechange_Window\0\0\0\x01\x06Window\x01\0\x02\x10onlanguagechange\x01\x02\x05self_\x10onlanguagechange\x10onlanguagechange\0\0\0\x19__widl_f_onmessage_Window\0\0\0\x01\x06Window\x01\0\x01\tonmessage\x01\x01\x05self_\tonmessage\0\0\0\x1D__widl_f_set_onmessage_Window\0\0\0\x01\x06Window\x01\0\x02\tonmessage\x01\x02\x05self_\tonmessage\tonmessage\0\0\0\x1E__widl_f_onmessageerror_Window\0\0\0\x01\x06Window\x01\0\x01\x0Eonmessageerror\x01\x01\x05self_\x0Eonmessageerror\0\0\0\"__widl_f_set_onmessageerror_Window\0\0\0\x01\x06Window\x01\0\x02\x0Eonmessageerror\x01\x02\x05self_\x0Eonmessageerror\x0Eonmessageerror\0\0\0\x19__widl_f_onoffline_Window\0\0\0\x01\x06Window\x01\0\x01\tonoffline\x01\x01\x05self_\tonoffline\0\0\0\x1D__widl_f_set_onoffline_Window\0\0\0\x01\x06Window\x01\0\x02\tonoffline\x01\x02\x05self_\tonoffline\tonoffline\0\0\0\x18__widl_f_ononline_Window\0\0\0\x01\x06Window\x01\0\x01\x08ononline\x01\x01\x05self_\x08ononline\0\0\0\x1C__widl_f_set_ononline_Window\0\0\0\x01\x06Window\x01\0\x02\x08ononline\x01\x02\x05self_\x08ononline\x08ononline\0\0\0\x1A__widl_f_onpagehide_Window\0\0\0\x01\x06Window\x01\0\x01\nonpagehide\x01\x01\x05self_\nonpagehide\0\0\0\x1E__widl_f_set_onpagehide_Window\0\0\0\x01\x06Window\x01\0\x02\nonpagehide\x01\x02\x05self_\nonpagehide\nonpagehide\0\0\0\x1A__widl_f_onpageshow_Window\0\0\0\x01\x06Window\x01\0\x01\nonpageshow\x01\x01\x05self_\nonpageshow\0\0\0\x1E__widl_f_set_onpageshow_Window\0\0\0\x01\x06Window\x01\0\x02\nonpageshow\x01\x02\x05self_\nonpageshow\nonpageshow\0\0\0\x1A__widl_f_onpopstate_Window\0\0\0\x01\x06Window\x01\0\x01\nonpopstate\x01\x01\x05self_\nonpopstate\0\0\0\x1E__widl_f_set_onpopstate_Window\0\0\0\x01\x06Window\x01\0\x02\nonpopstate\x01\x02\x05self_\nonpopstate\nonpopstate\0\0\0\x19__widl_f_onstorage_Window\0\0\0\x01\x06Window\x01\0\x01\tonstorage\x01\x01\x05self_\tonstorage\0\0\0\x1D__widl_f_set_onstorage_Window\0\0\0\x01\x06Window\x01\0\x02\tonstorage\x01\x02\x05self_\tonstorage\tonstorage\0\0\0\x18__widl_f_onunload_Window\0\0\0\x01\x06Window\x01\0\x01\x08onunload\x01\x01\x05self_\x08onunload\0\0\0\x1C__widl_f_set_onunload_Window\0\0\0\x01\x06Window\x01\0\x02\x08onunload\x01\x02\x05self_\x08onunload\x08onunload\0\0\0\x14__widl_f_atob_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x04atob\x04atob\0\0\0\x14__widl_f_btoa_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x04btoa\x04btoa\0\0\0\x1E__widl_f_clear_interval_Window\0\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\rclearInterval\0\0\0*__widl_f_clear_interval_with_handle_Window\0\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x06handle\rclearInterval\0\0\0\x1D__widl_f_clear_timeout_Window\0\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x0CclearTimeout\0\0\0)__widl_f_clear_timeout_with_handle_Window\0\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x06handle\x0CclearTimeout\0\0\0<__widl_f_create_image_bitmap_with_html_canvas_element_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\06__widl_f_create_image_bitmap_with_buffer_source_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\01__widl_f_create_image_bitmap_with_u8_array_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\0`__widl_f_create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0Z__widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0U__widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0\x1E__widl_f_fetch_with_str_Window\0\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x05input\x05fetch\0\0\0*__widl_f_set_interval_with_callback_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07handler\x0BsetInterval\0\0\0D__widl_f_set_interval_with_callback_and_timeout_and_arguments_Window\x01\x01\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\targuments\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07handler\x07timeout\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x0Barguments_1\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x05\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x07\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x08\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window\x01\0\0\x01\x06Window\x01\0\0\x01\t\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\x0Barguments_6\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window\x01\0\0\x01\x06Window\x01\0\0\x01\n\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\x0Barguments_6\x0Barguments_7\x0BsetInterval\0\0\0%__widl_f_set_interval_with_str_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07handler\x0BsetInterval\0\0\0<__widl_f_set_interval_with_str_and_timeout_and_unused_Window\x01\x01\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x06unused\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_0_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07handler\x07timeout\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_1_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x08unused_1\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_2_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x05\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_3_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_4_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x07\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_5_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x08\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_6_Window\x01\0\0\x01\x06Window\x01\0\0\x01\t\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_7_Window\x01\0\0\x01\x06Window\x01\0\0\x01\n\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\x08unused_7\x0BsetInterval\0\0\0)__widl_f_set_timeout_with_callback_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07handler\nsetTimeout\0\0\0C__widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window\x01\x01\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\targuments\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07handler\x07timeout\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x0Barguments_1\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x05\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x07\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x08\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window\x01\0\0\x01\x06Window\x01\0\0\x01\t\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\x0Barguments_6\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window\x01\0\0\x01\x06Window\x01\0\0\x01\n\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\x0Barguments_6\x0Barguments_7\nsetTimeout\0\0\0$__widl_f_set_timeout_with_str_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07handler\nsetTimeout\0\0\0;__widl_f_set_timeout_with_str_and_timeout_and_unused_Window\x01\x01\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x06unused\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07handler\x07timeout\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x08unused_1\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x05\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x07\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x08\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window\x01\0\0\x01\x06Window\x01\0\0\x01\t\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window\x01\0\0\x01\x06Window\x01\0\0\x01\n\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\x08unused_7\nsetTimeout\0\0\0\x16__widl_f_origin_Window\0\0\0\x01\x06Window\x01\0\x01\x06origin\x01\x01\x05self_\x06origin\0\0\0!__widl_f_is_secure_context_Window\0\0\0\x01\x06Window\x01\0\x01\x0FisSecureContext\x01\x01\x05self_\x0FisSecureContext\0\0\0\0\x18web-sys-cdb8795b9a05e44c\0"
};
